event the mod mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :mod mod ) :mode imperative ) === event the modifier modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :mod modifier ) :mode imperative ) === push the right green button === ( p / push :arg0 ( y / you ) :arg1 ( q / button :mod right :mod green ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
into the mod === ( e /  event :destination ( m /  mod :op1 ( VAR / into ) ) ) === into the obj === ( e / event :destination ( r / obj :op1 ( i / into ) ) ) === into the room === ( e / event :destination ( r / room :op1 ( i / into ) ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
the mod mod on the mod mod === ( m /  mod :mod mod :location ( m /  mod :mod mod :op1 ( VAR / on ) ) ) === the modifier obj on the modifier obj === ( q / obj :mod modifier :location ( l / obj :mod modifier :op1 ( p / on ) ) ) === the right one on the left wall === ( q / one :mod right :location ( l / wall :mod left :op1 ( p / on ) ) ) === give
event mod the mod person came in === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative :path ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) ) === event spatial the obj person came in === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative :path ( w / obj :arg1-of ( c / event :arg0 ( y / person ) ) ) ) === go out the way you came in === ( t / go :arg0 ( y / you ) :direction ( a / out ) :mode imperative :path ( w / way :arg1-of ( c / come :arg0 ( y / you ) ) ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod the mod person came in from === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative :path ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) ) === spatial the obj person came in from === ( e / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative :path ( w / obj :arg1-of ( c / event :arg0 ( y / person ) ) ) ) === back the way you came in from === ( e / event :arg0 ( y / you ) :direction ( a / back ) :mode imperative :path ( w / way :arg1-of ( c / come :arg0 ( y / you ) ) ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
right most mod === ( m /  mod :domain ( m /  mod ) :mod mod ) === right most obj === ( q / obj :domain ( t / obj ) :mod modifier ) === right most wall === ( q / wall :domain ( t / entity ) :mod right-most ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( p / event :arg0 ( y / person ) :mode imperative ) === click === ( p / click :arg0 ( y / you ) :mode imperative ) === give
the mod mod === ( m /  mod :domain ( m /  mod ) :mod mod ) === the modifier obj === ( q / obj :domain ( t / obj ) :mod modifier ) === the right one === ( q / one :domain ( t / entity ) :mod right ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === click the right one === ( p / click :arg0 ( y / you ) :arg1 ( q / one :mod right ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod through === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :path ( VAR / through ) :mode imperative ) === spatial through === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :path ( h / through ) :mode imperative ) === straight through === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :path ( h / through ) :mode imperative ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === click the red button === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod red ) :mode imperative ) === give
ok, temporal event mod the mod person mod came in === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mod mod :path ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) :mode imperative ) === ok, temporal event spatial the obj person modifier came in === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mod modifier :path ( w / obj :arg1-of ( c / event :arg0 ( y / person ) ) ) :mode imperative ) === ok, now go back the way you originally came in === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / back ) :mod originally :path ( w / way :arg1-of ( c / come :arg0 ( y / you ) ) ) :mode imperative ) === give
so mod === ( e /  event :direction ( m /  mod ) ) === so spatial === ( e / event :direction ( r / spatial ) ) === so left === ( e / event :direction ( r / left ) ) === give
mod of mod mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod ) :source ( m /  mod :mod mod ) :mode imperative ) === spatial of modifier obj === ( t / event :arg0 ( y / person ) :destination ( w / spatial ) :source ( r / obj :mod modifier ) :mode imperative ) === out of this room === ( t / event :arg0 ( y / you ) :destination ( w / out ) :source ( r / room :mod this ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod mod mod as temporal === ( m /  mod :domain ( m /  mod ) :mod mod :mod mod :prep-as ( VAR / temporal ) ) === modifier modifier obj as temporal === ( q / obj :domain ( t / obj ) :mod modifier :mod modifier :prep-as ( be / temporal ) ) === same red button as before === ( q / button :domain ( t / entity ) :mod same :mod red :prep-as ( be / before ) ) === give
the mod to the mod of the mod === ( m /  mod :domain ( m /  mod ) :location ( m /  mod :op1 ( VAR / of :direction ( ( / mod ) ) ) ) === the obj to the spatial of the obj === ( q / obj :domain ( t / obj ) :location ( l / obj :op1 ( s / of :direction ( b / spatial ) ) ) ) === the one to the left of the chair === ( q / one :domain ( t / entity ) :location ( l / chair :op1 ( s / of :direction ( b / left ) ) ) ) === give
the mod on the mod === ( m /  mod :domain ( m /  mod ) :location ( m /  mod ) ) === the obj on the spatial === ( q / obj :domain ( t / obj ) :location ( l / spatial ) ) === the one on the right === ( q / one :domain ( t / entity ) :location ( l / right ) ) === give
ok event mod the mod person came === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :path ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) :mode imperative ) === ok event spatial the obj person came === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :path ( w / obj :arg1-of ( c / event :arg0 ( y / person ) ) ) :mode imperative ) === ok go back the way you came === ( t / go :arg0 ( y / you ) :direction ( a / back ) :path ( w / way :arg1-of ( c / come :arg0 ( y / you ) ) ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
keep going === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === keep going === ( e / event :arg0 ( y / person ) :mode imperative ) === keep going === ( e / keep-going :arg0 ( y / you ) :mode imperative ) === give
mod mod mod === ( m /  mod :domain ( m /  mod ) :mod mod :mod mod ) === modifier modifier obj === ( q / obj :domain ( t / obj ) :mod modifier :mod modifier ) === same green button === ( q / button :domain ( t / entity ) :mod same :mod green ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === click the blue button === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod blue ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
mod on the mod of the mod === ( ( / event :arg0 ( m /  mod ) :location ( m /  mod :direction ( m /  mod :op1 ( VAR / of ) ) ) ) === objs on the spatial of the property === ( b / event :arg0 ( i1 / obj ) :location ( l / property :direction ( r / spatial :op1 ( o / of ) ) ) ) === its on the right of the green === ( b / be :arg0 ( i1 / it ) :location ( l / green :direction ( r / right :op1 ( o / of ) ) ) ) === give
event mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :mod mod ) :mode imperative ) === event modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ( t / obj ) :mod modifier ) :mode imperative ) === press that one === ( p / press :arg0 ( y / you ) :arg1 ( q / one ( t / entity ) :mod that ) :mode imperative ) === give
okay event mod into the mod person were just in === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) :mode imperative ) === okay event spatial into the obj person were just in === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( w / obj :arg1-of ( c / event :arg0 ( y / person ) ) ) :mode imperative ) === okay go back into the room you were just in === ( t / go :arg0 ( y / you ) :direction ( a / back ) :destination ( w / room :arg1-of ( c / be :arg0 ( y / you ) ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
the mod mod on the mod === ( m /  mod :domain ( m /  mod ) :mod mod :location ( m /  mod :op1 ( VAR / on ) ) ) === the modifier obj on the obj === ( q / obj :domain ( t / obj ) :mod modifier :location ( l / obj :op1 ( o / on ) ) ) === the green button on the wall === ( q / button :domain ( t / entity ) :mod green :location ( l / wall :op1 ( o / on ) ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
the mod mod is the winner === ( m /  mod :domain ( m /  mod ) :mod mod ) === the modifier obj is the winner === ( q / obj :domain ( t / obj ) :mod modifier ) === the yellow button is the winner === ( q / button :domain ( t / entity ) :mod yellow ) === give
okay, event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === okay, event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === okay, turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
straight === ( e /  event :direction ( m /  mod ) ) === straight === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / left ) ) === give
event the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ) :mode imperative ) === press the button === ( p / press :arg0 ( y / you ) :arg1 ( q / button ) :mode imperative ) === give
yeah === ( VAR / yes ) === yeah === ( c / yes ) === yeah === ( c / yes ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event mod to the mod person were just in === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) :mode imperative ) === event spatial to the obj person were just in === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( w / obj :arg1-of ( c / event :arg0 ( y / person ) ) ) :mode imperative ) === go back to the room you were just in === ( t / go :arg0 ( y / you ) :direction ( a / back ) :destination ( w / room :arg1-of ( c / be :arg0 ( y / you ) ) ) :mode imperative ) === give
event that mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event that obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ) :mode imperative ) === press that button === ( p / press :arg0 ( y / you ) :arg1 ( q / button ) :mode imperative ) === give
event mod to the mod person were just in === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) :mode imperative ) === event spatial to the obj person were just in === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( w / obj :arg1-of ( c / event :arg0 ( y / person ) ) ) :mode imperative ) === go back to the room you were just in === ( t / go :arg0 ( y / you ) :direction ( a / back ) :destination ( w / room :arg1-of ( c / be :arg0 ( y / you ) ) ) :mode imperative ) === give
okay, event to the mod mod and event mod for a number === ( VAR / and :op1 ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :mod mod ) :mode imperative ) :op2 ( e /  event :arg0 ( VAR / person ) :location ( m /  mod ) :duration ( VAR / number ) ) ) === okay, event to the modifier obj and event spatial for a number === ( s / and :op1 ( t / event :arg0 ( y / person ) :destination ( a / obj :mod modifier ) :mode imperative ) :op2 ( st / event :arg0 ( y / person ) :location ( l / spatial ) :duration ( s1 / number ) ) ) === okay, go to the unlocked pad and stay there for a second === ( s / and :op1 ( t / go :arg0 ( y / you ) :destination ( a / pad :mod unlocked ) :mode imperative ) :op2 ( st / stay :arg0 ( y / you ) :location ( l / there ) :duration ( s1 / second ) ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod mod === ( e /  event :direction ( m /  mod ) :destination ( m /  mod ) ) === spatial spatial === ( e / event :direction ( r / spatial ) :destination ( ou / spatial ) ) === straight out === ( e / event :direction ( r / straight ) :destination ( ou / out ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
event the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) ) :mode imperative ) === event the propertye === ( p / event :arg0 ( y / person ) :arg1 ( q / property ( t / obj ) ) :mode imperative ) === hit the bluee === ( p / hit :arg0 ( y / you ) :arg1 ( q / blue ( t / entity ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
person event to event mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :mod mod ) ) ) === person event to event modifier spatial === ( w / event :arg0 ( y / person ) :arg1 ( g / event :arg0 ( y / person ) :destination ( o / spatial :mod modifier ) ) ) === you want to go straight out === ( w / want :arg0 ( y / you ) :arg1 ( g / go :arg0 ( y / you ) :destination ( o / out :mod straight ) ) ) === give
mod mod === ( m /  mod :domain ( m /  mod ) :mod mod ) === modifier obj === ( q / obj :domain ( t / obj ) :mod modifier ) === left one === ( q / one :domain ( t / entity ) :mod left ) === give
okay person event to event mod the way person came in === ( e /  event :arg0 ( VAR / person ) :arg1 ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) ) ) === okay person event to event spatial the way person came in === ( w / event :arg0 ( y / person ) :arg1 ( g / event :arg0 ( y / person ) :destination ( o / spatial :arg1-of ( c / event :arg0 ( y / person ) ) ) ) ) === okay you want to come out the way you came in === ( w / want :arg0 ( y / you ) :arg1 ( g / come :arg0 ( y / you ) :destination ( o / out :arg1-of ( c / come :arg0 ( y / you ) ) ) ) ) === give
event mod a little === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mod mod :mode imperative ) === event spatial a little === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mod modifier :mode imperative ) === turn left a little === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mod a-little :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go there === ( t / go :arg0 ( y / you ) :direction ( a / there ) :mode imperative ) === give
person event to event a mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) ) === person event to event a spatial === ( t / event :arg0 ( y / person ) :arg1 ( a / event :arg0 ( y / person ) :arg1 ( r / spatial ) ) ) === you want to make a right === ( t / want :arg0 ( y / you ) :arg1 ( a / make :arg0 ( y / you ) :arg1 ( r / right ) ) ) === give
event to the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event to the spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go to the right === ( t / go :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === out === ( e / event :direction ( r / out ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( m /  mod :domain ( m /  mod ) ) === obj === ( q / obj :domain ( t / obj ) ) === button === ( q / button :domain ( t / entity ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
keep going mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod ) :mode imperative ) === keep going spatial === ( t / event :arg0 ( y / person ) :destination ( a / spatial ) :mode imperative ) === keep going out === ( t / keep-going :arg0 ( y / you ) :destination ( a / out ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
event mod but dont event === ( VAR / but :op1 ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) :op2 ( e /  event :arg0 ( VAR / person ) :polarity - ) ) === event spatial but dont event === ( s / but :op1 ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) :op2 ( m / event :arg0 ( y / person ) :polarity - ) ) === turn left but dont move === ( s / but :op1 ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) :op2 ( m / move :arg0 ( y / you ) :polarity - ) ) === give
event mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod :mod mod ) :mode imperative ) === event modifier spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial :mod modifier ) :mode imperative ) === go straight left === ( t / go :arg0 ( y / you ) :direction ( a / left :mod straight ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
event the mod mod please === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj please === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === press the green button please === ( p / press :arg0 ( y / you ) :arg1 ( q / button :mod green ) :mode imperative ) === give
okay event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === okay event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === okay turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
youre going to mod temporal a mod mod === ( VAR / and :op1 ( ( / event :direction ( m /  mod ) ) :op2 ( e /  event :time ( VAR / temporal ) :destination ( m /  mod :mod mod ) ) ) === youre going to spatial temporal a modifier spatial === ( s / and :op1 ( e1 / event :direction ( r / spatial ) ) :op2 ( e2 / event :time ( m / temporal ) :destination ( r / spatial :mod modifier ) ) ) === youre going to straight then a left out === ( s / and :op1 ( e1 / event :direction ( r / straight ) ) :op2 ( e2 / event :time ( m / then ) :destination ( r / out :mod left ) ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
great, person event to event that mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) ) ) === great, person event to event that modifier obj === ( w / event :arg0 ( y / person ) :arg1 ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) ) ) === great, you want to press that green button === ( w / want :arg0 ( y / you ) :arg1 ( p / press :arg0 ( y / you ) :arg1 ( q / button :mod green ) ) ) === give
person want to event the mod on the mod to mod first === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :direction ( m /  mod :op1 ( VAR / ( ) ) ) ) ) === person want to event the modifier on the obj to spatial first === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :direction ( q / spatial :op1 ( o / to ) ) ) ) ) === you want to press the yellow on the wall to left first === ( p / press :arg0 ( y / you ) :arg1 ( q / button :mod yellow :location ( l / wall :direction ( q / left :op1 ( o / to ) ) ) ) ) === give
temporal event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === temporal event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === then turn around === ( t / turn :time ( m / then ) :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event mod event the mod === ( VAR / and :op1 ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) :op2 ( e /  event :arg0 ( VAR / person ) :arg1 ( ( / mod ) :mode imperative ) ) === event spatial event the obj === ( s / and :op1 ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) :op2 ( f / event :arg0 ( y / person ) :arg1 ( pl / obj ) :mode imperative ) ) === turn around face the plant === ( s / and :op1 ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) :op2 ( f / face :arg0 ( y / you ) :arg1 ( pl / plant ) :mode imperative ) ) === give
person wanna event that mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) ) ) === person wanna event that modifier obj === ( w / event :arg0 ( y / person ) :arg1 ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) ) ) === you wanna get that red button === ( w / want :arg0 ( y / you ) :arg1 ( p / get :arg0 ( y / you ) :arg1 ( q / button :mod red ) ) ) === give
temporal person event to get the mod mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :arg1 ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) ) ) === temporal person event to get the modifier obj === ( w / event :time ( m / temporal ) :arg0 ( y / person ) :arg1 ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) ) ) === now you want to get the blue button === ( w / want :time ( m / now ) :arg0 ( y / you ) :arg1 ( p / press :arg0 ( y / you ) :arg1 ( q / button :mod blue ) ) ) === give
the mod mod to the mod === ( m /  mod :domain ( m /  mod ) :location ( m /  mod :direction ( m /  mod :op1 ( VAR / ( ) ) ) ) === the obj property to the property === ( q / obj :domain ( t / obj ) :location ( l / property :direction ( c / property :op1 ( t / to ) ) ) ) === the one closest to the yellow === ( q / one :domain ( t / entity ) :location ( l / yellow :direction ( c / closest :op1 ( t / to ) ) ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go back === ( t / go :arg0 ( y / you ) :direction ( a / back ) :mode imperative ) === give
we have a ways to event to when person get into a mod stop === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / into ) ) :mode imperative ) === we have a ways to event to when person get into a obj stop === ( t / event :arg0 ( y / person ) :destination ( a / obj :op1 ( i / into ) ) :mode imperative ) === we have a ways to go to when you get into a room stop === ( t / go :arg0 ( y / you ) :destination ( a / room :op1 ( i / into ) ) :mode imperative ) === give
person event to mod the mod person are in === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) ) ) ) === person event to obj the obj person are in === ( w / event :arg0 ( y / person ) :arg1 ( p / obj :arg0 ( y / person ) :arg1 ( q / obj ( t / obj ) ) ) ) === you want to exit the room you are in === ( w / want :arg0 ( y / you ) :arg1 ( p / exit :arg0 ( y / you ) :arg1 ( q / room ( t / entity ) ) ) ) === give
event over the mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / over ) ) :mode imperative ) === event over the obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( o / over ) ) :mode imperative ) === go over the pad === ( t / go :arg0 ( y / you ) :path ( a / pad :op1 ( o / over ) ) :mode imperative ) === give
mod mod mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod ) :path ( m /  mod :mod mod ) :mode imperative ) === spatial modifier obj === ( t / event :arg0 ( y / person ) :destination ( o / spatial ) :path ( a / obj :mod modifier ) :mode imperative ) === out that way === ( t / event :arg0 ( y / you ) :destination ( o / out ) :path ( a / way :mod that ) :mode imperative ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( t / event :arg0 ( y / person ) :mode imperative ) === go === ( t / go :arg0 ( y / you ) :mode imperative ) === give
okay event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === okay event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === okay turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
event a mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === event a spatial === ( t / event :arg0 ( y / person ) :arg1 ( l / spatial ) ) === take a left === ( t / take :arg0 ( y / you ) :arg1 ( l / left ) ) === give
event to the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event to the spatial === ( t / event :arg0 ( y / person ) :direction ( l / spatial ) :mode imperative ) === go to the left === ( t / go :arg0 ( y / you ) :direction ( l / left ) :mode imperative ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( t / event :arg0 ( y / person ) :mode imperative ) === go === ( t / go :arg0 ( y / you ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
temporal event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === temporal event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === now turn around === ( t / turn :time ( m / now ) :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( t / event :arg0 ( y / person ) :mode imperative ) === go === ( t / go :arg0 ( y / you ) :mode imperative ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( t / event :arg0 ( y / person ) :mode imperative ) === go === ( t / go :arg0 ( y / you ) :mode imperative ) === give
person event to keep eventing straight but to the mod === ( VAR / but :op1 ( e /  event :arg0 ( VAR / person ) :arg1 ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) ) :mode imperative ) :op2 ( e /  event :direction ( m /  mod ) ) ) === person event to keep eventing straight but to the spatial === ( s / but :op1 ( w / event :arg0 ( y / person ) :arg1 ( p / event :arg0 ( y / person ) :direction ( l / spatial ) ) :mode imperative ) :op2 ( e / event :direction ( r / spatial ) ) ) === you want to keep going straight but to the left === ( s / but :op1 ( w / want :arg0 ( y / you ) :arg1 ( p / go :arg0 ( y / you ) :direction ( l / left ) ) :mode imperative ) :op2 ( e / event :direction ( r / left ) ) ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( t / event :arg0 ( y / person ) :mode imperative ) === go === ( t / go :arg0 ( y / you ) :mode imperative ) === give
event the mod mod temporal === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :time ( VAR / temporal ) :mode imperative ) === event the modifier obj temporal === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :time ( m / temporal ) :mode imperative ) === hit the yellow button again === ( p / hit :arg0 ( y / you ) :arg1 ( q / button :mod yellow ) :time ( m / again ) :mode imperative ) === give
event === ( e /  event :arg0 ( VAR / person ) :time ( VAR / temporal ) :mode imperative ) === event === ( p / event :arg0 ( y / person ) :time ( m / temporal ) :mode imperative ) === hit === ( p / hit :arg0 ( y / you ) :time ( m / again ) :mode imperative ) === give
great temporal event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === great temporal event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === great now turn around === ( t / turn :time ( m / now ) :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event over the mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / over ) ) :mode imperative ) === event over the obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( o / over ) ) :mode imperative ) === go over the pad === ( t / go :arg0 ( y / you ) :path ( a / pad :op1 ( o / over ) ) :mode imperative ) === give
event that mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event that modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === hit that blue button === ( p / hit :arg0 ( y / you ) :arg1 ( q / button :mod blue ) :mode imperative ) === give
event into the mod mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :mod mod ) :mode imperative ) === event into the modifier obj === ( t / event :arg0 ( y / person ) :destination ( l / obj :mod modifier ) :mode imperative ) === go into the left room === ( t / go :arg0 ( y / you ) :destination ( l / room :mod left ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :mode imperative ) === go back === ( t / go :arg0 ( y / you ) :direction ( b / back ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
mod === ( m /  mod :domain ( m /  mod ) ) === property === ( q / property :domain ( t / obj ) ) === red === ( q / red :domain ( t / entity ) ) === give
event mod and event mod === ( VAR / and :op1 ( ( / event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) :op2 ( ( / event :arg0 ( ( / person ) :direction ( ( / mod ) :mode imperative ) ) === event spatial and event spatial === ( s / and :op1 ( t1 / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) :op2 ( t2 / event :arg0 ( y1 / person ) :direction ( a1 / spatial ) :mode imperative ) ) === turn around and go out === ( s / and :op1 ( t1 / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) :op2 ( t2 / go :arg0 ( y1 / you ) :direction ( a1 / out ) :mode imperative ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
okay person want to take a mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === okay person want to take a spatial === ( t / event :arg0 ( y / person ) :arg1 ( l / spatial ) ) === okay you want to take a left === ( t / make :arg0 ( y / you ) :arg1 ( l / left ) ) === give
event i === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event i === ( t / event :arg0 ( y / person ) :mode imperative ) === go i === ( t / go :arg0 ( y / you ) :mode imperative ) === give
mod mod === ( m /  mod :domain ( m /  mod ) :mod mod ) === modifier obj === ( q / obj :domain ( t / obj ) :mod modifier ) === green button === ( q / button :domain ( t / entity ) :mod green ) === give
okay event mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod ) :mode imperative ) === okay event spatial spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( o / spatial ) :mode imperative ) === okay go back out === ( t / go :arg0 ( y / you ) :direction ( a / back ) :destination ( o / out ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
okay event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === okay event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === okay go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
go === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === go === ( t / event :arg0 ( y / person ) :mode imperative ) === go === ( t / turn :arg0 ( y / you ) :mode imperative ) === give
to the mod === ( e /  event :direction ( m /  mod ) ) === to the spatial === ( e / event :direction ( r / spatial ) ) === to the left === ( e / event :direction ( r / left ) ) === give
yeah straight === ( e /  event :direction ( straight ) ) === yeah straight === ( e / event :direction ( straight ) ) === yeah straight === ( e / event :direction ( straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === press the blue button === ( p / press :arg0 ( y / you ) :arg1 ( q / button :mod blue ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === move left === ( t / move :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
event right === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event right === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === move right === ( t / move :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === move forward === ( t / move :arg0 ( y / you ) :direction ( a / forward ) :mode imperative ) === give
event the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) ) :mode imperative ) === event the property === ( p / event :arg0 ( y / person ) :arg1 ( q / property ( t / obj ) ) :mode imperative ) === press the green === ( p / press :arg0 ( y / you ) :arg1 ( q / green ( t / entity ) ) :mode imperative ) === give
event mod mod the mod person came in === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod :mod mod ) :mode imperative :path ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) ) === event modifier spatial the obj person came in === ( t / event :arg0 ( y / person ) :direction ( a / spatial :mod modifier ) :mode imperative :path ( w / obj :arg1-of ( c / event :arg0 ( y / person ) ) ) ) === go back out the way you came in === ( t / go :arg0 ( y / you ) :direction ( a / out :mod back ) :mode imperative :path ( w / way :arg1-of ( c / come :arg0 ( y / you ) ) ) ) === give
temporal event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === temporal event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === now go left === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
temporal event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) ) :mode imperative ) === temporal event property === ( p / event :time ( m / temporal ) :arg0 ( y / person ) :arg1 ( q / property ( t / obj ) ) :mode imperative ) === now press green === ( p / press :time ( m / now ) :arg0 ( y / you ) :arg1 ( q / green ( t / entity ) ) :mode imperative ) === give
event the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) ) :mode imperative ) === event the property === ( p / event :arg0 ( y / person ) :arg1 ( q / property ( t / obj ) ) :mode imperative ) === press the red === ( p / press :arg0 ( y / you ) :arg1 ( q / red ( t / entity ) ) :mode imperative ) === give
temporal event the mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) ) :mode imperative ) === temporal event the property === ( p / event :time ( m / temporal ) :arg0 ( y / person ) :arg1 ( q / property ( t / obj ) ) :mode imperative ) === now press the yellow === ( p / press :time ( m / now ) :arg0 ( y / you ) :arg1 ( q / yellow ( t / entity ) ) :mode imperative ) === give
temporal the mod === ( m /  mod :time ( VAR / temporal ) :domain ( m /  mod ) ) === temporal the property === ( q / property :time ( m / temporal ) :domain ( t / obj ) ) === then the red === ( q / red :time ( m / then ) :domain ( t / entity ) ) === give
event the mod mod mod to the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :mod mod :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === event the modifier property, property to the property === ( p / event :arg0 ( y / person ) :arg1 ( q / property ( t / obj ) :mod modifier :location ( l / property :op1 ( s / to :direction ( b / property ) ) ) ) :mode imperative ) === press the first blue, next to the yellow === ( p / press :arg0 ( y / you ) :arg1 ( q / blue ( t / entity ) :mod first :location ( l / yellow :op1 ( s / to :direction ( b / next ) ) ) ) :mode imperative ) === give
temporal event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === temporal event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === now move forward === ( t / move :time ( m / now ) :arg0 ( y / you ) :direction ( a / forward ) :mode imperative ) === give
and event through === ( e /  event :arg0 ( VAR / person ) :path ( VAR / through ) :mode imperative ) === and event through === ( t / event :arg0 ( y / person ) :path ( a / through ) :mode imperative ) === and go through === ( t / go :arg0 ( y / you ) :path ( a / through ) :mode imperative ) === give
event the mod mod to the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === event the property property to the property === ( p / event :arg0 ( y / person ) :arg1 ( q / property ( t / obj ) :location ( l / property :op1 ( s / to :direction ( b / property ) ) ) ) :mode imperative ) === press the red next to the blue === ( p / press :arg0 ( y / you ) :arg1 ( q / red ( t / entity ) :location ( l / blue :op1 ( s / to :direction ( b / next ) ) ) ) :mode imperative ) === give
temporal event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === temporal event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === now go forward === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / forward ) :mode imperative ) === give
and to the mod === ( e /  event :direction ( m /  mod ) ) === and to the spatial === ( e / event :direction ( r / spatial ) ) === and to the left === ( e / event :direction ( r / left ) ) === give
event through === ( e /  event :arg0 ( VAR / person ) :path ( VAR / through ) :mode imperative ) === event through === ( t / event :arg0 ( y / person ) :path ( a / through ) :mode imperative ) === go through === ( t / go :arg0 ( y / you ) :path ( a / through ) :mode imperative ) === give
event the mod mod to the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === event the property property to the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / property ( t / obj ) :location ( l / obj :op1 ( s / to :direction ( b / property ) ) ) ) :mode imperative ) === press the green next to the couch === ( p / press :arg0 ( y / you ) :arg1 ( q / green ( t / entity ) :location ( l / couch :op1 ( s / to :direction ( b / next ) ) ) ) :mode imperative ) === give
temporal event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === temporal event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === now go back === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / back ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
temporal event round === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === temporal event round === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === now turn round === ( t / turn :time ( m / now ) :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) ) :mode imperative ) === event the property === ( p / event :arg0 ( y / person ) :arg1 ( q / property ( t / obj ) ) :mode imperative ) === press the yellow === ( p / press :arg0 ( y / you ) :arg1 ( q / yellow ( t / entity ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go forward === ( t / go :arg0 ( y / you ) :direction ( a / forward ) :mode imperative ) === give
and through the mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( ( / through ) ) :mode imperative ) === and through the spatial === ( t / event :arg0 ( y / person ) :path ( a / spatial :op1 ( t1 / through ) ) :mode imperative ) === and through the right === ( t / event :arg0 ( y / you ) :path ( a / right :op1 ( t1 / through ) ) :mode imperative ) === give
event mod and === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial and === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go down and === ( t / go :arg0 ( y / you ) :direction ( a / down ) :mode imperative ) === give
the mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod :mod mod ) :mode imperative ) === the modifier obj === ( t / event :arg0 ( y / person ) :direction ( a / obj :mod modifier ) :mode imperative ) === the other way === ( t / event :arg0 ( y / you ) :direction ( a / way :mod other ) :mode imperative ) === give
event temporal === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :mode imperative ) === event temporal === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :mode imperative ) === go now === ( t / go :time ( m / now ) :arg0 ( y / you ) :mode imperative ) === give
event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go back === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / back ) :mode imperative ) === give
temporal event a bit mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mod mod :mode imperative ) === temporal event a bit spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mod modifier :mode imperative ) === now turn a bit right === ( t / turn :time ( m / now ) :arg0 ( y / you ) :direction ( a / right ) :mod a-bit :mode imperative ) === give
on your mod === ( m /  mod :poss you ) === on your spatial === ( l / spatial :poss you ) === on your left === ( l / left :poss you ) === give
the other one === ( m /  mod :domain ( m /  mod ) ) === the other one === ( q / obj :domain ( t / obj ) ) === the other one === ( q / other-one :domain ( t / entity ) ) === give
to the mod === ( e /  event :direction ( m /  mod ) ) === to the spatial === ( e / event :direction ( r / spatial ) ) === to the right === ( e / event :direction ( r / right ) ) === give
keep going mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === keep going spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === keep going straight === ( t / keep-going :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
person event to event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) ) ) === person event to event the modifier obj === ( w / event :arg0 ( y / person ) :arg1 ( g / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) ) ) === you need to press the right one === ( w / need :arg0 ( y / you ) :arg1 ( g / press :arg0 ( y / you ) :arg1 ( q / one :mod right ) ) ) === give
( mod on the mod that is ) === ( m /  mod :domain ( m /  mod ) :location ( m /  mod :op1 ( VAR / on ) ) ) === ( obj on the spatial that is ) === ( q / obj :domain ( t / obj ) :location ( l / spatial :op1 ( o / on ) ) ) === ( one on the right that is ) === ( q / one :domain ( t / entity ) :location ( l / right :op1 ( o / on ) ) ) === give
temporal, event mod 180 mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :extent ( m /  mod :quant 180 ) :mode imperative ) === temporal, event spatial 180 obj === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :extent ( d / obj :quant 180 ) :mode imperative ) === now, turn around 180 degrees === ( t / turn :time ( m / now ) :arg0 ( y / you ) :direction ( a / around ) :extent ( d / degrees :quant 180 ) :mode imperative ) === give
and temporal left at the mod === ( e /  event :time ( VAR / temporal ) :direction ( m /  mod ) :location ( m /  mod :op1 ( VAR / at ) ) ) === and temporal left at the obj === ( e / event :time ( m / temporal ) :direction ( r / spatial ) :location ( in / obj :op1 ( a / at ) ) ) === and then left at the intersection === ( e / event :time ( m / then ) :direction ( r / right ) :location ( in / intersection :op1 ( a / at ) ) ) === give
person event the mod mod of the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :location ( m /  mod :op1 ( VAR / of :direction ( ( / mod ) ) ) ) ) === person event the obj spatial of the obj === ( t / event :arg0 ( y / person ) :arg1 ( s / obj :location ( l / spatial :op1 ( s / of :direction ( b / obj ) ) ) ) ) === you need the set left of the chair === ( t / need :arg0 ( y / you ) :arg1 ( s / set :location ( l / left :op1 ( s / of :direction ( b / chair ) ) ) ) ) === give
and the mod immediately to the chairs mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) ) === and the obj immediately to the chairs spatial === ( t / event :arg0 ( y / person ) :arg1 ( s / obj :location ( l / spatial :op1 ( s / to :direction ( b / spatial ) ) ) ) ) === and the button immediately to the chairs left === ( t / need :arg0 ( y / you ) :arg1 ( s / button :location ( l / left :op1 ( s / to :direction ( b / left ) ) ) ) ) === give
okay, event to the mod mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :mod mod ) :mode imperative ) === okay, event to the modifier obj === ( t / event :arg0 ( y / person ) :destination ( a / obj :mod modifier ) :mode imperative ) === okay, return to the initial room === ( t / return :arg0 ( y / you ) :destination ( a / room :mod initial ) :mode imperative ) === give
person event to event the mod mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :mod mod ) ) ) === person event to event the modifier modifier obj === ( w / event :arg0 ( y / person ) :arg1 ( g / event :arg0 ( y / person ) :arg1 ( g / obj :mod modifier :mod modifier ) ) ) === you need to press the left green button === ( w / need :arg0 ( y / you ) :arg1 ( g / press :arg0 ( y / you ) :arg1 ( g / button :mod left :mod green ) ) ) === give
okay, event to the mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod ) :mode imperative ) === okay, event to the obj === ( t / event :arg0 ( y / person ) :destination ( a / obj ) :mode imperative ) === okay, get to the intersection === ( t / get :arg0 ( y / you ) :destination ( a / intersection ) :mode imperative ) === give
event to the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event to the spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn to the right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event the mod on the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :location ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) === event the obj on the spatial === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ( t / obj ) :location ( l / spatial :op1 ( o / on ) ) ) :mode imperative ) === choose the one on the right === ( p / choose :arg0 ( y / you ) :arg1 ( q / one ( t / entity ) :location ( l / right :op1 ( o / on ) ) ) :mode imperative ) === give
event the mod on the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :location ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) === event the obj on the spatial === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ( t / obj ) :location ( l / spatial :op1 ( o / on ) ) ) :mode imperative ) === press the one on the right === ( p / press :arg0 ( y / you ) :arg1 ( q / one ( t / entity ) :location ( l / right :op1 ( o / on ) ) ) :mode imperative ) === give
temporal, mod through the mod mod mod === ( m /  mod :time ( VAR / temporal ) :arg0 ( VAR / person ) :path ( m /  mod :location ( m /  mod :mod mod ) ) :mode imperative ) === temporal, obj through the obj modifier spatial === ( t / obj :time ( m / temporal ) :arg0 ( y / person ) :path ( a / obj :location ( s / spatial :mod modifier ) ) :mode imperative ) === now, exit through the entrance straight ahead === ( t / exit :time ( m / now ) :arg0 ( y / you ) :path ( a / entrance :location ( s / ahead :mod straight ) ) :mode imperative ) === give
and event through the mod to the mod mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :destination ( m /  mod :mod mod ) :mode imperative ) === and event through the obj to the modifier obj === ( t / event :arg0 ( y / person ) :path ( th / obj :op1 ( th1 / through ) ) :destination ( a / obj :mod modifier ) :mode imperative ) === and pass through the room to the next one === ( t / pass :arg0 ( y / you ) :path ( th / room :op1 ( th1 / through ) ) :destination ( a / one :mod next ) :mode imperative ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === press the red button === ( p / press :arg0 ( y / you ) :arg1 ( q / button :mod red ) :mode imperative ) === give
temporal, event mod to the mod room === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :mod mod ) :mode imperative ) === temporal, event spatial to the modifier room === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( b / spatial ) :destination ( a / obj :mod modifier ) :mode imperative ) === now, go back to the previous room === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( b / back ) :destination ( a / one :mod previous ) :mode imperative ) === give
event mod and event the mod mod please === ( VAR / and :op1 ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) :op2 ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) ) === event spatial and event the modifier obj, please === ( s / and :op1 ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) :op2 ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) ) === turn left and press the green button, please === ( s / and :op1 ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) :op2 ( p / press :arg0 ( y / you ) :arg1 ( q / button :mod green ) :mode imperative ) ) === give
okay, if person can remember how to get to the 4 way mod event there === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :mod mod ) :mode imperative ) === okay, if person can remember how to get to the 4 way obj, event there === ( t / event :arg0 ( y / person ) :direction ( th / spatial ) :destination ( a / obj :mod modifier ) :mode imperative ) === okay, if you can remember how to get to the 4 way intersection, go there === ( t / go :arg0 ( y / you ) :direction ( th / back ) :destination ( a / intersection :mod 4-way ) :mode imperative ) === give
mod temporal left at that mod === ( VAR / list :op1 ( ( / event :direction ( ( / mod ) ) :op2 ( e /  event :time ( VAR / temporal ) :direction ( ( / mod ) :location ( ( / mod :op1 ( VAR / at ) ) ) ) === spatial, temporal left at that obj === ( s / list :op1 ( e1 / event :direction ( r1 / spatial ) ) :op2 ( e2 / event :time ( m / temporal ) :direction ( r2 / spatial ) :location ( r2 / obj :op1 ( a / at ) ) ) ) === straight, then left at that room === ( s / list :op1 ( e1 / event :direction ( r1 / straight ) ) :op2 ( e2 / event :time ( m / then ) :direction ( r2 / right ) :location ( r2 / room :op1 ( a / at ) ) ) ) === give
to the mod === ( e /  event :direction ( m /  mod ) ) === to the spatial === ( e / event :direction ( r / spatial ) ) === to the right === ( e / event :direction ( r / right ) ) === give
event the mod as temporal === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :prep-as ( VAR / temporal ) ) :mode imperative ) === event the property as temporal === ( p / event :arg0 ( y / person ) :arg1 ( q / property :prep-as ( be / temporal ) ) :mode imperative ) === press the same as before === ( p / press :arg0 ( y / you ) :arg1 ( q / same :prep-as ( be / before ) ) :mode imperative ) === give
( mod mod to the mod ) === ( m /  mod :domain ( m /  mod ) :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) === ( property property to the obj ) === ( r / property :domain ( n / obj ) :location ( l / obj :op1 ( s / to :direction ( b / property ) ) ) ) === ( red next to the chair ) === ( r / red :domain ( n / entity ) :location ( l / chair :op1 ( s / to :direction ( b / next ) ) ) ) === give
okay, mod to the mod room === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :mod mod ) :mode imperative ) === okay, spatial to the modifier room === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( a / obj :mod modifier ) :mode imperative ) === okay, back to the previous room === ( t / event :arg0 ( y / you ) :direction ( b / back ) :destination ( a / one :mod previous ) :mode imperative ) === give
okay mod === ( e /  event :direction ( m /  mod ) ) === okay spatial === ( e / event :direction ( r / spatial ) ) === okay left === ( e / event :direction ( r / left ) ) === give
event to the mod mod and event === ( VAR / and :op1 ( ( / event :arg0 ( VAR / person ) :destination ( m /  mod :mod mod ) :mode imperative ) :op2 ( ( / event :mode imperative ) ) === event to the modifier obj and event === ( s / and :op1 ( t1 / event :arg0 ( y / person ) :destination ( a / obj :mod modifier ) :mode imperative ) :op2 ( t2 / event :mode imperative ) ) === continue to the next room and stop === ( s / and :op1 ( t1 / continue :arg0 ( y / you ) :destination ( a / room :mod next ) :mode imperative ) :op2 ( t2 / stop :mode imperative ) ) === give
mod please === ( m /  mod :domain ( m /  mod ) ) === property, please === ( q / property :domain ( t / obj ) ) === green, please === ( q / green :domain ( t / entity ) ) === give
event through to the mod room === ( e /  event :arg0 ( VAR / person ) :path ( ( / through ) :destination ( m /  mod :mod mod ) :mode imperative ) === event through to the modifier room === ( t / event :arg0 ( y / person ) :path ( b / through ) :destination ( a / obj :mod modifier ) :mode imperative ) === go through to the next room === ( t / go :arg0 ( y / you ) :path ( b / through ) :destination ( a / one :mod next ) :mode imperative ) === give
to the mod === ( e /  event :direction ( m /  mod ) ) === to the spatial === ( e / event :direction ( r / spatial ) ) === to the left === ( e / event :direction ( r / left ) ) === give
and event mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) === and event spatial === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :mode imperative ) === and bear right === ( t / bear :arg0 ( y / you ) :direction ( b / right ) :mode imperative ) === give
event the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event the property === ( p / event :arg0 ( y / person ) :arg1 ( q / property ) :mode imperative ) === press the blue === ( p / press :arg0 ( y / you ) :arg1 ( q / blue ) :mode imperative ) === give
event mod and event personr mod === ( VAR / and :op1 ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) :op2 ( e /  event :arg1 ( VAR / person ) :arg1 ( m /  mod :poss person ) ) ) === event spatial and event personr obj === ( s / and :op1 ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :mode imperative ) :op2 ( c / event :arg1 ( y / person ) :arg1 ( p / obj :poss person ) ) ) === turn right and claim your prize === ( s / and :op1 ( t / turn :arg0 ( y / you ) :direction ( b / right ) :mode imperative ) :op2 ( c / claim :arg1 ( y / you ) :arg1 ( p / prize :poss you ) ) ) === give
okay, event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === okay, event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === okay, go forward === ( t / go :arg0 ( y / you ) :direction ( a / forward ) :mode imperative ) === give
and to the mod mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / ( ) :mod mod ) :mode imperative ) === and to the modifier obj === ( t / event :arg0 ( y / person ) :destination ( a / obj :op1 ( t / to ) :mod modifier ) :mode imperative ) === and to the next room === ( t / event :arg0 ( y / you ) :destination ( a / room :op1 ( t / to ) :mod next ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event through the mod to the mod mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :destination ( m /  mod :op1 ( ( / ( ) :mod mod ) :mode imperative ) === event through the obj to the modifier obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :destination ( p / obj :op1 ( t1 / to ) :mod modifier ) :mode imperative ) === pass through the room to the pink one === ( t / pass :arg0 ( y / you ) :path ( a / room :op1 ( th / through ) ) :destination ( p / one :op1 ( t1 / to ) :mod pink ) :mode imperative ) === give
mod mod === ( e /  event :direction ( m /  mod :mod mod ) ) === modifier spatial === ( e / event :direction ( r / spatial :mod modifier ) ) === straight ahead === ( e / event :direction ( r / ahead :mod straight ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) ) :mode imperative ) === event property === ( p / event :arg0 ( y / person ) :arg1 ( q / property ( t / obj ) ) :mode imperative ) === press blue === ( p / press :arg0 ( y / you ) :arg1 ( q / blue ( t / entity ) ) :mode imperative ) === give
event the mod mod in mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / VAR ) :mod mod ) ) :mode imperative ) === event the modifier obj in modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :op1 ( i / in ) :mod modifier ) ) :mode imperative ) === press the yellow button in this room === ( p / press :arg0 ( y / you ) :arg1 ( q / button :mod yellow :location ( l / room :op1 ( i / in ) :mod this ) ) :mode imperative ) === give
event the mod mod over the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / over ) :mod mod ) ) :mode imperative ) === event the modifier obj over the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :op1 ( i / over ) :mod modifier ) ) :mode imperative ) === press the blue one over the deactivated trap === ( p / press :arg0 ( y / you ) :arg1 ( q / one :mod blue :location ( l / trap :op1 ( i / over ) :mod deactivated ) ) :mode imperative ) === give
mod to the mod === ( e /  event :direction ( m /  mod ) :destination ( m /  mod :op1 ( ( / ( ) ) ) === spatial to the obj === ( e / event :direction ( r / spatial ) :destination ( en / obj :op1 ( t1 / to ) ) ) === straight to the end === ( e / event :direction ( r / straight ) :destination ( en / end :op1 ( t1 / to ) ) ) === give
event to the mod mod and event to the mod on personr mod === ( VAR / and :op1 ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / ( ) :mod mod ) :mode imperative ) :op2 ( ( / event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / on :direction ( ( / mod ) ) ) ) ) === event to the modifier obj and event to the obj on personr spatial === ( s / and :op1 ( t / event :arg0 ( y / person ) :destination ( a / obj :op1 ( th / to ) :mod modifier ) :mode imperative ) :op2 ( t1 / event :arg0 ( y / person ) :destination ( l / obj :op1 ( s / on :direction ( b / spatial ) ) ) ) ) === pass to the next room and turn to the room on your right === ( s / and :op1 ( t / pass :arg0 ( y / you ) :destination ( a / room :op1 ( th / to ) :mod next ) :mode imperative ) :op2 ( t1 / turn :arg0 ( y / you ) :destination ( l / room :op1 ( s / on :direction ( b / right ) ) ) ) ) === give
okay, temporal event the mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === okay, temporal event the obj === ( p / event :time ( m / temporal ) :arg0 ( y / person ) :arg1 ( q / obj ) :mode imperative ) === okay, now press the button === ( p / press :time ( m / now ) :arg0 ( y / you ) :arg1 ( q / button ) :mode imperative ) === give
event the mod in the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :location ( m /  mod :op1 ( VAR / VAR ) ) ) :mode imperative ) === event the obj in the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :location ( c / obj :op1 ( i / in ) ) ) :mode imperative ) === press the button in the corner === ( p / press :arg0 ( y / you ) :arg1 ( q / button :location ( c / corner :op1 ( i / in ) ) ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === look left === ( t / look :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
event the mod mod on the mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) === event the modifier obj on the spatial === ( p / event :time ( m / temporal ) :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( c / spatial :op1 ( i / on ) ) ) :mode imperative ) === press the green button on the right === ( p / press :time ( m / now ) :arg0 ( y / you ) :arg1 ( q / button :mod green :location ( c / right :op1 ( i / on ) ) ) :mode imperative ) === give
now, event mod to the mod mod e.g. === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( ( / ( ) :mod mod ) :mode imperative ) === now, event spatial to the modifier obj... e.g. === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( p / obj :op1 ( t1 / to ) :mod modifier ) :mode imperative ) === now, go back to the far rooms... e.g. === ( t / go :arg0 ( y / you ) :direction ( a / back ) :destination ( p / rooms :op1 ( t1 / to ) :mod far ) :mode imperative ) === give
to the mod === ( e /  event :direction ( m /  mod ) ) === to the spatial === ( e / event :direction ( r / spatial ) ) === to the right === ( e / event :direction ( r / right ) ) === give
yes, to the mod === ( e /  event :direction ( m /  mod ) ) === yes, to the spatial === ( e / event :direction ( r / spatial ) ) === yes, to the right === ( e / event :direction ( r / right ) ) === give
then mod === ( e /  event :direction ( m /  mod ) ) === then spatial === ( e / event :direction ( r / spatial ) ) === then left === ( e / event :direction ( r / left ) ) === give
into the mod === ( e /  event :destination ( m /  mod :op1 ( VAR / into ) ) ) === into the obj === ( e / event :destination ( r / obj :op1 ( i / into ) ) ) === into the room === ( e / event :destination ( r / room :op1 ( i / into ) ) ) === give
event to personr mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event to personr spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn to your right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event the mod on personr mod event mod through mod === ( VAR / list :op1 ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :location ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) :op2 ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) ) === event the obj on personr spatial event spatial through obj === ( s / list :op1 ( p / event :arg0 ( y / person ) :arg1 ( q / obj ( t / obj ) :location ( c / spatial :op1 ( i / on ) ) ) :mode imperative ) :op2 ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :path ( p / obj :op1 ( th / through ) ) :mode imperative ) ) === see the opening on your right go straight through it === ( s / list :op1 ( p / see :arg0 ( y / you ) :arg1 ( q / opening ( t / entity ) :location ( c / right :op1 ( i / on ) ) ) :mode imperative ) :op2 ( t / go :arg0 ( y / you ) :direction ( a / straight ) :path ( p / it :op1 ( th / through ) ) :mode imperative ) ) === give
ok event through the mod person are facing === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) :mode imperative ) === ok event through the obj person are facing === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) :arg1-of ( f / event :arg0 ( y / person ) ) ) :mode imperative ) === ok go through the one you are facing === ( t / go :arg0 ( y / you ) :path ( a / one :op1 ( th / through ) :arg1-of ( f / face :arg0 ( y / you ) ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === press the yellow button === ( p / press :arg0 ( y / you ) :arg1 ( q / button :mod yellow ) :mode imperative ) === give
event through to the mod === ( e /  event :arg0 ( VAR / person ) :path ( VAR / through ) :direction ( m /  mod ) :mode imperative ) === event through to the spatial === ( t / event :arg0 ( y / person ) :path ( th / through ) :direction ( a / spatial ) :mode imperative ) === go through to the left === ( t / go :arg0 ( y / you ) :path ( th / through ) :direction ( a / left ) :mode imperative ) === give
event the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ) :mode imperative ) === press the button === ( p / press :arg0 ( y / you ) :arg1 ( q / button ) :mode imperative ) === give
event mod to personr mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod ) :direction ( m /  mod ) :mode imperative ) === event spatial to personr spatial === ( t / event :arg0 ( y / person ) :destination ( th / spatial ) :direction ( a / spatial ) :mode imperative ) === go out to your right === ( t / go :arg0 ( y / you ) :destination ( th / out ) :direction ( a / right ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
event through the mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === event through the obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :mode imperative ) === go through the opening === ( t / go :arg0 ( y / you ) :path ( a / opening :op1 ( th / through ) ) :mode imperative ) === give
event the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ) :mode imperative ) === press the button === ( p / press :arg0 ( y / you ) :arg1 ( q / button ) :mode imperative ) === give
event through the mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === event through the obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :mode imperative ) === go through the opening === ( t / go :arg0 ( y / you ) :path ( a / opening :op1 ( th / through ) ) :mode imperative ) === give
now the two mod mod event the left hand mod === ( VAR / list :op1 ( m /  mod :quant 2 :mod mod ) :op2 ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :mod mod ) :mode imperative ) ) === now the two objs modifier event the left hand obj === ( s / list :op1 ( q / obj :quant 2 :mod modifier ) :op2 ( p / event :arg0 ( y / person ) :arg1 ( q / obj ( t / obj ) :mod modifier ) :mode imperative ) ) === now the two buttons together press the left hand one === ( s / list :op1 ( q / button :quant 2 :mod together ) :op2 ( p / press :arg0 ( y / you ) :arg1 ( q / one ( t / entity ) :mod left-hand ) :mode imperative ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go out === ( t / go :arg0 ( y / you ) :direction ( a / out ) :mode imperative ) === give
event mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod :mod mod ) :mode imperative ) === event spatial modifier === ( t / event :arg0 ( y / person ) :direction ( a / spatial :mod modifier ) :mode imperative ) === go out right === ( t / go :arg0 ( y / you ) :direction ( a / out :mod right ) :mode imperative ) === give
event mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod :mod mod ) :mode imperative ) === event spatial modifier === ( t / event :arg0 ( y / person ) :direction ( a / spatial :mod modifier ) :mode imperative ) === go out right === ( t / go :arg0 ( y / you ) :direction ( a / out :mod right ) :mode imperative ) === give
ok, about face and mod mod through mod mod === ( m /  mod :arg0 ( VAR / person ) :direction ( m /  mod ) :path ( m /  mod :op1 ( VAR / through ) :mod mod ) :mode imperative ) === ok, about face and obj spatial through modifier obj === ( t / obj :arg0 ( y / person ) :direction ( s / spatial ) :path ( a / obj :op1 ( th / through ) :mod modifier ) :mode imperative ) === ok, about face and exit straight through that opening === ( t / exit :arg0 ( y / you ) :direction ( s / straight ) :path ( a / opening :op1 ( th / through ) :mod that ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
2 mod mod on the mod event the mod mod to person === ( VAR / list :op1 ( m /  mod :quant 2 :mod mod :location ( m /  mod :op1 ( VAR / on ) ) ) :op2 ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :location ( VAR / person :mod mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) ) === 2 modifier objs on the obj, event the obj property to person === ( s / list :op1 ( q / obj :quant 2 :mod modifier :location ( w / obj :op1 ( o / on ) ) ) :op2 ( p / event :arg0 ( y / person ) :arg1 ( q / obj ( t / obj ) :location ( l / person :mod modifier :op1 ( s / to :direction ( b / property ) ) ) ) :mode imperative ) ) === 2 blue buttons on the wall, push the one closest to you === ( s / list :op1 ( q / button :quant 2 :mod blue :location ( w / wall :op1 ( o / on ) ) ) :op2 ( p / push :arg0 ( y / you ) :arg1 ( q / one ( t / entity ) :location ( l / you :mod red :op1 ( s / to :direction ( b / closest ) ) ) ) :mode imperative ) ) === give
keep going mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === keep going spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === keep going straight === ( t / keep-going :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === push the blue button === ( p / push :arg0 ( y / you ) :arg1 ( q / button :mod blue ) :mode imperative ) === give
ok, event mod the mod person came === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative :path ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) ) === ok, event spatial the obj person came === ( e / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative :path ( w / obj :arg1-of ( c / event :arg0 ( y / person ) ) ) ) === ok, go back the way you came === ( e / go :arg0 ( y / you ) :direction ( a / back ) :mode imperative :path ( w / way :arg1-of ( c / come :arg0 ( y / you ) ) ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
go mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === go spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
go mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === go spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
on the mod to your mod === ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) === on the obj to your spatial === ( l / obj :op1 ( s / to :direction ( b / spatial ) ) ) === on the wall to your left === ( l / wall :op1 ( s / to :direction ( b / left ) ) ) === give
there are 2 mod mod event the mod mod to the mod === ( VAR / list :op1 ( m /  mod :polarity + :quant 2 :mod mod ) :op2 ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :location ( m /  mod :mod mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) ) === there are 2 modifier objs, event the obj property to the obj === ( s / list :op1 ( q / obj :polarity + :quant 2 :mod modifier ) :op2 ( p / event :arg0 ( y / person ) :arg1 ( q / obj ( t / obj ) :location ( l / obj :mod modifier :op1 ( s / to :direction ( b / property ) ) ) ) :mode imperative ) ) === there are 2 red buttons, push the one closest to the chair === ( s / list :op1 ( q / button :polarity + :quant 2 :mod red ) :op2 ( p / push :arg0 ( y / you ) :arg1 ( q / one ( t / entity ) :location ( l / chair :mod red :op1 ( s / to :direction ( b / closest ) ) ) ) :mode imperative ) ) === give
go mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === go spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
and event the mod button on personr mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :mod mod :location ( m /  mod :mod mod :op1 ( VAR / on ) ) ) :mode imperative ) === and event the modifier button on personr spatial === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ( t / obj ) :mod modifier :location ( l / spatial :mod modifier :op1 ( s / on ) ) ) :mode imperative ) === and push the green button on your left === ( p / push :arg0 ( y / you ) :arg1 ( q / one ( t / entity ) :mod green :location ( l / left :mod red :op1 ( s / on ) ) ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
event through the mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === event through the obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :mode imperative ) === go through the opening === ( t / go :arg0 ( y / you ) :path ( a / opening :op1 ( th / through ) ) :mode imperative ) === give
and mod === ( e /  event :direction ( m /  mod ) ) === and spatial === ( e / event :direction ( r / spatial ) ) === and straight === ( e / event :direction ( r / straight ) ) === give
event the mod button === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :mod mod ) :mode imperative ) === event the modifier button === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ( t / obj ) :mod modifier ) :mode imperative ) === push the red button === ( p / push :arg0 ( y / you ) :arg1 ( q / one ( t / entity ) :mod red ) :mode imperative ) === give
temporal, event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === temporal, event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === now, turn around === ( t / turn :time ( m / now ) :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
mod === ( m /  mod :arg0 ( VAR / person ) :mode imperative ) === obj === ( t / obj :arg0 ( y / person ) :mode imperative ) === exit === ( t / exit :arg0 ( y / you ) :mode imperative ) === give
and event the mod button === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :mod mod ) :mode imperative ) === and event the modifier button === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ( t / obj ) :mod modifier ) :mode imperative ) === and push the green button === ( p / push :arg0 ( y / you ) :arg1 ( q / one ( t / entity ) :mod green ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
sorry, event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === sorry, event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === sorry, turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
go mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === go spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / turn :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
and go to personr mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === and go to personr spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === and go to your left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
to the mod === ( e /  event :direction ( m /  mod ) ) === to the spatial === ( e / event :direction ( r / spatial ) ) === to the right === ( e / event :direction ( r / right ) ) === give
mod mod mod to the mod === ( m /  mod :mod mod :location ( m /  mod :mod mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) === modifier obj property to the obj === ( q / obj :mod modifier :location ( l / obj :mod modifier :op1 ( s / to :direction ( b / property ) ) ) ) === red button closest to the chair === ( q / button :mod red :location ( l / chair :mod red :op1 ( s / to :direction ( b / closest ) ) ) ) === give
ok, mod === ( m /  mod :arg0 ( VAR / person ) :mode imperative ) === ok, obj === ( t / obj :arg0 ( y / person ) :mode imperative ) === ok, exit === ( t / exit :arg0 ( y / you ) :mode imperative ) === give
and go to personr mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === and go to personr spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === and go to your left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod button, event it person want === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === modifier button, event it person want === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === green button, push it you want === ( p / push :arg0 ( y / you ) :arg1 ( q / one :mod green ) :mode imperative ) === give
mod === ( m /  mod :arg0 ( VAR / person ) :mode imperative ) === obj === ( t / obj :arg0 ( y / person ) :mode imperative ) === exit === ( t / exit :arg0 ( y / you ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
to the mod === ( e /  event :direction ( m /  mod ) ) === to the spatial === ( e / event :direction ( r / spatial ) ) === to the right === ( e / event :direction ( r / right ) ) === give
ok, event the mod button on the mod mod person === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :mod mod :location ( m /  mod :op1 ( VAR / on :direction ( ( / mod ) ) ) ) :mode imperative ) === ok, event the modifier button on the obj spatial person === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ( t / obj ) :mod modifier :location ( l / obj :op1 ( s / on :direction ( b / spatial ) ) ) ) :mode imperative ) === ok, hit the blue button on the wall behind you === ( p / hit :arg0 ( y / you ) :arg1 ( q / one ( t / entity ) :mod blue :location ( l / wall :op1 ( s / on :direction ( b / behind ) ) ) ) :mode imperative ) === give
to your mod === ( e /  event :direction ( m /  mod ) ) === to your spatial === ( e / event :direction ( r / spatial ) ) === to your right === ( e / event :direction ( r / right ) ) === give
ok, event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === ok, event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === ok, turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
and event out through the mod to personr mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) :location ( m /  mod :op1 ( ( / ( ) ) ) :mode imperative ) === and event out through the obj to personr spatial === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) :location ( l / spatial :op1 ( t1 / to ) ) ) :mode imperative ) === and go out through the opening to your right === ( t / go :arg0 ( y / you ) :path ( a / opening :op1 ( th / through ) :location ( l / right :op1 ( t1 / to ) ) ) :mode imperative ) === give
event a mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === event a spatial === ( t / event :arg0 ( y / person ) :arg1 ( l / spatial ) ) === hang a right === ( t / hang :arg0 ( y / you ) :arg1 ( l / right ) ) === give
mod mod === ( m /  mod :domain ( m /  mod ) :mod mod ) === modifier obj === ( q / obj :domain ( t / obj ) :mod modifier ) === green button === ( q / button :domain ( t / entity ) :mod green ) === give
good, event mod and mod the mod person came in === ( VAR / and :op1 ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) :op2 ( m /  mod :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative :path ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) ) ) === good, event spatial and obj the obj person came in === ( s / and :op1 ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) :op2 ( e / obj :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative :path ( w / obj :arg1-of ( c / event :arg0 ( y / person ) ) ) ) ) === good, turn around and exit the way you came in === ( s / and :op1 ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) :op2 ( e / exit :arg0 ( y / you ) :direction ( a / back ) :mode imperative :path ( w / way :arg1-of ( c / come :arg0 ( y / you ) ) ) ) ) === give
event to personr mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event to personr spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn to your left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
mod to the mod === ( m /  mod :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === obj to the spatial === ( t / obj :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === exit to the right === ( t / exit :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
I mean mod === ( e /  event :direction ( m /  mod ) ) === I mean spatial === ( e / event :direction ( r / spatial ) ) === I mean left === ( e / event :direction ( r / left ) ) === give
event the mod button === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :mod mod ) :mode imperative ) === event the modifier button === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ( t / obj ) :mod modifier ) :mode imperative ) === click the green button === ( p / click :arg0 ( y / you ) :arg1 ( q / one ( t / entity ) :mod green ) :mode imperative ) === give
temporal, event mod through the mod to personr mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :destination ( m /  mod ) :path ( m /  mod :op1 ( VAR / through ) :location ( m /  mod :op1 ( ( / ( ) ) ) :mode imperative ) === temporal, event spatial through the obj to personr spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :destination ( o1 / spatial ) :path ( a / obj :op1 ( th / through ) :location ( l / spatial :op1 ( t1 / to ) ) ) :mode imperative ) === now, go out through the opening to your right === ( t / go :time ( m / now ) :arg0 ( y / you ) :destination ( o1 / out ) :path ( a / opening :op1 ( th / through ) :location ( l / right :op1 ( t1 / to ) ) ) :mode imperative ) === give
event the mod mod on the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) === event the modifier obj on the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( w / obj :op1 ( o1 / on ) ) ) :mode imperative ) === click the yellow button on the wall === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod yellow :location ( w / wall :op1 ( o1 / on ) ) ) :mode imperative ) === give
temporal event the mod button directly mod person === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :mod mod :location ( VAR / person :op1 ( m /  mod ) ) ) :mode imperative ) === temporal event the modifier button directly spatial person === ( p / event :time ( m / temporal ) :arg0 ( y / person ) :arg1 ( q / obj ( t / obj ) :mod modifier :location ( l / person :op1 ( s / spatial ) ) ) :mode imperative ) === now click the red button directly behind you === ( p / click :time ( m / now ) :arg0 ( y / you ) :arg1 ( q / one ( t / entity ) :mod red :location ( l / you :op1 ( s / behind ) ) ) :mode imperative ) === give
temporal event the mod mod directly mod to the mod mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :mod mod :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) :mod mod ) :mode imperative ) === temporal event the modifier obj directly property to the modifier obj === ( p / event :time ( m / temporal ) :arg0 ( y / person ) :arg1 ( q / obj ( t / obj ) :mod modifier :location ( l / obj :op1 ( s / to :direction ( b / property ) ) ) :mod modifier ) :mode imperative ) === now hit the blue one directly next to the yellow one === ( p / hit :time ( m / now ) :arg0 ( y / you ) :arg1 ( q / one ( t / entity ) :mod blue :location ( l / one :op1 ( s / to :direction ( b / next ) ) ) :mod yellow ) :mode imperative ) === give
ok, event the mod mod button, mod to the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :mod mod :mod mod :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === ok, event the modifier modifier button, spatial to the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ( t / obj ) :mod modifier :mod modifier :location ( l / obj :op1 ( s / to :direction ( b / spatial ) ) ) ) :mode imperative ) === ok, hit the other red button, closer to the opening === ( p / hit :arg0 ( y / you ) :arg1 ( q / one ( t / entity ) :mod other :mod red :location ( l / opening :op1 ( s / to :direction ( b / closer ) ) ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
and mod through the newly opened mod === ( m /  mod :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) :mod mod ) :mode imperative ) === and obj through the newly opened obj === ( t / obj :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) :mod modifier ) :mode imperative ) === and exit through the newly opened passage === ( t / exit :arg0 ( y / you ) :path ( a / passage :op1 ( th / through ) :mod newly-opened ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
and mod to personr mod === ( m /  mod :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === and obj to personr spatial === ( t / obj :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === and exit to your left === ( t / exit :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
event the gren button mod the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :mod mod :location ( m /  mod :op1 ( m /  mod ) ) ) :mode imperative ) === event the gren button spatial the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ( t / obj ) :mod modifier :location ( l / obj :op1 ( s / spatial ) ) ) :mode imperative ) === hit the gren button near the couch === ( p / hit :arg0 ( y / you ) :arg1 ( q / one ( t / entity ) :mod green :location ( l / couch :op1 ( s / near ) ) ) :mode imperative ) === give
and event the mod button === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :mod mod ) :mode imperative ) === and event the modifier button === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ( t / obj ) :mod modifier ) :mode imperative ) === and hit the red button === ( p / hit :arg0 ( y / you ) :arg1 ( q / one ( t / entity ) :mod red ) :mode imperative ) === give
mod === ( m /  mod ) === property === ( t / property ) === next === ( t / next ) === give
to the mod one === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :mod mod ) :mode imperative ) === to the modifier one === ( p / event :arg0 ( y / person ) :destination ( q / obj :mod modifier ) :mode imperative ) === to the blue one === ( p / event :arg0 ( y / you ) :destination ( q / button :mod blue ) :mode imperative ) === give
temporal, event mod and event to personr mod === ( VAR / and :op1 ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) :op2 ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) ) ) === temporal, event spatial and event to personr spatial === ( s / and :op1 ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) :op2 ( ls / event :arg0 ( y / person ) :direction ( r / spatial ) ) ) === now, go straight and leave to your left === ( s / and :op1 ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) :op2 ( ls / leave :arg0 ( y / you ) :direction ( r / left ) ) ) === give
event to the mod to personr mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / through ) :location ( m /  mod :op1 ( ( / ( ) ) ) :mode imperative ) === event to the obj to personr spatial === ( t / event :arg0 ( y / person ) :destination ( a / obj :op1 ( th / through ) :location ( l / spatial :op1 ( t1 / to ) ) ) :mode imperative ) === go to the opening to your right === ( t / go :arg0 ( y / you ) :destination ( a / opening :op1 ( th / through ) :location ( l / right :op1 ( t1 / to ) ) ) :mode imperative ) === give
event the mod button === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :mod mod ) :mode imperative ) === event the modifier button === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ( t / obj ) :mod modifier ) :mode imperative ) === hit the yellow button === ( p / hit :arg0 ( y / you ) :arg1 ( q / one ( t / entity ) :mod yellow ) :mode imperative ) === give
now, event mod and mod through the mod that appears on personr mod === ( VAR / and :op1 ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) :op2 ( m /  mod :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / through ) :location ( m /  mod :op1 ( ( / ( ) ) ) :mode imperative ) ) === now, event spatial and obj through the obj that appears on personr spatial === ( s / and :op1 ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) :op2 ( t / obj :arg0 ( y / person ) :destination ( a / obj :op1 ( th / through ) :location ( l / spatial :op1 ( t1 / to ) ) ) :mode imperative ) ) === now, turn around and exit through the opening that appears on your right === ( s / and :op1 ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) :op2 ( t / exit :arg0 ( y / you ) :destination ( a / opening :op1 ( th / through ) :location ( l / right :op1 ( t1 / to ) ) ) :mode imperative ) ) === give
and event to personr mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === and event to personr spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === and go to your left === ( t / go :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
temporal mod === ( e /  event :time ( VAR / temporal ) :direction ( m /  mod ) ) === temporal spatial === ( e / event :time ( m / temporal ) :direction ( r / spatial ) ) === now straight === ( e / event :time ( m / now ) :direction ( r / straight ) ) === give
through the mod === ( e /  event :path ( m /  mod :op1 ( VAR / through ) ) ) === through the obj === ( e / event :path ( r / obj :op1 ( th / through ) ) ) === through the opening === ( e / event :path ( r / opening :op1 ( th / through ) ) ) === give
to the mod === ( e /  event :direction ( m /  mod ) ) === to the spatial === ( e / event :direction ( r / spatial ) ) === to the left === ( e / event :direction ( r / left ) ) === give
event 90 mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :extent ( m /  mod :quant 90 ) :mode imperative ) === event 90 obj spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :extent ( d / obj :quant 90 ) :mode imperative ) === turn 90 degrees left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :extent ( d / degrees :quant 90 ) :mode imperative ) === give
event the mod button === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :mod mod ) :mode imperative ) === event the modifier button === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ( t / obj ) :mod modifier ) :mode imperative ) === click the green button === ( p / click :arg0 ( y / you ) :arg1 ( q / one ( t / entity ) :mod green ) :mode imperative ) === give
event 110 mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :extent ( m /  mod :quant 110 ) :mode imperative ) === event 110 obj spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :extent ( d / obj :quant 110 ) :mode imperative ) === turn 110 degrees left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :extent ( d / degrees :quant 110 ) :mode imperative ) === give
event mod at the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :location ( m /  mod :op1 ( VAR / at ) ) :mode imperative ) === event spatial at the obj === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :location ( d / obj :op1 ( a / at ) ) :mode imperative ) === turn left at the junction === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :location ( d / junction :op1 ( a / at ) ) :mode imperative ) === give
event the mod mod mod to the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === event the modifier obj property to the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :op1 ( s / to :direction ( b / property ) ) ) ) :mode imperative ) === click the red button closest to the chair === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod red :location ( l / chair :op1 ( s / to :direction ( b / closest ) ) ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event the mod mod to the mod of the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === event the modifier obj to the spatial of the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :op1 ( s / to :direction ( b / spatial ) ) ) ) :mode imperative ) === click the green button to the left of the painting === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod green :location ( l / painting :op1 ( s / to :direction ( b / left ) ) ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event mod and take a mod at the mod === ( VAR / and :op1 ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) :op2 ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :location ( m /  mod :op1 ( VAR / at ) ) ) ) === event spatial and take a spatial at the obj === ( s / and :op1 ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) :op2 ( a / event :arg0 ( y / person ) :arg1 ( r / spatial ) :location ( j / obj :op1 ( a / at ) ) ) ) === go back and take a right at the junction === ( s / and :op1 ( t / go :arg0 ( y / you ) :direction ( a / back ) :mode imperative ) :op2 ( a / make :arg0 ( y / you ) :arg1 ( r / right ) :location ( j / junction :op1 ( a / at ) ) ) ) === give
event the mod mod mod to person === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( VAR / person :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === event the modifier obj property to person === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / person :op1 ( s / to :direction ( b / property ) ) ) ) :mode imperative ) === click the blue button closest to you === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod blue :location ( l / you :op1 ( s / to :direction ( b / closest ) ) ) ) :mode imperative ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === click the red button === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod red ) :mode imperative ) === give
event mod into the mod person left === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( VAR / into ) ) :mode imperative ) === event spatial into the obj person left === ( e / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( l / obj :op1 ( i / into ) ) :mode imperative ) === go back into the room you left === ( e / go :arg0 ( y / you ) :direction ( a / back ) :destination ( l / room :op1 ( i / into ) ) :mode imperative ) === give
event the mod mod mod the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( m /  mod ) ) ) :mode imperative ) === event the modifier obj spatial the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :op1 ( n / spatial ) ) ) :mode imperative ) === click the green button near the lamp === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod green :location ( l / lamp :op1 ( n / near ) ) ) :mode imperative ) === give
keep going until the mod === ( e /  event :arg0 ( VAR / person ) :extent ( m /  mod :op1 ( VAR / until ) ) :mode imperative ) === keep going until the obj === ( t / event :arg0 ( y / person ) :extent ( a / obj :op1 ( u / until ) ) :mode imperative ) === keep going until the junction === ( t / keep-going :arg0 ( y / you ) :extent ( a / junction :op1 ( u / until ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event the mod mod mod the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( m /  mod ) ) ) :mode imperative ) === event the modifier obj spatial the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :op1 ( n / spatial ) ) ) :mode imperative ) === click the red button near the chair === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod red :location ( l / chair :op1 ( n / near ) ) ) :mode imperative ) === give
the mod mod === ( m /  mod :domain ( m /  mod ) :mod mod ) === the obj modifier === ( q / obj :domain ( t / obj ) :mod modifier ) === the one closest === ( q / one :domain ( t / entity ) :mod closest ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
keep going into the next mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / into ) :next ) :mode imperative ) === keep going into the next obj === ( t / event :arg0 ( y / person ) :destination ( a / obj :op1 ( i / into ) :next ) :mode imperative ) === keep going into the next room === ( t / keep-going :arg0 ( y / you ) :destination ( a / room :op1 ( i / into ) :next ) :mode imperative ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === click the green button === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod green ) :mode imperative ) === give
event a mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === event a spatial === ( t / event :arg0 ( y / person ) :arg1 ( l / spatial ) ) === take a right === ( t / take :arg0 ( y / you ) :arg1 ( l / right ) ) === give
event to personr righ === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event to personr righ === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn to your righ === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event the mod button mod to the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :mod mod :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === event the modifier button property to the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ( t / obj ) :mod modifier :location ( l / obj :op1 ( s / to :direction ( b / property ) ) ) ) :mode imperative ) === push the blue button next to the lamp === ( p / push :arg0 ( y / you ) :arg1 ( q / one ( t / entity ) :mod blue :location ( l / lamp :op1 ( s / to :direction ( b / next ) ) ) ) :mode imperative ) === give
event a mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === event a spatial === ( t / event :arg0 ( y / person ) :arg1 ( l / spatial ) ) === make a right === ( t / make :arg0 ( y / you ) :arg1 ( l / right ) ) === give
event a mod and mod the mod === ( VAR / and :op1 ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) :op2 ( ( / mod :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) ) === event a spatial and obj the obj === ( s / and :op1 ( t / event :arg0 ( y / person ) :arg1 ( l / spatial ) ) :op2 ( t1 / obj :arg0 ( y / person ) :arg1 ( l1 / obj ) ) ) === make a left and exit the room === ( s / and :op1 ( t / make :arg0 ( y / you ) :arg1 ( l / left ) ) :op2 ( t1 / exit :arg0 ( y / you ) :arg1 ( l1 / room ) ) ) === give
event mod and event 90 mod === ( VAR / and :op1 ( ( / event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) :op2 ( ( / event :arg0 ( VAR / person ) :extent ( m /  mod :quant 90 ) :mode imperative ) ) === event spatial and event 90 obj === ( s / and :op1 ( t1 / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) :op2 ( t2 / event :arg0 ( y / person ) :extent ( a / obj :quant 90 ) :mode imperative ) ) === go forward and turn 90 degrees === ( s / and :op1 ( t1 / go :arg0 ( y / you ) :direction ( a / forward ) :mode imperative ) :op2 ( t2 / turn :arg0 ( y / you ) :extent ( a / degrees :quant 90 ) :mode imperative ) ) === give
event into the mod on the mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / into ) :location ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) === event into the obj on the spatial === ( e / event :arg0 ( y / person ) :destination ( l / obj :op1 ( i / into ) :location ( r / spatial :op1 ( o / on ) ) ) :mode imperative ) === go into the room on the right === ( e / go :arg0 ( y / you ) :destination ( l / room :op1 ( i / into ) :location ( r / right :op1 ( o / on ) ) ) :mode imperative ) === give
event the mod mod to the mod of the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :mod mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === event the modifier obj to the spatial of the property obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / property :mod property :op1 ( s / to :direction ( b / spatial ) ) ) ) :mode imperative ) === push the green button to the left of the red button === ( p / push :arg0 ( y / you ) :arg1 ( q / button :mod green :location ( l / red :mod red :op1 ( s / to :direction ( b / left ) ) ) ) :mode imperative ) === give
event into the mod on personr mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / into ) :location ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) === event into the obj on personr spatial === ( e / event :arg0 ( y / person ) :destination ( l / obj :op1 ( i / into ) :location ( r / spatial :op1 ( o / on ) ) ) :mode imperative ) === go into the room on your right === ( e / go :arg0 ( y / you ) :destination ( l / room :op1 ( i / into ) :location ( r / right :op1 ( o / on ) ) ) :mode imperative ) === give
on personr mod event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) === on personr spatial, event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / spatial :op1 ( o / on ) ) ) :mode imperative ) === on your right, push the yellow button === ( p / push :arg0 ( y / you ) :arg1 ( q / button :mod yellow :location ( l / right :op1 ( o / on ) ) ) :mode imperative ) === give
event 90 mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :extent ( m /  mod :quant 90 ) :mode imperative ) === event 90 obj spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :extent ( d / obj :quant 90 ) :mode imperative ) === turn 90 degrees left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :extent ( d / degrees :quant 90 ) :mode imperative ) === give
event into the mod on the mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / into ) :location ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) === event into the obj on the spatial === ( e / event :arg0 ( y / person ) :destination ( l / obj :op1 ( i / into ) :location ( r / spatial :op1 ( o / on ) ) ) :mode imperative ) === go into the room on the right === ( e / go :arg0 ( y / you ) :destination ( l / room :op1 ( i / into ) :location ( r / right :op1 ( o / on ) ) ) :mode imperative ) === give
event mod and event mod the mod === ( VAR / and :op1 ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) :op2 ( ( / event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( m /  mod ) ) :mode imperative ) ) === event spatial and event spatial the obj === ( s / and :op1 ( e / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) :op2 ( e1 / event :arg0 ( y / person ) :path ( c1 / obj :op1 ( d / spatial ) ) :mode imperative ) ) === turn right and proceed down the room === ( s / and :op1 ( e / turn :arg0 ( y / you ) :direction ( r / right ) :mode imperative ) :op2 ( e1 / proceed :arg0 ( y / you ) :path ( c1 / room :op1 ( d / down ) ) :mode imperative ) ) === give
event the mod mod mod to the mod mod on personr right === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :mod mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === event the property obj property to the modifier obj on personr right === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod property :location ( l / property :mod modifier :op1 ( s / to :direction ( b / property ) ) ) ) :mode imperative ) === push the red button next to the blue button on your right === ( p / push :arg0 ( y / you ) :arg1 ( q / button :mod red :location ( l / red :mod blue :op1 ( s / to :direction ( b / next ) ) ) ) :mode imperative ) === give
event mod 120 mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :extent ( m /  mod :quant 120 ) :mode imperative ) === event spatial 120 obj spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :extent ( d / obj :quant 120 ) :mode imperative ) === turn left 120 degrees left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :extent ( d / degrees :quant 120 ) :mode imperative ) === give
event the mod mod mod to the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === event the modifier obj property to the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :op1 ( s / to :direction ( b / property ) ) ) ) :mode imperative ) === push the green button next to the couch === ( p / push :arg0 ( y / you ) :arg1 ( q / button :mod green :location ( l / couch :op1 ( s / to :direction ( b / next ) ) ) ) :mode imperative ) === give
event 180 mod and reevent to the mod mod === ( VAR / and :op1 ( e /  event :arg0 ( VAR / person ) :extent ( m /  mod :quant 180 ) :mode imperative ) :op2 ( VAR / reevent :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / ( ) :mod mod ) :mode imperative ) ) === event 180 obj and reevent to the modifier obj === ( s / and :op1 ( t / event :arg0 ( y / person ) :extent ( d / obj :quant 180 ) :mode imperative ) :op2 ( t / reevent :arg0 ( y / person ) :destination ( a / obj :op1 ( t / to ) :mod modifier ) :mode imperative ) ) === turn 180 degrees and return to the previous room === ( s / and :op1 ( t / turn :arg0 ( y / you ) :extent ( d / degrees :quant 180 ) :mode imperative ) :op2 ( t / return :arg0 ( y / you ) :destination ( a / room :op1 ( t / to ) :mod previous ) :mode imperative ) ) === give
event through and event mod === ( VAR / and :op1 ( e /  event :arg0 ( VAR / person ) :path ( VAR / through ) :mode imperative ) :op2 ( ( / event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) ) === event through and event spatial === ( s / and :op1 ( t / event :arg0 ( y / person ) :path ( a / through ) :mode imperative ) :op2 ( t1 / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) ) === walk through and turn left === ( s / and :op1 ( t / walk :arg0 ( y / you ) :path ( a / through ) :mode imperative ) :op2 ( t1 / turn :arg0 ( y / you ) :direction ( r / left ) :mode imperative ) ) === give
event the mod mod temporal === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :time ( VAR / temporal ) :mode imperative ) === event the modifier obj temporal === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :time ( m / temporal ) :mode imperative ) === push the yellow button again === ( p / push :arg0 ( y / you ) :arg1 ( q / button :mod yellow ) :time ( m / again ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
event into the mod on the mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / into ) :location ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) === event into the obj on the spatial === ( e / event :arg0 ( y / person ) :destination ( l / obj :op1 ( i / into ) :location ( r / spatial :op1 ( o / on ) ) ) :mode imperative ) === go into the room on the right === ( e / go :arg0 ( y / you ) :destination ( l / room :op1 ( i / into ) :location ( r / right :op1 ( o / on ) ) ) :mode imperative ) === give
event mod to the mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( VAR / ( ) :mod mod ) :mode imperative ) === event spatial to the modifier obj === ( e / event :arg0 ( y / person ) :direction ( r / spatial ) :destination ( l / obj :op1 ( i / to ) :mod modifier ) :mode imperative ) === go straight to the next room === ( e / go :arg0 ( y / you ) :direction ( r / straight ) :destination ( l / room :op1 ( i / to ) :mod next ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
event mod at the next mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :location ( m /  mod :op1 ( ( / at ) ) :mode imperative ) === event spatial at the next obj === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :location ( a / obj :op1 ( a1 / at ) ) :mode imperative ) === turn left at the next corner === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :location ( a / corner :op1 ( a1 / at ) ) :mode imperative ) === give
event 90 mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :extent ( m /  mod :quant 90 ) :mode imperative ) === event 90 obj spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :extent ( d / obj :quant 90 ) :mode imperative ) === turn 90 degrees right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :extent ( d / degrees :quant 90 ) :mode imperative ) === give
event into the mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / into ) ) :mode imperative ) === event into the obj === ( e / event :arg0 ( y / person ) :destination ( l / obj :op1 ( i / into ) ) :mode imperative ) === go into the room === ( e / go :arg0 ( y / you ) :destination ( l / room :op1 ( i / into ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event mod and event into the mod === ( VAR / and :op1 ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) :op2 ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / into ) ) :mode imperative ) ) === event spatial and event into the obj === ( s / and :op1 ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) :op2 ( e / event :arg0 ( y / person ) :destination ( l / obj :op1 ( i / into ) ) :mode imperative ) ) === turn left and go into the room === ( s / and :op1 ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) :op2 ( e / go :arg0 ( y / you ) :destination ( l / room :op1 ( i / into ) ) :mode imperative ) ) === give
event the mod mod mod to the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === event the modifier obj property to the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :op1 ( s / to :direction ( b / property ) ) ) ) :mode imperative ) === click the blue button closest to the plant === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod blue :location ( l / plant :op1 ( s / to :direction ( b / closest ) ) ) ) :mode imperative ) === give
event into the mod mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / into ) :mod mod ) :mode imperative ) === event into the modifier obj === ( e / event :arg0 ( y / person ) :destination ( l / obj :op1 ( i / into ) :mod modifier ) :mode imperative ) === go into the previous room === ( e / go :arg0 ( y / you ) :destination ( l / room :op1 ( i / into ) :mod previous ) :mode imperative ) === give
event mod into the mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( VAR / into ) :mod mod ) :mode imperative ) === event spatial into the modifier obj === ( e / event :arg0 ( y / person ) :direction ( s1 / spatial ) :destination ( l / obj :op1 ( i / into ) :mod modifier ) :mode imperative ) === walk straight into the next room === ( e / walk :arg0 ( y / you ) :direction ( s1 / straight ) :destination ( l / room :op1 ( i / into ) :mod next ) :mode imperative ) === give
event mod into the mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( VAR / into ) :mod mod ) :mode imperative ) === event spatial into the modifier obj === ( e / event :arg0 ( y / person ) :direction ( s1 / spatial ) :destination ( l / obj :op1 ( i / into ) :mod modifier ) :mode imperative ) === go straight into the next room === ( e / go :arg0 ( y / you ) :direction ( s1 / straight ) :destination ( l / room :op1 ( i / into ) :mod next ) :mode imperative ) === give
event 90 mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :extent ( m /  mod :quant 90 ) :mode imperative ) === event 90 obj spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :extent ( d / obj :quant 90 ) :mode imperative ) === turn 90 degrees left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :extent ( d / degrees :quant 90 ) :mode imperative ) === give
event mod into the mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( VAR / into ) :mod mod ) :mode imperative ) === event spatial into the modifier obj === ( e / event :arg0 ( y / person ) :direction ( s1 / spatial ) :destination ( l / obj :op1 ( i / into ) :mod modifier ) :mode imperative ) === go straight into the next room === ( e / go :arg0 ( y / you ) :direction ( s1 / straight ) :destination ( l / room :op1 ( i / into ) :mod next ) :mode imperative ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === click the blue button === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod blue ) :mode imperative ) === give
event mod into the mod mod and event === ( VAR / and :op1 ( ( / event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( VAR / into ) :mod mod ) :mode imperative ) :op2 ( e /  event :arg0 ( VAR / person ) :mode imperative ) ) === event spatial into the modifier obj and event === ( s / and :op1 ( e1 / event :arg0 ( y / person ) :direction ( s1 / spatial ) :destination ( l / obj :op1 ( i / into ) :mod modifier ) :mode imperative ) :op2 ( e2 / event :arg0 ( y / person ) :mode imperative ) ) === walk straight into the next room and stop === ( s / and :op1 ( e1 / walk :arg0 ( y / you ) :direction ( s1 / straight ) :destination ( l / room :op1 ( i / into ) :mod next ) :mode imperative ) :op2 ( e2 / stop :arg0 ( y / you ) :mode imperative ) ) === give
event 90 mod === ( e /  event :arg0 ( VAR / person ) :extent ( m /  mod :quant 90 ) :mode imperative ) === event 90 obj === ( t / event :arg0 ( y / person ) :extent ( d / obj :quant 90 ) :mode imperative ) === turn 90 degrees === ( t / turn :arg0 ( y / you ) :extent ( d / degrees :quant 90 ) :mode imperative ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === click the blue button === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod blue ) :mode imperative ) === give
event 180 mod === ( e /  event :arg0 ( VAR / person ) :extent ( m /  mod :quant 180 ) :mode imperative ) === event 180 obj === ( t / event :arg0 ( y / person ) :extent ( d / obj :quant 180 ) :mode imperative ) === turn 180 degrees === ( t / turn :arg0 ( y / you ) :extent ( d / degrees :quant 180 ) :mode imperative ) === give
event towards the mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / towards ) ) :mode imperative ) === event towards the obj === ( e / event :arg0 ( y / person ) :destination ( l / obj :op1 ( i / towards ) ) :mode imperative ) === walk towards the wall === ( e / walk :arg0 ( y / you ) :destination ( l / wall :op1 ( i / towards ) ) :mode imperative ) === give
event 90 mod === ( e /  event :arg0 ( VAR / person ) :extent ( m /  mod :quant 90 ) :mode imperative ) === event 90 obj === ( t / event :arg0 ( y / person ) :extent ( d / obj :quant 90 ) :mode imperative ) === turn 90 degrees === ( t / turn :arg0 ( y / you ) :extent ( d / degrees :quant 90 ) :mode imperative ) === give
event 180 mod === ( e /  event :arg0 ( VAR / person ) :extent ( m /  mod :quant 180 ) :mode imperative ) === event 180 obj === ( t / event :arg0 ( y / person ) :extent ( d / obj :quant 180 ) :mode imperative ) === turn 180 degrees === ( t / turn :arg0 ( y / you ) :extent ( d / degrees :quant 180 ) :mode imperative ) === give
event mod into the mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( VAR / into ) :mod mod ) :mode imperative ) === event spatial into the modifier obj === ( e / event :arg0 ( y / person ) :direction ( s1 / spatial ) :destination ( l / obj :op1 ( i / into ) :mod modifier ) :mode imperative ) === walk straight into the next room === ( e / walk :arg0 ( y / you ) :direction ( s1 / straight ) :destination ( l / room :op1 ( i / into ) :mod next ) :mode imperative ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === click the blue button === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod blue ) :mode imperative ) === give
event into the mod mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / into ) :mod mod ) :mode imperative ) === event into the modifier obj === ( e / event :arg0 ( y / person ) :destination ( l / obj :op1 ( i / into ) :mod modifier ) :mode imperative ) === walk into the previous room === ( e / walk :arg0 ( y / you ) :destination ( l / room :op1 ( i / into ) :mod previous ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === proceed forward === ( t / proceed :arg0 ( y / you ) :direction ( r / forward ) :mode imperative ) === give
event into the mod on the mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / into ) :location ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) === event into the obj on the spatial === ( e / event :arg0 ( y / person ) :destination ( l / obj :op1 ( i / into ) :location ( r / spatial :op1 ( o / on ) ) ) :mode imperative ) === walk into the room on the left === ( e / walk :arg0 ( y / you ) :destination ( l / room :op1 ( i / into ) :location ( r / left :op1 ( o / on ) ) ) :mode imperative ) === give
event into the mod on the mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / into ) :location ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) === event into the obj on the spatial === ( e / event :arg0 ( y / person ) :destination ( l / obj :op1 ( i / into ) :location ( r / spatial :op1 ( o / on ) ) ) :mode imperative ) === walk into the room on the right === ( e / walk :arg0 ( y / you ) :destination ( l / room :op1 ( i / into ) :location ( r / right :op1 ( o / on ) ) ) :mode imperative ) === give
event 120 mod right === ( e /  event :arg0 ( VAR / person ) :extent ( m /  mod :quant 120 ) :mode imperative ) === event 120 obj right === ( t / event :arg0 ( y / person ) :extent ( d / obj :quant 120 ) :mode imperative ) === turn 120 degrees right === ( t / turn :arg0 ( y / you ) :extent ( d / degrees :quant 120 ) :mode imperative ) === give
event into the mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / into ) ) :mode imperative ) === event into the obj === ( e / event :arg0 ( y / person ) :destination ( l / obj :op1 ( i / into ) ) :mode imperative ) === walk into the room === ( e / walk :arg0 ( y / you ) :destination ( l / room :op1 ( i / into ) ) :mode imperative ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === push the blue button === ( p / push :arg0 ( y / you ) :arg1 ( q / button :mod blue ) :mode imperative ) === give
mod to the mod === ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) === property to the obj === ( l / obj :op1 ( s / to :direction ( b / property ) ) ) === next to the couch === ( l / couch :op1 ( s / to :direction ( b / next ) ) ) === give
event to the mod mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / ( ) :mod mod ) :mode imperative ) === event to the modifier obj === ( e / event :arg0 ( y / person ) :destination ( l / obj :op1 ( i / to ) :mod modifier ) :mode imperative ) === return to the previous room === ( e / return :arg0 ( y / you ) :destination ( l / room :op1 ( i / to ) :mod previous ) :mode imperative ) === give
event into the mod on personr mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / into ) :location ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) === event into the obj on personr spatial === ( e / event :arg0 ( y / person ) :destination ( l / obj :op1 ( i / into ) :location ( r / spatial :op1 ( o / on ) ) ) :mode imperative ) === walk into the room on your right === ( e / walk :arg0 ( y / you ) :destination ( l / room :op1 ( i / into ) :location ( r / right :op1 ( o / on ) ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( r / right ) :mode imperative ) === give
event the mod mod on personr mod mod from the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / on ) ) ) :source ( m /  mod :op1 ( VAR / from ) :mod mod ) :mode imperative ) === event the modifier obj on personr spatial, modifier from the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / spatial :op1 ( o / on ) ) ) :source ( l1 / obj :op1 ( f / from ) :mod modifier ) :mode imperative ) === push the red button on your left, farthest from the lamp === ( p / push :arg0 ( y / you ) :arg1 ( q / button :mod red :location ( l / left :op1 ( o / on ) ) ) :source ( l1 / lamp :op1 ( f / from ) :mod farthest ) :mode imperative ) === give
event to the mod mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / ( ) :mod mod ) :mode imperative ) === event to the modifier obj === ( e / event :arg0 ( y / person ) :destination ( l / obj :op1 ( i / to ) :mod modifier ) :mode imperative ) === return to the previous room === ( e / return :arg0 ( y / you ) :destination ( l / room :op1 ( i / to ) :mod previous ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( r / right ) :mode imperative ) === give
event right 90 mod === ( e /  event :arg0 ( VAR / person ) :extent ( m /  mod :quant 90 ) :mode imperative ) === event right 90 obj === ( t / event :arg0 ( y / person ) :extent ( d / obj :quant 90 ) :mode imperative ) === turn right 90 degrees === ( t / turn :arg0 ( y / you ) :extent ( d / degrees :quant 90 ) :mode imperative ) === give
event the mod mod on the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) === event the modifier obj on the spatial === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / spatial :op1 ( o / on ) ) ) :mode imperative ) === push the green button on the right === ( p / push :arg0 ( y / you ) :arg1 ( q / button :mod green :location ( l / right :op1 ( o / on ) ) ) :mode imperative ) === give
event to the mod on the mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / on ) :location ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) === event to the obj on the spatial === ( e / event :arg0 ( y / person ) :destination ( l / obj :op1 ( i / on ) :location ( r / spatial :op1 ( o / on ) ) ) :mode imperative ) === go to the room on the right === ( e / go :arg0 ( y / you ) :destination ( l / room :op1 ( i / on ) :location ( r / right :op1 ( o / on ) ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( r / straight ) :mode imperative ) === give
event a mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === event a spatial === ( t / event :arg0 ( y / person ) :arg1 ( r / spatial ) ) === make a right === ( t / make :arg0 ( y / you ) :arg1 ( r / right ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === event obj === ( t / event :arg0 ( y / person ) :arg1 ( r / obj ) ) === press it === ( t / press :arg0 ( y / you ) :arg1 ( r / it ) ) === give
event the mod mod mod to the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === event the modifier obj property to the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :op1 ( s / to :direction ( b / property ) ) ) ) :mode imperative ) === click the red button next to the chair === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod red :location ( l / chair :op1 ( s / to :direction ( b / next ) ) ) ) :mode imperative ) === give
event a mod mod in mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :location ( m /  mod :op1 ( VAR / VAR ) ) :mode imperative ) === event a modifier obj in spatial === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :location ( l / spatial :op1 ( i / in ) ) :mode imperative ) === find a green button in here === ( p / find :arg0 ( y / you ) :arg1 ( q / button :mod green ) :location ( l / here :op1 ( i / in ) ) :mode imperative ) === give
mod mod on your mod === ( m /  mod :domain ( m /  mod ) :mod mod :location ( m /  mod :op1 ( VAR / on ) ) ) === modifier obj on your spatial === ( q / obj :domain ( t / obj ) :mod modifier :location ( l / spatial :op1 ( s / on ) ) ) === green button on your left === ( q / button :domain ( t / entity ) :mod green :location ( l / left :op1 ( s / on ) ) ) === give
alright temporal the mod mod across from the mod mod === ( m /  mod :time ( VAR / temporal ) :domain ( m /  mod ) :mod mod :location ( m /  mod :op1 ( VAR / from :direction ( ( / across ) ) :mod mod ) ) === alright temporal the modifier obj across from the modifier obj === ( q / obj :time ( m / temporal ) :domain ( t / obj ) :mod modifier :location ( l / obj :op1 ( s / from :direction ( b / across ) ) :mod modifier ) ) === alright now the red button across from the yellow one === ( q / button :time ( m / now ) :domain ( t / entity ) :mod red :location ( l / one :op1 ( s / from :direction ( b / across ) ) :mod yellow ) ) === give
now the mod mod RIGHT NEXT to the mod mod === ( m /  mod :domain ( m /  mod ) :mod mod :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) :mod mod ) ) ) === now the modifier obj RIGHT NEXT to the modifier obj === ( q / obj :domain ( t / obj ) :mod modifier :location ( l / obj :op1 ( s / to :direction ( b / property ) :mod modifier ) ) ) === now the blue one RIGHT NEXT to the yellow one === ( q / one :domain ( t / entity ) :mod blue :location ( l / one :op1 ( s / to :direction ( b / next ) :mod yellow ) ) ) === give
event to the mod and to the mod === ( VAR / and :op1 ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / ( ) ) :mode imperative ) :op2 ( e /  event :direction ( m /  mod ) ) ) === event to the obj and to the spatial === ( s / and :op1 ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / to ) ) :mode imperative ) :op2 ( e / event :direction ( r / spatial ) ) ) === go to the end and to the left === ( s / and :op1 ( t / go :arg0 ( y / you ) :destination ( r / end :op1 ( t1 / to ) ) :mode imperative ) :op2 ( e / event :direction ( r / left ) ) ) === give
the mod mod mod to mod === ( m /  mod :domain ( m /  mod ) :mod mod :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) === the modifier obj property to obj === ( q / obj :domain ( t / obj ) :mod modifier :location ( l / obj :op1 ( s / to :direction ( b / property ) ) ) ) === the green button next to couch === ( q / button :domain ( t / entity ) :mod green :location ( l / couch :op1 ( s / to :direction ( b / next ) ) ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event obj === ( c / event :arg0 ( y / person ) :arg1 ( i / obj ) :mode imperative ) === get it === ( c / get :arg0 ( y / you ) :arg1 ( i / it ) :mode imperative ) === give
event mod across the mod this time === ( e /  event :time ( m /  mod ) :arg0 ( VAR / person ) :direction ( m /  mod ) :path ( m /  mod :op1 ( VAR / across ) ) :mode imperative ) === event spatial across the obj this time === ( e / event :time ( n / property ) :arg0 ( y / person ) :direction ( r / spatial ) :path ( l / obj :op1 ( i / across ) ) :mode imperative ) === go straight across the room this time === ( e / go :time ( n / this-time ) :arg0 ( y / you ) :direction ( r / straight ) :path ( l / room :op1 ( i / across ) ) :mode imperative ) === give
event mod to the mod with the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( ( / ( ) :prep-with ( m /  mod ) ) :mode imperative ) === event spatial to the obj with the obj === ( e / event :arg0 ( y / person ) :direction ( c / spatial ) :destination ( l / obj :op1 ( t1 / to ) :prep-with ( c / obj ) ) :mode imperative ) === go back to the room with the couch === ( e / go :arg0 ( y / you ) :direction ( c / back ) :destination ( l / room :op1 ( t1 / to ) :prep-with ( c / couch ) ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
event into the mod in mod of person === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( ( / ( ) :location ( m /  mod ) ) :mode imperative ) === event into the obj in spatial of person === ( e / event :arg0 ( y / person ) :direction ( c / spatial ) :destination ( l / obj :op1 ( t1 / to ) :location ( f / spatial ) ) :mode imperative ) === go into the room in front of you === ( e / go :arg0 ( y / you ) :direction ( c / back ) :destination ( l / room :op1 ( t1 / to ) :location ( f / front ) ) :mode imperative ) === give
the right hand of the two mod mod === ( m /  mod :domain ( m /  mod ) :mod mod :prep-of ( ( / mod :quant 2 :mod mod ) ) === the right hand of the two modifier objs === ( q / obj :domain ( t / obj ) :mod modifier :prep-of ( b / obj :quant 2 :mod modifier ) ) === the right hand of the two blue buttons === ( q / one :domain ( t / entity ) :mod right-hand :prep-of ( b / button :quant 2 :mod blue ) ) === give
event that mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event that modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === see that green button === ( p / see :arg0 ( y / you ) :arg1 ( q / button :mod green ) :mode imperative ) === give
and event a mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === and event a spatial === ( t / event :arg0 ( y / person ) :arg1 ( l / spatial ) ) === and make a right === ( t / make :arg0 ( y / you ) :arg1 ( l / right ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( r / right ) :mode imperative ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === push the yellow button === ( p / push :arg0 ( y / you ) :arg1 ( q / button :mod yellow ) :mode imperative ) === give
event mod to mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( ( / ( ) ) :mode imperative ) === event spatial to obj === ( e / event :arg0 ( y / person ) :direction ( c / spatial ) :destination ( l / obj :op1 ( t1 / to ) ) :mode imperative ) === go back to it === ( e / go :arg0 ( y / you ) :direction ( c / back ) :destination ( l / it :op1 ( t1 / to ) ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod mod === ( m /  mod :domain ( m /  mod ) :mod mod ) === modifier obj === ( q / obj :domain ( t / obj ) :mod modifier ) === blue button === ( q / button :domain ( t / entity ) :mod blue ) === give
that mod mod mod the mod === ( m /  mod :domain ( m /  mod ) :mod mod :location ( m /  mod :op1 ( m /  mod ) ) ) === that modifier obj spatial the obj === ( q / obj :domain ( t / obj ) :mod modifier :location ( l / obj :op1 ( n / spatial ) ) ) === that blue button near the safe === ( q / button :domain ( t / entity ) :mod blue :location ( l / safe :op1 ( n / near ) ) ) === give
on your mod === ( e /  event :direction ( m /  mod ) ) === on your spatial === ( e / event :direction ( r / spatial ) ) === on your right === ( e / event :direction ( r / right ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ) :mode imperative ) === push it === ( p / push :arg0 ( y / you ) :arg1 ( q / it ) :mode imperative ) === give
all the way mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod :mod mod ) :mode imperative ) === all the way spatial === ( e / event :arg0 ( y / person ) :direction ( c / spatial :mod modifier ) :mode imperative ) === all the way down === ( e / event :arg0 ( y / you ) :direction ( c / down :mod all-the-way ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
mod mod === ( m /  mod :domain ( m /  mod ) :mod mod ) === modifier obj === ( q / obj :domain ( t / obj ) :mod modifier ) === blue button === ( q / button :domain ( t / entity ) :mod blue ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === forward === ( e / event :direction ( r / forward ) ) === give
keep going to the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === keep going to the spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === keep going to the right === ( t / keep-going :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event the mod mod in the mod its the mod of the number mod the mod === ( VAR / and :op1 ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / VAR ) ) ) :mode imperative ) :op2 ( m /  mod :prep-of ( VAR / number :location ( m /  mod :op1 ( m /  mod ) ) ) ) ) === event the modifier obj in the obj, its the spatial of the number spatial the obj === ( s / and :op1 ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :op1 ( s / in ) ) ) :mode imperative ) :op2 ( r / spatial :prep-of ( l / number :location ( l / obj :op1 ( n / spatial ) ) ) ) ) === push the red button in the corner, its the left of the two near the lamp === ( s / and :op1 ( p / push :arg0 ( y / you ) :arg1 ( q / button :mod red :location ( l / corner :op1 ( s / in ) ) ) :mode imperative ) :op2 ( r / left :prep-of ( l / two :location ( l / lamp :op1 ( n / near ) ) ) ) ) === give
remember the mod with the mod === ( m /  mod :prep-with ( m /  mod ) ) === remember the obj with the obj? === ( q / obj :prep-with ( s / obj ) ) === remember the room with the safe? === ( q / room :prep-with ( s / safe ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
press the mod mod on the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :location ( m /  mod :op1 ( VAR / on ) ) :mod mod ) :mode imperative ) === press the modifier obj on the spatial === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :location ( l / spatial :op1 ( o / on ) ) :mod modifier ) :mode imperative ) === press the green button on the right === ( p / push :arg0 ( y / you ) :arg1 ( q / button :location ( l / right :op1 ( o / on ) ) :mod green ) :mode imperative ) === give
event a mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event a spatial === ( t / event :arg0 ( y / person ) :arg1 ( l / spatial ) :mode imperative ) === make a right === ( t / make :arg0 ( y / you ) :arg1 ( l / right ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
straight === ( e /  event :direction ( m /  mod ) ) === straight === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / left ) ) === give
then mod === ( e /  event :direction ( m /  mod ) ) === then spatial === ( e / event :direction ( r / spatial ) ) === then right === ( e / event :direction ( r / right ) ) === give
the right most of the mod mod === ( m /  mod :domain ( m /  mod ) :prep-of ( ( / mod :quant 2 :mod mod ) ) === the right most of the modifier objs === ( r / property :domain ( n / obj ) :prep-of ( b / obj :quant 2 :mod modifier ) ) === the right most of the blue buttons === ( r / right-most :domain ( n / entity ) :prep-of ( b / button :quant 2 :mod blue ) ) === give
straight === ( e /  event :direction ( m /  mod ) ) === straight === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / left ) ) === give
straight === ( e /  event :direction ( m /  mod ) ) === straight === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / left ) ) === give
keep going === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === keep going === ( t / event :arg0 ( y / person ) :mode imperative ) === keep going === ( t / keep-going :arg0 ( y / you ) :mode imperative ) === give
keep going === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === keep going === ( t / event :arg0 ( y / person ) :mode imperative ) === keep going === ( t / keep-going :arg0 ( y / you ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event obj === ( t / event :arg0 ( y / person ) :arg1 ( th / obj ) :mode imperative ) === push that === ( t / push :arg0 ( y / you ) :arg1 ( th / that ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
straight === ( e /  event :direction ( m /  mod ) ) === straight === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / left ) ) === give
temporal mod temporal === ( e /  event :time ( VAR / temporal ) :direction ( m /  mod ) :time ( VAR / temporal ) ) === temporal spatial temporal === ( e / event :time ( m / temporal ) :direction ( r / spatial ) :time ( m / temporal ) ) === then left again === ( e / event :time ( m / then ) :direction ( r / left ) :time ( m / again ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
of the two mod on the left, event the one mod to the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === of the two objs on the left, event the one property to the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :op1 ( s / to :direction ( b / property ) ) ) ) :mode imperative ) === of the two buttons on the left, click the one closest to the chair === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod blue :location ( l / chair :op1 ( s / to :direction ( b / closest ) ) ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( t / event :arg0 ( y / person ) :mode imperative ) === go === ( t / go :arg0 ( y / you ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod mod on the mod === ( m /  mod :domain ( m /  mod ) :location ( m /  mod :op1 ( VAR / on ) ) :mod mod ) === modifier obj on the spatial === ( q / obj :domain ( t / obj ) :location ( l / spatial :op1 ( o / on ) ) :mod modifier ) === green button on the left === ( q / button :domain ( t / entity ) :location ( l / left :op1 ( o / on ) ) :mod green ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
keep going === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === keep going === ( t / event :arg0 ( y / person ) :mode imperative ) === keep going === ( t / keep-going :arg0 ( y / you ) :mode imperative ) === give
mod mod === ( m /  mod :domain ( m /  mod ) :mod mod ) === modifier obj === ( q / obj :domain ( t / obj ) :mod modifier ) === red button === ( q / button :domain ( t / entity ) :mod red ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod mod === ( m /  mod :domain ( m /  mod ) :mod mod ) === modifier obj === ( q / obj :domain ( t / obj ) :mod modifier ) === green button === ( q / button :domain ( t / entity ) :mod green ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
those two left mod push that one mod to the mod again === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === those two left objs, push that one property to the obj again === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :op1 ( s / to :direction ( b / property ) ) ) ) :mode imperative ) === those two left buttons, push that one closest to the chair again === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod blue :location ( l / chair :op1 ( s / to :direction ( b / closest ) ) ) ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
keep going === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === keep going === ( t / event :arg0 ( y / person ) :mode imperative ) === keep going === ( t / keep-going :arg0 ( y / you ) :mode imperative ) === give
mod mod === ( m /  mod :domain ( m /  mod ) :mod mod ) === modifier obj === ( q / obj :domain ( t / obj ) :mod modifier ) === next room === ( q / room :domain ( t / entity ) :mod next ) === give
mod mod === ( m /  mod :domain ( m /  mod ) :mod mod ) === modifier obj === ( q / obj :domain ( t / obj ) :mod modifier ) === green button === ( q / button :domain ( t / entity ) :mod green ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event the mod mod on the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) === event the modifier obj on the spatial === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / spatial :op1 ( o / on ) ) ) :mode imperative ) === click the blue box on the right === ( p / click :arg0 ( y / you ) :arg1 ( q / box :mod blue :location ( l / right :op1 ( o / on ) ) ) :mode imperative ) === give
event mod through that mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === event spatial through that obj === ( t / event :arg0 ( y / person ) :direction ( st / spatial ) :path ( a / obj :op1 ( th / through ) ) :mode imperative ) === go straight through that opening === ( t / go :arg0 ( y / you ) :direction ( st / straight ) :path ( a / opening :op1 ( th / through ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
event that mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event that obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ) :mode imperative ) === click that box === ( p / click :arg0 ( y / you ) :arg1 ( q / box ) :mode imperative ) === give
event along the mod to the mod into the mod mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( ( / along ) ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( VAR / into ) :mod mod ) :mode imperative ) === event along the obj to the spatial into the modifier obj === ( t / event :arg0 ( y / person ) :path ( st / obj :op1 ( a1 / along ) ) :direction ( l / spatial ) :destination ( a / obj :op1 ( th / into ) :mod modifier ) :mode imperative ) === follow along the wall to the left into the other room === ( t / follow :arg0 ( y / you ) :path ( st / wall :op1 ( a1 / along ) ) :direction ( l / left ) :destination ( a / room :op1 ( th / into ) :mod other ) :mode imperative ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === click the blue button === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod blue ) :mode imperative ) === give
event mod and mod the mod === ( VAR / and :op1 ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) :op2 ( ( / mod :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) ) === event spatial and obj the obj === ( s / and :op1 ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) :op2 ( t1 / obj :arg0 ( y / person ) :arg1 ( r / obj ) :mode imperative ) ) === turn around and exit the room === ( s / and :op1 ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) :op2 ( t1 / exit :arg0 ( y / you ) :arg1 ( r / room ) :mode imperative ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === click the blue button === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod blue ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event mod in the mod to the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( VAR / into ) ) :direction ( m /  mod ) :mode imperative ) === event spatial in the obj to the spatial === ( t / event :arg0 ( y / person ) :direction ( st / spatial ) :destination ( a / obj :op1 ( th / into ) ) :direction ( l / spatial ) :mode imperative ) === go back in the room to the left === ( t / go :arg0 ( y / you ) :direction ( st / back ) :destination ( a / room :op1 ( th / into ) ) :direction ( l / left ) :mode imperative ) === give
event the mod mod temporal === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :time ( VAR / temporal ) :mode imperative ) === event the modifier obj temporal === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :time ( m / temporal ) :mode imperative ) === click the blue button again === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod blue ) :time ( m / again ) :mode imperative ) === give
keep going === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === keep going === ( t / event :arg0 ( y / person ) :mode imperative ) === keep going === ( t / keep-going :arg0 ( y / you ) :mode imperative ) === give
event a right mod of that mod up ahead === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :destination ( m /  mod :op1 ( m /  mod ) :mod mod ) :mode imperative ) === event a right spatial of that obj up ahead === ( t / event :arg0 ( y / person ) :arg1 ( l / spatial ) :destination ( o / obj :op1 ( ou / spatial ) :mod modifier ) :mode imperative ) === take a right out of that room up ahead === ( t / take :arg0 ( y / you ) :arg1 ( l / left ) :destination ( o / room :op1 ( ou / out ) :mod up-ahead ) :mode imperative ) === give
event to the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event to the spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go to the right === ( t / go :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === click the blue button === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod blue ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
mod the mod === ( m /  mod :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === obj the obj === ( p / obj :arg0 ( y / person ) :arg1 ( q / obj ) :mode imperative ) === exit the room === ( p / exit :arg0 ( y / you ) :arg1 ( q / room ) :mode imperative ) === give
event to the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event to the spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go to the right === ( t / go :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event the mod mod mod to the mod on the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :mod mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :location ( m /  mod ) :mode imperative ) === event the modifier obj property to the obj on the spatial === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :mod modifier :op1 ( s / to :direction ( b / property ) ) ) ) :location ( l1 / spatial ) :mode imperative ) === click the red box closest to the corner on the left === ( p / click :arg0 ( y / you ) :arg1 ( q / box :mod red :location ( l / corner :mod red :op1 ( s / to :direction ( b / closest ) ) ) ) :location ( l1 / left ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
mod the mod === ( m /  mod :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === obj the obj === ( p / obj :arg0 ( y / person ) :arg1 ( q / obj ) :mode imperative ) === exit the room === ( p / exit :arg0 ( y / you ) :arg1 ( q / room ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event the mod mod mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :mod mod ) ) :mode imperative ) === event the modifier obj modifier spatial === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( s / spatial :mod modifier ) ) :mode imperative ) === click the green box straight ahead === ( p / click :arg0 ( y / you ) :arg1 ( q / box :mod green :location ( s / ahead :mod straight ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event to the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event to the spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go to the right === ( t / go :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event obj === ( t / event :arg0 ( y / person ) :arg1 ( a / obj ) :mode imperative ) === follow it === ( t / follow :arg0 ( y / you ) :arg1 ( a / it ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
Hey XXX, event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === Hey XXX, event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === Hey XXX, turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
Click the mod button in mod of person to the mod of the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod ) :location ( m /  mod :op1 ( VAR / of :direction ( ( / mod ) ) ) ) :mode imperative ) === Click the modifier button in spatial of person to the spatial of the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( s / spatial ) :location ( l / obj :op1 ( s / of :direction ( b / spatial ) ) ) ) :mode imperative ) === Click the blue button in front of you to the left of the lamp === ( p / click :arg0 ( y / you ) :arg1 ( q / box :mod blue :location ( s / front ) :location ( l / lamp :op1 ( s / of :direction ( b / left ) ) ) ) :mode imperative ) === give
keep going === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === keep going === ( t / event :arg0 ( y / person ) :mode imperative ) === keep going === ( t / keep-going :arg0 ( y / you ) :mode imperative ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === click the green button === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod green ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
event through the mod on the mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) :direction ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) === event through the obj on the spatial === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) :direction ( st / spatial :op1 ( o / on ) ) ) :mode imperative ) === go through the opening on the left === ( t / go :arg0 ( y / you ) :path ( a / opening :op1 ( th / through ) :direction ( st / left :op1 ( o / on ) ) ) :mode imperative ) === give
event the mod mod that is mod of the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :mod mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === event the modifier obj that is spatial of the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :mod modifier :op1 ( s / to :direction ( b / spatial ) ) ) ) :mode imperative ) === click the red button that is left of the blue button === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod red :location ( l / button :mod blue :op1 ( s / to :direction ( b / left ) ) ) ) :mode imperative ) === give
event 90 mod to the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :extent ( m /  mod :quant 90 ) :mode imperative ) === event 90 obj to the spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :extent ( d / obj :quant 90 ) :mode imperative ) === turn 90 degrees to the right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :extent ( d / degrees :quant 90 ) :mode imperative ) === give
event to the mod through the mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) :direction ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) === event to the spatial through the obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) :direction ( st / spatial :op1 ( o / on ) ) ) :mode imperative ) === go to the left through the opening === ( t / go :arg0 ( y / you ) :path ( a / opening :op1 ( th / through ) :direction ( st / left :op1 ( o / on ) ) ) :mode imperative ) === give
event on the mod mod in mod of person === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod ) ) :mode imperative ) === event on the modifier obj in spatial of person === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( s / spatial ) ) :mode imperative ) === click on the green box in front of you === ( p / click :arg0 ( y / you ) :arg1 ( q / box :mod green :location ( s / front ) ) :mode imperative ) === give
ok money event through that mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) :direction ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) === ok money event through that obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) :direction ( st / spatial :op1 ( o / on ) ) ) :mode imperative ) === ok money go through that opening === ( t / go :arg0 ( y / you ) :path ( a / opening :op1 ( th / through ) :direction ( st / left :op1 ( o / on ) ) ) :mode imperative ) === give
event on the mod mod on personr mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod ) ) :mode imperative ) === event on the modifier obj on personr spatial === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( s / spatial ) ) :mode imperative ) === click on the yellow box on your left === ( p / click :arg0 ( y / you ) :arg1 ( q / box :mod yellow :location ( s / left ) ) :mode imperative ) === give
ok event 90 mod to the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :extent ( m /  mod :quant 90 ) :mode imperative ) === ok event 90 obj to the spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :extent ( d / obj :quant 90 ) :mode imperative ) === ok turn 90 degrees to the left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :extent ( d / degrees :quant 90 ) :mode imperative ) === give
event on the mod mod mod to the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :mod mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === event on the modifier obj property to the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :mod modifier :op1 ( s / to :direction ( b / property ) ) ) ) :mode imperative ) === click on the red button closest to the plant === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod red :location ( l / plant :mod red :op1 ( s / to :direction ( b / closest ) ) ) ) :mode imperative ) === give
ok event 90 mod to the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :extent ( m /  mod :quant 90 ) :mode imperative ) === ok event 90 obj to the spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :extent ( d / obj :quant 90 ) :mode imperative ) === ok turn 90 degrees to the right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :extent ( d / degrees :quant 90 ) :mode imperative ) === give
event the mod mod in the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / VAR ) ) ) :mode imperative ) === event the modifier obj in the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :op1 ( m / in ) ) ) :mode imperative ) === click the blue button in the middle === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod blue :location ( l / middle :op1 ( m / in ) ) ) :mode imperative ) === give
through the mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === through the obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :mode imperative ) === through the opening === ( t / event :arg0 ( y / you ) :path ( a / opening :op1 ( th / through ) ) :mode imperative ) === give
keep going through the mod and event a mod === ( VAR / and :op1 ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) :op2 ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) ) === keep going through the obj and event a spatial === ( s / and :op1 ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :mode imperative ) :op2 ( t / event :arg0 ( y / person ) :arg1 ( a / spatial ) :mode imperative ) ) === keep going through the room and make a left === ( s / and :op1 ( t / keep-going :arg0 ( y / you ) :path ( a / room :op1 ( th / through ) ) :mode imperative ) :op2 ( t / make :arg0 ( y / you ) :arg1 ( a / left ) :mode imperative ) ) === give
event that mod mod in mod of person === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod ) ) :mode imperative ) === event that modifier obj in spatial of person === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / spatial ) ) :mode imperative ) === click that green button in front of you === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod green :location ( l / front ) ) :mode imperative ) === give
event through the mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === event through the obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :mode imperative ) === go through the opening === ( t / go :arg0 ( y / you ) :path ( a / opening :op1 ( th / through ) ) :mode imperative ) === give
keep going and event a mod through the mod === ( VAR / and :op1 ( ( / event :arg0 ( VAR / person ) :mode imperative ) :op2 ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) ) === keep going and event a spatial through the obj === ( s / and :op1 ( t1 / event :arg0 ( y / person ) :mode imperative ) :op2 ( t / event :arg0 ( y / person ) :arg1 ( l / spatial ) :path ( a / obj :op1 ( th / through ) ) :mode imperative ) ) === keep going and make a left through the opening === ( s / and :op1 ( t1 / keep-going :arg0 ( y / you ) :mode imperative ) :op2 ( t / make :arg0 ( y / you ) :arg1 ( l / left ) :path ( a / opening :op1 ( th / through ) ) :mode imperative ) ) === give
wait shoot event through the mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === wait shoot event through the obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :mode imperative ) === wait shoot go through the opening === ( t / go :arg0 ( y / you ) :path ( a / opening :op1 ( th / through ) ) :mode imperative ) === give
through the mod past the mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :path ( m /  mod :op1 ( VAR / past ) ) :mode imperative ) === through the obj past the obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :path ( c / obj :op1 ( p / past ) ) :mode imperative ) === through the opening past the couch === ( t / event :arg0 ( y / you ) :path ( a / opening :op1 ( th / through ) ) :path ( c / couch :op1 ( p / past ) ) :mode imperative ) === give
keep going === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === keep going === ( t / event :arg0 ( y / person ) :mode imperative ) === keep going === ( t / keep-going :arg0 ( y / you ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event through the mod on the mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :direction ( m /  mod ) :mode imperative ) === event through the obj on the spatial === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :direction ( l / spatial ) :mode imperative ) === go through the opening on the right === ( t / go :arg0 ( y / you ) :path ( a / opening :op1 ( th / through ) ) :direction ( l / right ) :mode imperative ) === give
event through the mod on the mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :direction ( m /  mod ) :mode imperative ) === event through the obj on the spatial === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :direction ( l / spatial ) :mode imperative ) === go through the opening on the right === ( t / go :arg0 ( y / you ) :path ( a / opening :op1 ( th / through ) ) :direction ( l / right ) :mode imperative ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === click the yellow button === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod yellow ) :mode imperative ) === give
ok event mod through the mod on the mod === ( e /  event :arg0 ( VAR / person ) :destination ( ( / mod ) :path ( m /  mod :op1 ( VAR / through ) ) :direction ( m /  mod ) :mode imperative ) === ok event spatial through the obj on the spatial === ( t / event :arg0 ( y / person ) :destination ( b / spatial ) :path ( a / obj :op1 ( th / through ) ) :direction ( l / spatial ) :mode imperative ) === ok go back through the opening on the right === ( t / go :arg0 ( y / you ) :destination ( b / back ) :path ( a / opening :op1 ( th / through ) ) :direction ( l / right ) :mode imperative ) === give
event through the mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === event through the obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :mode imperative ) === go through the opening === ( t / go :arg0 ( y / you ) :path ( a / opening :op1 ( th / through ) ) :mode imperative ) === give
mod at the end of the room === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :location ( m /  mod :op1 ( VAR / at ) ) :mode imperative ) === spatial at the end of the room === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :location ( l / obj :op1 ( a / at ) ) :mode imperative ) === left at the end of the room === ( t / go :arg0 ( y / you ) :direction ( a / left ) :location ( l / end-of-room :op1 ( a / at ) ) :mode imperative ) === give
event to the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event to the spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn to the left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
event on the mod mod to the mod of the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === event on the modifier obj to the spatial of the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :op1 ( s / to :direction ( b / spatial ) ) ) ) :mode imperative ) === click on the green button to the right of the picture === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod green :location ( l / picture :op1 ( s / to :direction ( b / right ) ) ) ) :mode imperative ) === give
event mod temporal === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :time ( VAR / temporal ) :mode imperative ) === event obj temporal === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ) :time ( m / temporal ) :mode imperative ) === click it again === ( p / click :arg0 ( y / you ) :arg1 ( q / it ) :time ( m / again ) :mode imperative ) === give
one more time === ( m /  mod ) === one more time === ( t / property ) === one more time === ( t / one-more-time ) === give
ok event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === ok event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === ok turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
keep going === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === keep going === ( t / event :arg0 ( y / person ) :mode imperative ) === keep going === ( t / keep-going :arg0 ( y / you ) :mode imperative ) === give
ok there is a set of 2 blue mod on the right mod event the mod mod to person === ( VAR / and :op1 ( ( / mod :polarity + :quant 2 :location ( m /  mod :op1 ( VAR / on ) ) ) :op2 ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :location ( VAR / person :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) ) === ok there is a set of 2 blue objs on the right obj, event the obj property to person === ( s / and :op1 ( b / obj :polarity + :quant 2 :location ( w / obj :op1 ( o / on ) ) ) :op2 ( p / event :arg0 ( y / person ) :arg1 ( q / obj :location ( l / person :op1 ( s / to :direction ( b / property ) ) ) ) :mode imperative ) ) === ok there is a set of 2 blue buttons on the right wall, click the one closest to you === ( s / and :op1 ( b / button :polarity + :quant 2 :location ( w / wall :op1 ( o / on ) ) ) :op2 ( p / click :arg0 ( y / you ) :arg1 ( q / one :location ( l / you :op1 ( s / to :direction ( b / closest ) ) ) ) :mode imperative ) ) === give
event through the mod on personr mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) :direction ( m /  mod ) ) :mode imperative ) === event through the obj on personr spatial === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) :direction ( l / spatial ) ) :mode imperative ) === go through the opening on your left === ( t / go :arg0 ( y / you ) :path ( a / opening :op1 ( th / through ) :direction ( l / left ) ) :mode imperative ) === give
keep going mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === keep going spatial === ( t / event :arg0 ( y / person ) :direction ( l / spatial ) :mode imperative ) === keep going straight === ( t / keep-going :arg0 ( y / you ) :direction ( l / straight ) :mode imperative ) === give
event a mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event a spatial === ( t / event :arg0 ( y / person ) :arg1 ( r / spatial ) :mode imperative ) === make a right === ( t / make :arg0 ( y / you ) :arg1 ( r / right ) :mode imperative ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === click the blue button === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod blue ) :mode imperative ) === give
event that left mod of the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :destination ( m /  mod :op1 ( m /  mod ) ) :mode imperative ) === event that left spatial of the obj === ( t / event :arg0 ( y / person ) :arg1 ( r / spatial ) :destination ( o / obj :op1 ( os / spatial ) ) :mode imperative ) === make that left out of the room === ( t / make :arg0 ( y / you ) :arg1 ( r / right ) :destination ( o / room :op1 ( os / out ) ) :mode imperative ) === give
event mod through === ( e /  event :arg0 ( VAR / person ) :path ( VAR / through :mod mod ) :mode imperative ) === event modifier through === ( t / event :arg0 ( y / person ) :path ( a / through :mod modifier ) :mode imperative ) === go straight through === ( t / go :arg0 ( y / you ) :path ( a / through :mod straight ) :mode imperative ) === give
event that mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event that spatial === ( t / event :arg0 ( y / person ) :arg1 ( r / spatial ) :mode imperative ) === make that left === ( t / make :arg0 ( y / you ) :arg1 ( r / left ) :mode imperative ) === give
event that mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event that spatial === ( t / event :arg0 ( y / person ) :arg1 ( r / spatial ) :mode imperative ) === make that left === ( t / make :arg0 ( y / you ) :arg1 ( r / left ) :mode imperative ) === give
event through the mod on the mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) :direction ( m /  mod ) ) :mode imperative ) === event through the obj on the spatial === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) :direction ( l / spatial ) ) :mode imperative ) === go through the opening on the left === ( t / go :arg0 ( y / you ) :path ( a / opening :op1 ( th / through ) :direction ( l / left ) ) :mode imperative ) === give
event that mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event that spatial === ( t / event :arg0 ( y / person ) :arg1 ( r / spatial ) :mode imperative ) === make that right === ( t / make :arg0 ( y / you ) :arg1 ( r / right ) :mode imperative ) === give
event the mod mod that is on the mod of the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :mod mod :op1 ( VAR / on :direction ( ( / mod ) ) ) ) :mode imperative ) === event the modifier obj that is on the spatial of the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :mod modifier :op1 ( s / on :direction ( b / spatial ) ) ) ) :mode imperative ) === click the green button that is on the left of the picture === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod green :location ( l / picture :mod red :op1 ( s / on :direction ( b / left ) ) ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( r / straight ) :mode imperative ) === give
event mod through the mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :direction ( m /  mod ) :mode imperative ) === event spatial through the obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :direction ( s / spatial ) :mode imperative ) === go straight through the opening === ( t / go :arg0 ( y / you ) :path ( a / opening :op1 ( th / through ) ) :direction ( s / straight ) :mode imperative ) === give
event mod through === ( e /  event :arg0 ( VAR / person ) :path ( VAR / through :mod mod ) :mode imperative ) === event modifier through === ( t / event :arg0 ( y / person ) :path ( a / through :mod modifier ) :mode imperative ) === go straight through === ( t / go :arg0 ( y / you ) :path ( a / through :mod straight ) :mode imperative ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === click the red button === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod red ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
wait sorry event back mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === wait sorry event back spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === wait sorry turn back around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event to the mod mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / ( ) :mod mod ) :mode imperative ) === event to the modifier obj === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / to ) :mod modifier ) :mode imperative ) === go to the next room === ( t / go :arg0 ( y / you ) :destination ( r / room :op1 ( t1 / to ) :mod next ) :mode imperative ) === give
mod mod === ( e /  event :direction ( m /  mod :mod mod ) ) === modifier spatial === ( e / event :direction ( r / spatial :mod modifier ) ) === straight ahead === ( e / event :direction ( r / ahead :mod straight ) ) === give
event on the mod mod to the mod of the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :mod mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === event on the modifier obj to the spatial of the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :mod modifier :op1 ( s / to :direction ( b / spatial ) ) ) ) :mode imperative ) === click on the green button to the left of the lamp === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod green :location ( l / lamp :mod red :op1 ( s / to :direction ( b / left ) ) ) ) :mode imperative ) === give
event to the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event to the spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn to the right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
event a mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event a spatial === ( t / event :arg0 ( y / person ) :arg1 ( r / spatial ) :mode imperative ) === make a left === ( t / make :arg0 ( y / you ) :arg1 ( r / left ) :mode imperative ) === give
event a right === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event a right === ( t / event :arg0 ( y / person ) :arg1 ( r / spatial ) :mode imperative ) === make a right === ( t / make :arg0 ( y / you ) :arg1 ( r / left ) :mode imperative ) === give
the same set of 2 mod buttons event the mod on the mod mod to the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :mod mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === the same set of 2 modifier buttons event the obj on the modifier, spatial to the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :mod modifier :op1 ( s / to :direction ( b / spatial ) ) ) ) :mode imperative ) === the same set of 2 red buttons click the one on the right, closer to the chair === ( p / click :arg0 ( y / you ) :arg1 ( q / one :mod right :location ( l / chair :mod red :op1 ( s / to :direction ( b / closer ) ) ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event a mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event a spatial === ( t / event :arg0 ( y / person ) :arg1 ( r / spatial ) :mode imperative ) === make a left === ( t / make :arg0 ( y / you ) :arg1 ( r / left ) :mode imperative ) === give
event through the mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :direction ( m /  mod ) :mode imperative ) === event through the obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :direction ( s / spatial ) :mode imperative ) === go through the opening === ( t / go :arg0 ( y / you ) :path ( a / opening :op1 ( th / through ) ) :direction ( s / straight ) :mode imperative ) === give
event the mod mod on the mod side of the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / on :direction ( ( / mod ) ) ) ) :mode imperative ) === event the modifier obj, on the spatial side of the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :op1 ( s / on :direction ( b / spatial ) ) ) ) :mode imperative ) === click the green box, on the left side of the lamp === ( p / click :arg0 ( y / you ) :arg1 ( q / box :mod green :location ( l / lamp :op1 ( s / on :direction ( b / left ) ) ) ) :mode imperative ) === give
event through the mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :direction ( m /  mod ) :mode imperative ) === event through the obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :direction ( s / spatial ) :mode imperative ) === go through the opening === ( t / go :arg0 ( y / you ) :path ( a / opening :op1 ( th / through ) ) :direction ( s / straight ) :mode imperative ) === give
event that right === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event that right === ( t / event :arg0 ( y / person ) :arg1 ( r / spatial ) :mode imperative ) === make that right === ( t / make :arg0 ( y / you ) :arg1 ( r / left ) :mode imperative ) === give
ok person event to event the green mod person see to personr mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :direction ( m /  mod ) ) ) ) === ok person event to event the green obj person see to personr spatial === ( w / event :arg0 ( y / person ) :arg1 ( g / event :arg0 ( y / person ) :arg1 ( o / obj :direction ( l / spatial ) ) ) ) === ok you need to press the green button you see to your left === ( w / need :arg0 ( y / you ) :arg1 ( g / press :arg0 ( y / you ) :arg1 ( o / button :direction ( l / left ) ) ) ) === give
temporal event mod and event through the mod on personr mod === ( VAR / and :op1 ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) :op2 ( ( / event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :direction ( m /  mod ) :mode imperative ) ) === temporal event spatial and event through the obj on personr spatial === ( s / and :op1 ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) :op2 ( t1 / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :direction ( s / spatial ) :mode imperative ) ) === now turn around and go through the passage on your left === ( s / and :op1 ( t / turn :time ( m / now ) :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) :op2 ( t1 / go :arg0 ( y / you ) :path ( a / passage :op1 ( th / through ) ) :direction ( s / left ) :mode imperative ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
okay keep going === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === okay keep going === ( t / event :arg0 ( y / person ) :mode imperative ) === okay keep going === ( t / keep-going :arg0 ( y / you ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go right === ( t / go :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
okay event to the mod of the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :prep-of ( m /  mod ) :mode imperative ) === okay event to the spatial of the obj === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :prep-of ( c / obj ) :mode imperative ) === okay go to the left of the chair === ( t / go :arg0 ( y / you ) :direction ( a / left ) :prep-of ( c / chair ) :mode imperative ) === give
event the mod on the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) === event the obj on the spatial === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / spatial :op1 ( o / on ) ) ) :mode imperative ) === push the button on the right === ( p / push :arg0 ( y / you ) :arg1 ( q / button :mod green :location ( l / right :op1 ( o / on ) ) ) :mode imperative ) === give
okay temporal event mod to where person came from === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative :path ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) ) === okay temporal event spatial to where person came from === ( e / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative :path ( w / obj :arg1-of ( c / event :arg0 ( y / person ) ) ) ) === okay now go back to where you came from === ( e / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / back ) :mode imperative :path ( w / way :arg1-of ( c / come :arg0 ( y / you ) ) ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go right === ( t / go :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event the mod mod on the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) === event the modifier obj on the spatial === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / spatial :op1 ( o / on ) ) ) :mode imperative ) === push the green button on the left === ( p / push :arg0 ( y / you ) :arg1 ( q / button :mod green :location ( l / left :op1 ( o / on ) ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
keep going === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === keep going === ( t / event :arg0 ( y / person ) :mode imperative ) === keep going === ( t / keep-going :arg0 ( y / you ) :mode imperative ) === give
event mod to see the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod ) :mode imperative ) === event spatial to see the obj === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( w / obj ) :mode imperative ) === turn right to see the wall === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :destination ( w / wall ) :mode imperative ) === give
event the 1st mod on the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) === event the 1st obj on the spatial === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / spatial :op1 ( o / on ) ) ) :mode imperative ) === push the 1st button on the right === ( p / push :arg0 ( y / you ) :arg1 ( q / button :mod first :location ( l / right :op1 ( o / on ) ) ) :mode imperative ) === give
event into the mod mod mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / into ) :mod mod ) :direction ( m /  mod ) :mode imperative ) === event into the modifier obj spatial === ( t / event :arg0 ( y / person ) :destination ( a / obj :op1 ( th / into ) :mod modifier ) :direction ( s / spatial ) :mode imperative ) === go into the other room ahead === ( t / go :arg0 ( y / you ) :destination ( a / room :op1 ( th / into ) :mod other ) :direction ( s / ahead ) :mode imperative ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === press the red button === ( p / press :arg0 ( y / you ) :arg1 ( q / button :mod red ) :mode imperative ) === give
event mod to the mod person were just in === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative :destination ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) ) === event spatial to the obj person were just in === ( e / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative :destination ( w / obj :arg1-of ( c / event :arg0 ( y / person ) ) ) ) === go back to the room you were just in === ( e / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / back ) :mode imperative :destination ( w / room :arg1-of ( c / be :arg0 ( y / you ) ) ) ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === push the green button === ( p / push :arg0 ( y / you ) :arg1 ( q / button :mod green ) :mode imperative ) === give
event mod to the mod mod with the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( VAR / into ) :mod mod :prep-with ( m /  mod ) ) :mode imperative ) === event spatial to the modifier obj with the obj === ( t / event :arg0 ( y / person ) :direction ( s / spatial ) :destination ( a / obj :op1 ( th / into ) :mod modifier :prep-with ( c / obj ) ) :mode imperative ) === go back to the first room with the chair === ( t / go :arg0 ( y / you ) :direction ( s / back ) :destination ( a / room :op1 ( th / into ) :mod first :prep-with ( c / chair ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
to the mod of the mod === ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) === to the spatial of the obj === ( l / obj :op1 ( s / to :direction ( b / spatial ) ) ) === to the left of the chair === ( l / chair :op1 ( s / to :direction ( b / left ) ) ) === give
event the mod on the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :location ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) === event the obj on the spatial === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :location ( l / spatial :op1 ( i / on ) ) ) :mode imperative ) === push the button on the right === ( p / push :arg0 ( y / you ) :arg1 ( q / button :location ( l / right :op1 ( i / on ) ) ) :mode imperative ) === give
okay event mod how person just came === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative :path ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) ) === okay event spatial how person just came === ( e / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative :path ( w / obj :arg1-of ( c / event :arg0 ( y / person ) ) ) ) === okay go back how you just came === ( e / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / back ) :mode imperative :path ( w / way :arg1-of ( c / come :arg0 ( y / you ) ) ) ) === give
event through the mod mod and event mod === ( VAR / and :op1 ( ( / event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) :mod mod ) :mode imperative ) :op2 ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) ) === event through the modifier obj and event spatial === ( s / and :op1 ( t1 / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) :mod modifier ) :mode imperative ) :op2 ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) ) === go through the next room and turn right === ( s / and :op1 ( t1 / go :arg0 ( y / you ) :path ( a / room :op1 ( th / through ) :mod next ) :mode imperative ) :op2 ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) ) === give
okay the mod is mod the mod event the mod mod to mod it === ( VAR / and :op1 ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :prep-to ( m /  mod ) ) :mode imperative ) :op2 ( m /  mod :location ( m /  mod :op1 ( ( / mod ) ) ) ) === okay the obj is spatial the obj, event the modifier obj to property it === ( s / and :op1 ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :prep-to ( o / property ) ) :mode imperative ) :op2 ( l / obj :location ( l / obj :op1 ( b / spatial ) ) ) ) === okay the safe is behind the picture, push the blue button to open it === ( s / and :op1 ( p / push :arg0 ( y / you ) :arg1 ( q / button :mod blue :prep-to ( o / open ) ) :mode imperative ) :op2 ( l / safe :location ( l / picture :op1 ( b / behind ) ) ) ) === give
event the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ) :mode imperative ) === press the safe === ( p / press :arg0 ( y / you ) :arg1 ( q / safe ) :mode imperative ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === press the green button === ( p / press :arg0 ( y / you ) :arg1 ( q / button :mod green ) :mode imperative ) === give
ok first person event to event, event to the end of this room and event mod === ( VAR / list :op1 ( e /  event :arg0 ( VAR / person ) :arg1 ( e /  event :arg0 ( VAR / person ) ) ) :op2 ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / ( ) ) :mode imperative ) :op3 ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) ) === ok first person event to event, event to the end of this room and event spatial === ( s / list :op1 ( w / event :arg0 ( y / person ) :arg1 ( g / event :arg0 ( y / person ) ) ) :op2 ( p / event :arg0 ( y / person ) :destination ( q / obj :op1 ( e / to ) ) :mode imperative ) :op3 ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) ) === ok first you need to disalarm, walk to the end of this room and turn left === ( s / list :op1 ( w / need :arg0 ( y / you ) :arg1 ( g / disalarm :arg0 ( y / you ) ) ) :op2 ( p / walk :arg0 ( y / you ) :destination ( q / end-of-room :op1 ( e / to ) ) :mode imperative ) :op3 ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) ) === give
event mod to mod person evented === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) :mode imperative ) === event spatial to spatial person evented === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :destination ( w / spatial :arg1-of ( c / event :arg0 ( y / person ) ) ) :mode imperative ) === go back to where you started === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / back ) :destination ( w / where :arg1-of ( c / start :arg0 ( y / you ) ) ) :mode imperative ) === give
event the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event the property === ( p / event :arg0 ( y / person ) :arg1 ( q / property ) :mode imperative ) === push the green === ( p / push :arg0 ( y / you ) :arg1 ( q / green ) :mode imperative ) === give
mod mod === ( e /  event :direction ( m /  mod :mod mod ) ) === modifier spatial === ( e / event :direction ( r / spatial :mod modifier ) ) === straight ahead === ( e / event :direction ( r / ahead :mod straight ) ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === click the green button === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod green ) :mode imperative ) === give
event to the mod with the mod === ( ( / event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / ( ) :prep-with ( ( / mod ) ) :mode imperative ) === event to the obj with the obj === ( t1 / event :arg0 ( y / person ) :destination ( a / obj :op1 ( th / to ) :prep-with ( pl / obj ) ) :mode imperative ) === go to the room with the plant === ( t1 / go :arg0 ( y / you ) :destination ( a / room :op1 ( th / to ) :prep-with ( pl / plant ) ) :mode imperative ) === give
here person will event 3 mod number mod === ( VAR / list :op1 ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :quant 3 ) ) :op2 ( e /  event :time ( VAR / number ) :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) ) === here person will event 3 objs number property === ( s / list :op1 ( p / event :arg0 ( y / person ) :arg1 ( q / obj :quant 3 ) ) :op2 ( p1 / event :time ( m / number ) :arg0 ( y / person ) :arg1 ( q1 / property ) ) ) === here you will click 3 buttons first yellow === ( s / list :op1 ( p / click :arg0 ( y / you ) :arg1 ( q / button :quant 3 ) ) :op2 ( p1 / event :time ( m / first ) :arg0 ( y / you ) :arg1 ( q1 / yellow ) ) ) === give
temporal the mod on the mod by the mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / VAR :direction ( ( / mod ) ) ) ) :mode imperative ) === temporal the modifier on the spatial by the obj === ( p / event :time ( m / temporal ) :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :op1 ( s / by :direction ( b / spatial ) ) ) ) :mode imperative ) === now the red on the left by the plant === ( p / event :time ( m / now ) :arg0 ( y / you ) :arg1 ( q / button :mod red :location ( l / plant :op1 ( s / by :direction ( b / left ) ) ) ) :mode imperative ) === give
on the mod by the mod === ( m /  mod :op1 ( VAR / VAR :direction ( ( / mod ) ) :mode imperative ) === on the spatial by the obj === ( l / obj :op1 ( s / by :direction ( b / spatial ) ) :mode imperative ) === on the left by the plant === ( l / plant :op1 ( s / by :direction ( b / left ) ) :mode imperative ) === give
event the mod mod to the mod of mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / VAR :direction ( ( / mod ) ) ) ) :mode imperative ) === event the modifier obj to the spatial of property === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / property :op1 ( s / by :direction ( b / spatial ) ) ) ) :mode imperative ) === click the blue button to the left of yellow === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod blue :location ( l / yellow :op1 ( s / by :direction ( b / left ) ) ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
event mod into the mod ahead === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( VAR / into ) ) :mode imperative ) === event spatial into the obj ahead === ( e / event :arg0 ( y / person ) :direction ( r / spatial ) :destination ( r / obj :op1 ( i / into ) ) :mode imperative ) === turn right into the room ahead === ( e / turn :arg0 ( y / you ) :direction ( r / right ) :destination ( r / room :op1 ( i / into ) ) :mode imperative ) === give
event to the mod mod === ( e /  event :destination ( m /  mod :op1 ( ( / ( ) :mod mod ) :mode imperative ) === event to the modifier obj === ( e / event :destination ( r / obj :op1 ( t1 / to ) :mod modifier ) :mode imperative ) === go to the back wall === ( e / go :destination ( r / wall :op1 ( t1 / to ) :mod back ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
event the mod button mod the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :location ( m /  mod :op1 ( m /  mod ) ) ) :mode imperative ) === event the property button spatial the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / property :location ( c / obj :op1 ( n2 / spatial ) ) ) :mode imperative ) === push the green button near the chair === ( p / push :arg0 ( y / you ) :arg1 ( q / green :location ( c / chair :op1 ( n2 / near ) ) ) :mode imperative ) === give
event mod the mod person came === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :path ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) :mode imperative ) === event spatial the obj person came === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :path ( w / obj :arg1-of ( c / event :arg0 ( y / person ) ) ) :mode imperative ) === go back the way you came === ( t / go :arg0 ( y / you ) :direction ( a / back ) :path ( w / way :arg1-of ( c / come :arg0 ( y / you ) ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
ok now event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === ok now event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === ok now hit the yellow button === ( p / hit :arg0 ( y / you ) :arg1 ( q / button :mod yellow ) :mode imperative ) === give
mod the mod person came === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :path ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) :mode imperative ) === spatial the obj person came === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :path ( w / obj :arg1-of ( c / event :arg0 ( y / person ) ) ) :mode imperative ) === back the way you came === ( t / event :arg0 ( y / you ) :direction ( a / back ) :path ( w / way :arg1-of ( c / come :arg0 ( y / you ) ) ) :mode imperative ) === give
event the mod mod to the mod of the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :location ( m /  mod :mod mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) :mode imperative ) === event the modifier obj to the spatial of the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :location ( l / obj :mod modifier :op1 ( s / to :direction ( b / spatial ) ) ) :mode imperative ) === click the blue button to the left of the lamp === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod blue ) :location ( l / lamp :mod red :op1 ( s / to :direction ( b / left ) ) ) :mode imperative ) === give
event mod to event mod temporal === ( VAR / list :op1 ( e /  event :arg0 ( VAR / person ) :mod mod :mode imperative ) :op2 ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :time ( VAR / temporal ) :mode imperative ) ) === event modifier to event obj temporal === ( s / list :op1 ( t / event :arg0 ( y / person ) :mod modifier :mode imperative ) :op2 ( p / event :arg0 ( y / person ) :arg1 ( q / obj ) :time ( m / temporal ) :mode imperative ) ) === get closer to hit it again === ( s / list :op1 ( t / get :arg0 ( y / you ) :mod closer :mode imperative ) :op2 ( p / hit :arg0 ( y / you ) :arg1 ( q / it ) :time ( m / again ) :mode imperative ) ) === give
once more === ( m /  mod ) === once more === ( m / property ) === once more === ( m / once-more ) === give
ok temporal event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === ok temporal event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === ok now turn right === ( t / turn :time ( m / now ) :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event the mod temporal === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :time ( VAR / temporal ) :mode imperative ) === event the property temporal === ( p / event :arg0 ( y / person ) :arg1 ( q / property ) :time ( m / temporal ) :mode imperative ) === hit the blue again === ( p / hit :arg0 ( y / you ) :arg1 ( q / blue ) :time ( m / again ) :mode imperative ) === give
event the mod mod by the chair === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( ( / VAR ) ) ) :mode imperative ) === event the modifier obj by the chair === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( tr / obj :op1 ( b / by ) ) ) :mode imperative ) === hit the red button by the chair === ( p / hit :arg0 ( y / you ) :arg1 ( q / button :mod red :location ( tr / trophy :op1 ( b / by ) ) ) :mode imperative ) === give
ok temporal person event the mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === ok temporal person event the obj === ( p / event :time ( m / temporal ) :arg0 ( y / person ) :arg1 ( q / obj ) :mode imperative ) === ok now we get the trophy === ( p / get :time ( m / now ) :arg0 ( y / we ) :arg1 ( q / trophy ) :mode imperative ) === give
through to the mod mod === ( e /  event :arg0 ( VAR / person ) :path ( VAR / through ) :destination ( m /  mod :op1 ( VAR / ( ) :mod mod ) :mode imperative ) === through to the modifier obj === ( t / event :arg0 ( y / person ) :path ( th / through ) :destination ( a / obj :op1 ( th / to ) :mod modifier ) :mode imperative ) === through to the next room === ( t / event :arg0 ( y / you ) :path ( th / through ) :destination ( a / room :op1 ( th / to ) :mod next ) :mode imperative ) === give
event mod to the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :location ( m /  mod :op1 ( ( / ( ) ) :mode imperative ) === event spatial to the spatial === ( e / event :arg0 ( y / person ) :direction ( r / spatial ) :location ( l / spatial :op1 ( t1 / to ) ) :mode imperative ) === go straight to the left === ( e / go :arg0 ( y / you ) :direction ( r / straight ) :location ( l / left :op1 ( t1 / to ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ) :mode imperative ) === click it === ( p / click :arg0 ( y / you ) :arg1 ( q / it ) :mode imperative ) === give
ok event through the mod on personr mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :direction ( m /  mod ) :mode imperative ) === ok event through the obj on personr spatial === ( t / event :arg0 ( y / person ) :path ( th / obj :op1 ( th / through ) ) :direction ( a / spatial ) :mode imperative ) === ok go through the passageway on your right === ( t / go :arg0 ( y / you ) :path ( th / passageway :op1 ( th / through ) ) :direction ( a / right ) :mode imperative ) === give
event to the mod mod in the mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / ( ) :mod mod :location ( m /  mod :op1 ( VAR / VAR ) ) ) :mode imperative ) === event to the modifier obj in the obj === ( t / event :arg0 ( y / person ) :destination ( th / obj :op1 ( t1 / to ) :mod modifier :location ( r / obj :op1 ( i1 / in ) ) ) :mode imperative ) === go to the far corner in the room === ( t / go :arg0 ( y / you ) :destination ( th / corner :op1 ( t1 / to ) :mod far :location ( r / room :op1 ( i1 / in ) ) ) :mode imperative ) === give
event the mod mod on the mod mod as the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :mod mod :op1 ( VAR / on ) :prep-as ( m /  mod ) ) ) :mode imperative ) === event the modifier obj on the modifier obj as the property === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :mod modifier :op1 ( o / on ) :prep-as ( gr / property ) ) ) :mode imperative ) === click the blue button on the same wall as the green === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod blue :location ( l / wall :mod same :op1 ( o / on ) :prep-as ( gr / green ) ) ) :mode imperative ) === give
event mod to the mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :mod mod :op1 ( ( / ( ) ) :mode imperative ) === event spatial to the modifier obj === ( e / event :arg0 ( y / person ) :direction ( r / spatial ) :destination ( l / obj :mod modifier :op1 ( t1 / to ) ) :mode imperative ) === go back to the first room === ( e / go :arg0 ( y / you ) :direction ( r / back ) :destination ( l / room :mod first :op1 ( t1 / to ) ) :mode imperative ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === click the green button === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod green ) :mode imperative ) === give
mod through to the mod mod === ( e /  event :direction ( m /  mod ) :path ( VAR / through ) :destination ( m /  mod :mod mod :op1 ( ( / ( ) ) :mode imperative ) === spatial through to the modifier obj === ( e / event :direction ( r / spatial ) :path ( th / through ) :destination ( l / obj :mod modifier :op1 ( t1 / to ) ) :mode imperative ) === straight through to the next room === ( e / event :direction ( r / straight ) :path ( th / through ) :destination ( l / room :mod next :op1 ( t1 / to ) ) :mode imperative ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === click the blue button === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod blue ) :mode imperative ) === give
event the mod to event === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :prep-to ( e /  event ) :mode imperative ) === event the modifier to event === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :prep-to ( di / event ) :mode imperative ) === click the yellow to disalarm === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod yellow ) :prep-to ( di / disalarm ) :mode imperative ) === give
event the mod on personr mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( ( / mod :op1 ( VAR / on ) ) ) :mode imperative ) === event the modifier on personr spatial === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( ri / spatial :op1 ( o / on ) ) ) :mode imperative ) === click the blue on your right === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod blue :location ( ri / right :op1 ( o / on ) ) ) :mode imperative ) === give
event mod to the mod mod of the room === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :mod mod :op1 ( ( / ( ) ) :mode imperative ) === event spatial to the modifier obj of the room === ( e / event :arg0 ( y / person ) :direction ( r / spatial ) :destination ( os / obj :mod modifier :op1 ( t1 / to ) ) :mode imperative ) === turn around to the other side of the room === ( e / turn :arg0 ( y / you ) :direction ( r / around ) :destination ( os / side :mod other :op1 ( t1 / to ) ) :mode imperative ) === give
event through the mod on the mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :direction ( m /  mod ) :mode imperative ) === event through the obj on the spatial === ( e / event :arg0 ( y / person ) :path ( r / obj :op1 ( th / through ) ) :direction ( l / spatial ) :mode imperative ) === go through the passage on the right === ( e / go :arg0 ( y / you ) :path ( r / passage :op1 ( th / through ) ) :direction ( l / right ) :mode imperative ) === give
event the mod on the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :location ( ( / mod :op1 ( VAR / on ) ) ) :mode imperative ) === event the property on the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / property :location ( ri / obj :op1 ( o / on ) ) ) :mode imperative ) === click the blue on the wall === ( p / click :arg0 ( y / you ) :arg1 ( q / blue :location ( ri / wall :op1 ( o / on ) ) ) :mode imperative ) === give
straight through this mod to the mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :destination ( m /  mod :op1 ( ( / ( ) ) :mode imperative ) === straight through this obj to the property === ( e / event :arg0 ( y / person ) :path ( r / obj :op1 ( th / through ) ) :destination ( l / property :op1 ( t1 / to ) ) :mode imperative ) === straight through this room to the next === ( e / event :arg0 ( y / you ) :path ( r / room :op1 ( th / through ) ) :destination ( l / next :op1 ( t1 / to ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === ahead === ( e / event :direction ( r / ahead ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
ok event the mod mod to the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === ok event the property property to the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / property :location ( l / obj :op1 ( s / to :direction ( b / property ) ) ) ) :mode imperative ) === ok click the blue next to the chair === ( p / click :arg0 ( y / you ) :arg1 ( q / blue :location ( l / chair :op1 ( s / to :direction ( b / next ) ) ) ) :mode imperative ) === give
temporal event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === temporal event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === now go straight === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
event the mod mod on the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :mod mod :op1 ( VAR / on ) ) ) :mode imperative ) === event the modifier obj on the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :mod modifier :op1 ( s / on ) ) ) :mode imperative ) === click the red button on the lamp wall === ( p / click :arg0 ( y / you ) :arg1 ( q / button :mod red :location ( l / wall :mod lamp :op1 ( s / on ) ) ) :mode imperative ) === give
at the mod === ( e /  event :location ( m /  mod :op1 ( VAR / at ) ) ) === at the obj === ( e / event :location ( r / obj :op1 ( a / at ) ) ) === at the corner === ( e / event :location ( r / corner :op1 ( a / at ) ) ) === give
ok temporal event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === ok temporal event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === ok now turn right === ( t / turn :time ( m / now ) :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
to the mod === ( e /  event :destination ( m /  mod :op1 ( ( / ( ) ) ) === to the obj === ( e / event :destination ( r / obj :op1 ( t1 / to ) ) ) === to the wall === ( e / event :destination ( r / wall :op1 ( t1 / to ) ) ) === give
event the mod directly in mod of person === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :location ( m /  mod :op1 ( VAR / VAR ) ) ) :mode imperative ) === event the obj directly in spatial of person === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :location ( l / spatial :op1 ( s / in ) ) ) :mode imperative ) === click the button directly in front of you === ( p / click :arg0 ( y / you ) :arg1 ( q / button :location ( l / front :op1 ( s / in ) ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
nope event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === nope event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === nope go back === ( t / go :arg0 ( y / you ) :direction ( a / back ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
press the mod button mod to the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === press the property button property to the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / property :location ( l / obj :op1 ( s / to :direction ( b / property ) ) ) ) :mode imperative ) === press the blue button next to the lamp === ( p / click :arg0 ( y / you ) :arg1 ( q / blue :location ( l / lamp :op1 ( s / to :direction ( b / next ) ) ) ) :mode imperative ) === give
press the mod button on the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :location ( m /  mod :op1 ( VAR / on ) ) ) :mode imperative ) === press the property button on the spatial === ( p / event :arg0 ( y / person ) :arg1 ( q / property :location ( l / spatial :op1 ( s / on ) ) ) :mode imperative ) === press the blue button on the right === ( p / click :arg0 ( y / you ) :arg1 ( q / blue :location ( l / right :op1 ( s / on ) ) ) :mode imperative ) === give
press the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === press the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === press the green one === ( p / click :arg0 ( y / you ) :arg1 ( q / one :mod green ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go back === ( t / go :arg0 ( y / you ) :direction ( a / back ) :mode imperative ) === give
mod mod === ( m /  mod :domain ( m /  mod ) :mod mod ) === modifier obj === ( q / obj :domain ( t / obj ) :mod modifier ) === that one === ( q / one :domain ( t / entity ) :mod that ) === give
event the mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === press the green button === ( p / press :arg0 ( y / you ) :arg1 ( q / button :mod green ) :mode imperative ) === give
mod === ( m /  mod :domain ( m /  mod ) ) === property === ( q / property :domain ( t / obj ) ) === yellow === ( q / yellow :domain ( t / entity ) ) === give
mod mod behind mod to the mod === ( m /  mod :domain ( m /  mod ) :mod mod :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) === modifier obj behind property to the obj === ( q / obj :domain ( t / obj ) :mod modifier :location ( l / obj :op1 ( s / to :direction ( b / property ) ) ) ) === red one behind next to the plant === ( q / one :domain ( t / entity ) :mod red :location ( l / plant :op1 ( s / to :direction ( b / next ) ) ) ) === give
mod mod mod to the mod mod === ( m /  mod :domain ( m /  mod ) :mod mod :location ( m /  mod :mod mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) === modifier obj property to the modifier obj === ( q / obj :domain ( t / obj ) :mod modifier :location ( l / obj :mod modifier :op1 ( s / to :direction ( b / property ) ) ) ) === blue one next to the yellow one === ( q / one :domain ( t / entity ) :mod blue :location ( l / one :mod yellow :op1 ( s / to :direction ( b / next ) ) ) ) === give
event the mod mod mod to the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === event the modifier obj property to the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier :location ( l / obj :op1 ( s / to :direction ( b / property ) ) ) ) :mode imperative ) === press the green one next to the chair === ( p / press :arg0 ( y / you ) :arg1 ( q / one :mod green :location ( l / chair :op1 ( s / to :direction ( b / next ) ) ) ) :mode imperative ) === give
event mod to the mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( ( / ( ) :mod mod ) :mode imperative ) === event spatial to the modifier obj === ( e / event :arg0 ( y / person ) :direction ( r / spatial ) :destination ( l / obj :op1 ( t1 / to ) :mod modifier ) :mode imperative ) === go back to the plant room === ( e / go :arg0 ( y / you ) :direction ( r / back ) :destination ( l / room :op1 ( t1 / to ) :mod plant ) :mode imperative ) === give
mod mod === ( m /  mod :domain ( m /  mod ) :mod mod ) === modifier obj === ( q / obj :domain ( t / obj ) :mod modifier ) === yellow button === ( q / button :domain ( t / entity ) :mod yellow ) === give
mod mod mod to the mod mod === ( m /  mod :domain ( m /  mod ) :mod mod :location ( m /  mod :mod mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) === modifier obj property to the modifier obj === ( q / obj :domain ( t / obj ) :mod modifier :location ( l / obj :mod modifier :op1 ( s / to :direction ( b / property ) ) ) ) === red button next to the blue button === ( q / button :domain ( t / entity ) :mod red :location ( l / button :mod blue :op1 ( s / to :direction ( b / next ) ) ) ) === give
keep going === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === keep going === ( t / event :arg0 ( y / person ) :mode imperative ) === keep going === ( t / keep-going :arg0 ( y / you ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
mod mod on mod === ( m /  mod :domain ( m /  mod ) :mod mod :location ( m /  mod :mod mod :op1 ( VAR / on ) ) ) === modifier obj on spatial === ( q / obj :domain ( t / obj ) :mod modifier :location ( l / spatial :mod modifier :op1 ( s / on ) ) ) === green button on left === ( q / button :domain ( t / entity ) :mod green :location ( l / left :mod yellow :op1 ( s / on ) ) ) === give
mod mod === = ( m /  mod :domain ( m /  mod ) :mod mod ) === modifier obj === = ( q / obj :domain ( t / obj ) :mod modifier ) === right one === = ( q / one :domain ( t / entity ) :mod right ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go left === ( t / go :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
mod mod from mod === ( m /  mod :domain ( m /  mod ) :mod mod :source ( m /  mod :mod mod :op1 ( VAR / from ) ) ) === modifier obj from spatial === ( q / obj :domain ( t / obj ) :mod modifier :source ( l / spatial :mod modifier :op1 ( s / from ) ) ) === second button from left === ( q / button :domain ( t / entity ) :mod second :source ( l / left :mod yellow :op1 ( s / from ) ) ) === give
mod to mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( ( / ( ) :mod mod ) :mode imperative ) === spatial to modifier obj === ( e / event :arg0 ( y / person ) :direction ( r / spatial ) :destination ( l / obj :op1 ( t1 / to ) :mod modifier ) :mode imperative ) === back to first room === ( e / event :arg0 ( y / you ) :direction ( r / back ) :destination ( l / room :op1 ( t1 / to ) :mod first ) :mode imperative ) === give
mod on mod === ( m /  mod :domain ( m /  mod ) :location ( m /  mod ) ) === obj on spatial === ( q / obj :domain ( t / obj ) :location ( l / spatial ) ) === button on right === ( q / button :domain ( t / entity ) :location ( l / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
keep going === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === keep going === ( t / event :arg0 ( y / person ) :mode imperative ) === keep going === ( t / keep-going :arg0 ( y / you ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
mod mod === ( m /  mod :domain ( m /  mod ) :mod mod ) === modifier obj === ( q / obj :domain ( t / obj ) :mod modifier ) === right one === ( q / one :domain ( t / entity ) :mod right ) === give
all the way === ( e /  event :arg0 ( VAR / person ) :extent ( m /  mod ) :mode imperative ) === all the way === ( t / event :arg0 ( y / person ) :extent ( a / property ) :mode imperative ) === all the way === ( t / event :arg0 ( y / you ) :extent ( a / all-the-way ) :mode imperative ) === give
mod mod === ( m /  mod :domain ( m /  mod ) :mod mod ) === modifier obj === ( q / obj :domain ( t / obj ) :mod modifier ) === red one === ( q / one :domain ( t / entity ) :mod red ) === give
mod === ( m /  mod :domain ( m /  mod ) ) === property === ( q / property :domain ( t / obj ) ) === green === ( q / green :domain ( t / entity ) ) === give
event mod to mod with mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( ( / into ) :prep-with ( m /  mod ) ) :mode imperative ) === event spatial to obj with obj === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( r / obj :op1 ( t1 / into ) :prep-with ( ch / obj ) ) :mode imperative ) === go back to room with chair === ( t / go :arg0 ( y / you ) :direction ( a / back ) :destination ( r / room :op1 ( t1 / into ) :prep-with ( ch / chair ) ) :mode imperative ) === give
mod mod === ( m /  mod :domain ( m /  mod ) :mod mod ) === modifier obj === ( q / obj :domain ( t / obj ) :mod modifier ) === right path === ( q / path :domain ( t / entity ) :mod right ) === give
mod mod === ( m /  mod :domain ( m /  mod ) :mod mod ) === modifier obj === ( q / obj :domain ( t / obj ) :mod modifier ) === same button === ( q / button :domain ( t / entity ) :mod same ) === give
mod of mod === ( m /  mod :op1 ( VAR / of :direction ( ( / mod ) ) ) === spatial of obj === ( l / obj :op1 ( s / of :direction ( b / spatial ) ) ) === left of chair === ( l / chair :op1 ( s / of :direction ( b / left ) ) ) === give
event to mod and event mod mod === ( VAR / and :op1 ( ( / event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / into ) ) :mode imperative ) :op2 ( ( / event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) ) ) === event to obj and event modifier obj === ( s / and :op1 ( t1 / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / into ) ) :mode imperative ) :op2 ( t2 / event :arg0 ( y / person ) :arg1 ( l / obj :mod modifier ) ) ) === go to intersection and take left path === ( s / and :op1 ( t1 / go :arg0 ( y / you ) :destination ( r / intersection :op1 ( t1 / into ) ) :mode imperative ) :op2 ( t2 / take :arg0 ( y / you ) :arg1 ( l / path :mod left ) ) ) === give
event the mod button === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event the modifier button === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :mode imperative ) === hit the green button === ( p / hit :arg0 ( y / you ) :arg1 ( q / one :mod green ) :mode imperative ) === give
mod === ( m /  mod :domain ( m /  mod ) ) === property === ( q / property :domain ( t / obj ) ) === blue === ( q / blue :domain ( t / entity ) ) === give
mod mod === ( m /  mod :domain ( m /  mod ) :mod mod ) === modifier obj === ( q / obj :domain ( t / obj ) :mod modifier ) === that one === ( q / one :domain ( t / entity ) :mod that ) === give
mod mod mod to mod === ( m /  mod :domain ( m /  mod ) :mod mod :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) === modifier obj property to property === ( q / obj :domain ( t / obj ) :mod modifier :location ( l / property :op1 ( s / to :direction ( b / property ) ) ) ) === blue button next to green === ( q / button :domain ( t / entity ) :mod blue :location ( l / green :op1 ( s / to :direction ( b / next ) ) ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
mod mod === ( m /  mod :domain ( m /  mod ) :mod mod ) === modifier obj === ( q / obj :domain ( t / obj ) :mod modifier ) === green button === ( q / button :domain ( t / entity ) :mod green ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( t / event :arg0 ( y / person ) :mode imperative ) === go === ( t / go :arg0 ( y / you ) :mode imperative ) === give
mod mod === ( m /  mod :domain ( m /  mod ) :mod mod ) === modifier obj === ( q / obj :domain ( t / obj ) :mod modifier ) === yellow button === ( q / button :domain ( t / entity ) :mod yellow ) === give
event to mod mod to the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( ( / into ) :mod mod ) :mode imperative ) === event to modifier obj to the spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( r / obj :op1 ( t1 / into ) :mod modifier ) :mode imperative ) === go to next room to the left === ( t / go :arg0 ( y / you ) :direction ( a / left ) :destination ( r / room :op1 ( t1 / into ) :mod next ) :mode imperative ) === give
mod === ( m /  mod :domain ( m /  mod ) ) === property === ( q / property :domain ( t / obj ) ) === blue === ( q / blue :domain ( t / entity ) ) === give
mod === ( m /  mod :domain ( m /  mod ) ) === property === ( q / property :domain ( t / obj ) ) === blue === ( q / blue :domain ( t / entity ) ) === give
event all the way mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod :mod mod ) :mode imperative ) === event all the way spatial === ( t / event :arg0 ( y / person ) :direction ( s / spatial :mod modifier ) :mode imperative ) === go all the way straight === ( t / go :arg0 ( y / you ) :direction ( s / straight :mod all-the-way ) :mode imperative ) === give
all the way mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod :mod mod ) :mode imperative ) === all the way spatial === ( t / event :arg0 ( y / person ) :direction ( s / spatial :mod modifier ) :mode imperative ) === all the way down === ( t / event :arg0 ( y / you ) :direction ( s / down :mod all-the-way ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
mod === ( m /  mod :domain ( m /  mod ) ) === property === ( q / property :domain ( t / obj ) ) === blue === ( q / blue :domain ( t / entity ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod on mod === ( m /  mod :domain ( m /  mod ) :location ( m /  mod :op1 ( VAR / on ) ) ) === property on spatial === ( q / property :domain ( t / obj ) :location ( l / spatial :op1 ( o1 / on ) ) ) === red on left === ( q / red :domain ( t / entity ) :location ( l / left :op1 ( o1 / on ) ) ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( t / event :arg0 ( y / person ) :mode imperative ) === turn === ( t / turn :arg0 ( y / you ) :mode imperative ) === give
event mod to mod with mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( ( / ( ) :prep-with ( ( / mod ) ) :mode imperative ) === event spatial to obj with obj === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( r / obj :op1 ( t1 / to ) :prep-with ( a1 / obj ) ) :mode imperative ) === go back to room with alarms === ( t / go :arg0 ( y / you ) :direction ( a / back ) :destination ( r / room :op1 ( t1 / to ) :prep-with ( a1 / alarms ) ) :mode imperative ) === give
keep going === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === keep going === ( t / event :arg0 ( y / person ) :mode imperative ) === keep going === ( t / keep-going :arg0 ( y / you ) :mode imperative ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( t / event :arg0 ( y / person ) :mode imperative ) === turn === ( t / turn :arg0 ( y / you ) :mode imperative ) === give
event mod in the mod mod and event === ( VAR / and :op1 ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( ( / VAR ) :mod mod ) :mode imperative ) :op2 ( ( / event :arg0 ( VAR / person ) :mode imperative ) ) === event spatial in the modifier obj and event === ( s / and :op1 ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( r / obj :op1 ( t1 / in ) :mod modifier ) :mode imperative ) :op2 ( t1 / event :arg0 ( y / person ) :mode imperative ) ) === go back in the other room and stay === ( s / and :op1 ( t / go :arg0 ( y / you ) :direction ( a / back ) :destination ( r / room :op1 ( t1 / in ) :mod other ) :mode imperative ) :op2 ( t1 / stay :arg0 ( y / you ) :mode imperative ) ) === give
no the mod person were just in === ( m /  mod :domain ( m /  mod ) :arg1-of ( ( / event :arg0 ( VAR / person ) ) ) === no the obj person were just in === ( q / obj :domain ( t / obj ) :arg1-of ( b / event :arg0 ( y / person ) ) ) === no the room you were just in === ( q / room :domain ( t / entity ) :arg1-of ( b / be :arg0 ( y / you ) ) ) === give
selft === ( e /  event :direction ( m /  mod ) ) === selft === ( e / event :direction ( r / spatial ) ) === selft === ( e / event :direction ( r / left ) ) === give
event mod in mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( ( / ( ) ) :mode imperative ) === event spatial in obj === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( r / obj :op1 ( t1 / to ) ) :mode imperative ) === go back in room === ( t / go :arg0 ( y / you ) :direction ( a / back ) :destination ( r / room :op1 ( t1 / to ) ) :mode imperative ) === give
and event mod through the mod dor === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :path ( m /  mod :op1 ( ( / ( ) :mod mod ) :mode imperative ) === and event spatial through the modifier dor === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :path ( r / obj :op1 ( t1 / to ) :mod modifier ) :mode imperative ) === and go straight through the other dor === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :path ( r / door :op1 ( t1 / to ) :mod other ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go right === ( t / go :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
keft] === ( e /  event :direction ( m /  mod ) ) === keft] === ( e / event :direction ( r / spatial ) ) === keft] === ( e / event :direction ( r / left ) ) === give
go all the wa === ( e /  event :direction ( m /  mod ) ) === go all the wa === ( e / event :direction ( r / property ) ) === go all the wa === ( e / event :direction ( r / all-the-way ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
ok event mod and event mod into mod mod === ( VAR / and :op1 ( ( / event :arg0 ( VAR / person ) :direction ( ( / mod ) :path ( ( / mod :op1 ( ( / ( ) :mod mod ) :mode imperative ) :op2 ( ( / event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( ( / mod :op1 ( ( / ( ) :mod mod ) :mode imperative ) ) === ok event spatial and event spatial into modifier obj === ( s / and :op1 ( t2 / event :arg0 ( y / person ) :direction ( a1 / spatial ) :path ( r1 / obj :op1 ( t1 / to ) :mod modifier ) :mode imperative ) :op2 ( t3 / event :arg0 ( y / person ) :direction ( a2 / spatial ) :destination ( r2 / obj :op1 ( t5 / to ) :mod modifier ) :mode imperative ) ) === ok go out and go straight into far room === ( s / and :op1 ( t2 / go :arg0 ( y / you ) :direction ( a1 / out ) :path ( r1 / door :op1 ( t1 / to ) :mod other ) :mode imperative ) :op2 ( t3 / go :arg0 ( y / you ) :direction ( a2 / straight ) :destination ( r2 / room :op1 ( t5 / to ) :mod far ) :mode imperative ) ) === give
ok event mod in to the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( ( / ( ) :mod mod ) :mode imperative ) === ok event spatial in to the modifierobj === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( r / obj :op1 ( t1 / to ) :mod modifier ) :mode imperative ) === ok go out in to the nextroom === ( t / go :arg0 ( y / you ) :direction ( a / out ) :destination ( r / room :op1 ( t1 / to ) :mod next ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event obj === ( t / event :arg0 ( y / person ) :arg1 ( i / obj ) :mode imperative ) === click it === ( t / click :arg0 ( y / you ) :arg1 ( i / it ) :mode imperative ) === give
ok event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === ok event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === ok go right === ( t / go :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event obj === ( t / event :arg0 ( y / person ) :arg1 ( i / obj ) :mode imperative ) === get it === ( t / get :arg0 ( y / you ) :arg1 ( i / it ) :mode imperative ) === give
event into the mod that has the mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / into ) :arg1-of ( e /  event :arg0 ( m /  mod ) :arg1 ( m /  mod ) ) ) :mode imperative ) === event into the obj that has the obj === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / into ) :arg1-of ( h / event :arg0 ( r / obj ) :arg1 ( sh / obj ) ) ) :mode imperative ) === go into the room that has the shade === ( t / go :arg0 ( y / you ) :destination ( r / room :op1 ( t1 / into ) :arg1-of ( h / have :arg0 ( r / room ) :arg1 ( sh / shade ) ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) === event spatialk === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :mode imperative ) === go backk === ( t / go :arg0 ( y / you ) :direction ( b / back ) :mode imperative ) === give
into that mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / into ) ) :mode imperative ) === into that obj === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / into ) ) :mode imperative ) === into that room === ( t / event :arg0 ( y / you ) :destination ( r / room :op1 ( t1 / into ) ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod into that shade room === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( ( / into ) ) :mode imperative ) === spatial into that shade room === ( t / event :arg0 ( y / person ) :direction ( b1 / spatial ) :destination ( r / obj :op1 ( t1 / into ) ) :mode imperative ) === back into that shade room === ( t / event :arg0 ( y / you ) :direction ( b1 / back ) :destination ( r / shade-room :op1 ( t1 / into ) ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( b / straight ) :mode imperative ) === give
othjer way === ( e /  event :direction ( m /  mod ) ) === othjer way === ( e / event :direction ( r / obj ) ) === othjer way === ( e / event :direction ( r / other-way ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
temporal event into the shade room === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / into ) ) :mode imperative ) temporal take VAR left === temporal event into the shade room === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / into ) ) :mode imperative ) temporal take a left === now go into the shade room === ( t / go :time ( m / now ) :arg0 ( y / you ) :destination ( r / shade-room :op1 ( t1 / into ) ) :mode imperative ) now take a left === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === back === ( e / event :direction ( r / back ) ) === give
straighe and a mod === ( VAR / and :op1 ( ( / event :direction ( ( / mod ) ) :op2 ( e /  event :direction ( ( / mod ) ) ) === straighe and a spatialr === ( s / and :op1 ( e1 / event :direction ( r1 / spatial ) ) :op2 ( e2 / event :direction ( r2 / spatial ) ) ) === straighe and a leftr === ( s / and :op1 ( e1 / event :direction ( r1 / straight ) ) :op2 ( e2 / event :direction ( r2 / left ) ) ) === give
temporal event into the shade room === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / into ) ) :mode imperative ) temporal take VAR left === temporal event into the shade room === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / into ) ) :mode imperative ) temporal take a left === now go into the shade room === ( t / go :time ( m / now ) :arg0 ( y / you ) :destination ( r / shade-room :op1 ( t1 / into ) ) :mode imperative ) now take a left === give
into the room faer side === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / into ) ) :mod mod :mode imperative ) === into the room faer side === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / into ) ) :mod modifier :mode imperative ) === into the room faer side === ( t / event :arg0 ( y / you ) :destination ( r / shade-room :op1 ( t1 / into ) ) :mod far-side :mode imperative ) === give
no into shade room === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / into ) ) :mode imperative ) === no into shade room === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / into ) ) :mode imperative ) === no into shade room === ( t / event :arg0 ( y / you ) :destination ( r / shade-room :op1 ( t1 / into ) ) :mode imperative ) === give
then event a mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === then event a spatial === ( t / event :arg0 ( y / person ) :arg1 ( l / spatial ) ) === then take a left === ( t / take :arg0 ( y / you ) :arg1 ( l / left ) ) === give
mod into mod then mod === ( VAR / and :op1 ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( ( / into ) ) :mode imperative ) :op2 ( e /  event :direction ( m /  mod ) ) ) === spatial into obj then spatial === ( s / and :op1 ( t / event :arg0 ( y / person ) :direction ( b1 / spatial ) :destination ( r / obj :op1 ( t1 / into ) ) :mode imperative ) :op2 ( e / event :direction ( r / spatial ) ) ) === back into shade then left === ( s / and :op1 ( t / event :arg0 ( y / you ) :direction ( b1 / back ) :destination ( r / shade :op1 ( t1 / into ) ) :mode imperative ) :op2 ( e / event :direction ( r / left ) ) ) === give
did u event === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode interrogative ) === did u event === ( t / event :arg0 ( y / person ) :arg1 ( i / obj ) :mode interrogative ) === did u click === ( t / click :arg0 ( y / you ) :arg1 ( i / it ) :mode interrogative ) === give
u didnt cliock mod mman === ( e /  event :polarobjy - :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === u didnt cliock obj mman === ( t / event :polarobjy - :arg0 ( y / person ) :arg1 ( i / obj ) ) === u didnt cliock it mman === ( t / click :polarity - :arg0 ( y / you ) :arg1 ( i / it ) ) === give
u didnt event mod === ( e /  event :polarobjy - :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === u didnt event obj === ( t / event :polarobjy - :arg0 ( y / person ) :arg1 ( i / obj ) ) === u didnt click it === ( t / click :polarity - :arg0 ( y / you ) :arg1 ( i / it ) ) === give
temporal event === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === temporal event === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :arg1 ( i / obj ) :mode imperative ) === now click === ( t / click :time ( m / now ) :arg0 ( y / you ) :arg1 ( i / it ) :mode imperative ) === give
mod in the mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( ( / VAR ) :mod mod ) :mode imperative ) === spatial in the modifier obj === ( t / event :arg0 ( y / person ) :direction ( b1 / spatial ) :destination ( r / obj :op1 ( t1 / in ) :mod modifier ) :mode imperative ) === back in the previous room === ( t / event :arg0 ( y / you ) :direction ( b1 / back ) :destination ( r / room :op1 ( t1 / in ) :mod previous ) :mode imperative ) === give
temporal int he shade toom === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / VAR ) ) :mode imperative ) === temporal int he shade toom === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / in ) ) :mode imperative ) === now int he shade toom === ( t / event :time ( m / now ) :arg0 ( y / you ) :destination ( r / shade-room :op1 ( t1 / in ) ) :mode imperative ) === give
k eventod no event in to shade room === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / VAR ) ) :mode imperative ) === k eventod no event in to shade room === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / in ) ) :mode imperative ) === k good no go in to shade room === ( t / go :time ( m / now ) :arg0 ( y / you ) :destination ( r / shade-room :op1 ( t1 / in ) ) :mode imperative ) === give
and event a$mod541$ === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === and event aspatial === ( t / event :arg0 ( y / person ) :arg1 ( l / spatial ) ) === and take aright === ( t / take :arg0 ( y / you ) :arg1 ( l / right ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :mode imperative ) === go back === ( t / go :arg0 ( y / you ) :direction ( b / back ) :mode imperative ) === give
no ooppsite way === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) === no ooppsite way === ( t / event :arg0 ( y / person ) :direction ( b / obj ) :mode imperative ) === no ooppsite way === ( t / event :arg0 ( y / you ) :direction ( b / opposite-way ) :mode imperative ) === give
mod ibn the shade room temporal === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( ( / VAR ) ) :mode imperative ) === spatial ibn the shade room temporal === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( b1 / spatial ) :destination ( r / obj :op1 ( t1 / in ) ) :mode imperative ) === back ibn the shade room now === ( t / event :time ( m / now ) :arg0 ( y / you ) :direction ( b1 / back ) :destination ( r / shade-room :op1 ( t1 / in ) ) :mode imperative ) === give
into the mod that has the mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / into ) :arg1-of ( e /  event :arg0 ( ( / mod ) :arg1 ( m /  mod ) ) ) :mode imperative ) === into the obj that has the obj === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / into ) :arg1-of ( h / event :arg0 ( r1 / obj ) :arg1 ( ch / obj ) ) ) :mode imperative ) === into the room that has the chair === ( t / event :arg0 ( y / you ) :destination ( r / room :op1 ( t1 / into ) :arg1-of ( h / have :arg0 ( r1 / room ) :arg1 ( ch / chair ) ) ) :mode imperative ) === give
event temporal === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event temporal === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :arg1 ( i / obj ) :mode imperative ) === click again === ( t / click :time ( m / again ) :arg0 ( y / you ) :arg1 ( i / it ) :mode imperative ) === give
one more time === ( m /  mod ) === one more time === ( m / property ) === one more time === ( m / one-more-time ) === give
no into shade room the event === ( VAR / and :op1 ( ( / event :time ( VAR / temporal ) :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / VAR ) ) :mode imperative ) :op2 ( ( / event :arg0 ( VAR / person ) :mode imperative ) ) === no into shade room the event === ( s / and :op1 ( then / event :time ( m / temporal ) :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / in ) ) :mode imperative ) :op2 ( t2 / event :arg0 ( y / person ) :mode imperative ) ) === no into shade room the pause === ( s / and :op1 ( then / event :time ( m / now ) :arg0 ( y / you ) :destination ( r / shade-room :op1 ( t1 / in ) ) :mode imperative ) :op2 ( t2 / pause :arg0 ( y / you ) :mode imperative ) ) === give
temporal into the mod mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / into ) :mod mod ) :mode imperative ) === temporal into the modifier obj === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / into ) :mod modifier ) :mode imperative ) === now into the next one === ( t / event :time ( m / now ) :arg0 ( y / you ) :destination ( r / one :op1 ( t1 / into ) :mod next ) :mode imperative ) === give
temporal$mod541$ === ( e /  event :time ( VAR / temporal ) :direction ( m /  mod ) ) === temporalspatial === ( e / event :time ( m / temporal ) :direction ( r / spatial ) ) === nowleft === ( e / event :time ( m / now ) :direction ( r / left ) ) === give
into shade room === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / VAR ) ) :mode imperative ) === into shade room === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / in ) ) :mode imperative ) === into shade room === ( t / event :arg0 ( y / you ) :destination ( r / shade-room :op1 ( t1 / in ) ) :mode imperative ) === give
no event through === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :path ( VAR / through ) :mode imperative ) === no event through === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :path ( th / through ) :mode imperative ) === no go through === ( t / go :time ( m / now ) :arg0 ( y / you ) :path ( th / through ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) ) === event spatial === ( e / event :arg0 ( y / person ) :direction ( r / spatial ) ) === go down === ( e / go :arg0 ( y / you ) :direction ( r / down ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
temporal shade room the mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( ( / VAR ) ) :mode imperative ) === temporal shade room the spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( b1 / spatial ) :destination ( r / obj :op1 ( t1 / in ) ) :mode imperative ) === now shade room the right === ( t / event :time ( m / now ) :arg0 ( y / you ) :direction ( b1 / right ) :destination ( r / shade-room :op1 ( t1 / in ) ) :mode imperative ) === give
shade room temporal rigfh === ( VAR / and :op1 ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / VAR ) ) :mode imperative ) :op2 ( e /  event :time ( VAR / temporal ) :direction ( m /  mod ) ) ) === shade room temporal rigfh === ( s / and :op1 ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / in ) ) :mode imperative ) :op2 ( e / event :time ( m / temporal ) :direction ( r / spatial ) ) ) === shade room then rigfh === ( s / and :op1 ( t / event :arg0 ( y / you ) :destination ( r / shade-room :op1 ( t1 / in ) ) :mode imperative ) :op2 ( e / event :time ( m / then ) :direction ( r / right ) ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod to shade room === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( ( / VAR ) ) :mode imperative ) === spatial to shade room === ( t / event :arg0 ( y / person ) :direction ( b1 / spatial ) :destination ( r / obj :op1 ( t1 / in ) ) :mode imperative ) === back to shade room === ( t / event :arg0 ( y / you ) :direction ( b1 / back ) :destination ( r / shade-room :op1 ( t1 / in ) ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === south === ( e / event :direction ( r / south ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( b1 / spatial ) :mode imperative ) === go down === ( t / go :arg0 ( y / you ) :direction ( b1 / down ) :mode imperative ) === give
event into shade room === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / into ) ) :mode imperative ) === event into shade room === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / into ) ) :mode imperative ) === go into shade room === ( t / go :arg0 ( y / you ) :destination ( r / shade-room :op1 ( t1 / into ) ) :mode imperative ) === give
then mod === ( e /  event :direction ( m /  mod ) ) === then spatial === ( e / event :direction ( r / spatial ) ) === then left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod tot he mod === ( m /  mod :domain ( m /  mod ) :location ( m /  mod :direction ( m /  mod :op1 ( VAR / ( ) ) ) ) === property tot he obj === ( q / obj :domain ( t / obj ) :location ( l / obj :direction ( c / property :op1 ( t / to ) ) ) ) === closest tot he chair === ( q / one :domain ( t / entity ) :location ( l / chair :direction ( c / closest :op1 ( t / to ) ) ) ) === give
now i ned u to event mod to the original mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( VAR / ( ) :mod mod ) ) ) === now i ned u to event spatial to the original obj === ( w / event :arg0 ( y / person ) :arg1 ( g / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( o / obj :op1 ( o1 / to ) :mod modifier ) ) ) === now i ned u to go back to the original room === ( w / need :arg0 ( y / you ) :arg1 ( g / go :arg0 ( y / you ) :direction ( b / back ) :destination ( o / room :op1 ( o1 / to ) :mod orignal ) ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
now mod === ( e /  event :direction ( m /  mod ) ) === now spatial === ( e / event :direction ( r / spatial ) ) === now straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) ) === event spatial === ( e / event :arg0 ( y / person ) :direction ( r / spatial ) ) === go straight === ( e / go :arg0 ( y / you ) :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
dogh mod === ( e /  event :direction ( m /  mod ) ) === dogh spatial === ( e / event :direction ( r / spatial ) ) === dogh back === ( e / go :direction ( r / back ) ) === give
event ur mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) ) === event ur modifier spatial === ( t / event :arg0 ( y / person ) :arg1 ( l / spatial :mod modifier ) ) === take ur first left === ( t / take :arg0 ( y / you ) :arg1 ( l / left :mod first ) ) === give
striagh t from mod === ( e /  event :direction ( m /  mod ) :source ( m /  mod ) ) === striagh t from spatial === ( e / event :direction ( r / spatial ) :source ( h / spatial ) ) === striagh t from here === ( e / event :direction ( r / straight ) :source ( h / here ) ) === give
temporal event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) ) === temporal event spatial === ( e / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( r / spatial ) ) === now go back === ( e / go :time ( m / now ) :arg0 ( y / you ) :direction ( r / back ) ) === give
ppposite way === ( e /  event :direction ( m /  mod ) ) === ppposite way === ( e / event :direction ( r / obj ) ) === ppposite way === ( e / event :direction ( r / opposite-way ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
event mod and event personr mod mod === ( VAR / and :op1 ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) ) :op2 ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) ) ) === event spatial and event personr modifier spatial === ( s / and :op1 ( e / event :arg0 ( y / person ) :direction ( r / spatial ) ) :op2 ( t / event :arg0 ( y / person ) :arg1 ( l / spatial :mod modifier ) ) ) === go straight and take your second right === ( s / and :op1 ( e / go :arg0 ( y / you ) :direction ( r / straight ) ) :op2 ( t / take :arg0 ( y / you ) :arg1 ( l / right :mod second ) ) ) === give
mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) ) === modifier spatial === ( t / event :arg0 ( y / person ) :arg1 ( l / spatial :mod modifier ) ) === another right === ( t / event :arg0 ( y / you ) :arg1 ( l / right :mod another ) ) === give
into the mod mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / into ) :mod mod ) :mode imperative ) === into the modifier obj === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / into ) :mod modifier ) :mode imperative ) === into the next room === ( t / event :arg0 ( y / you ) :destination ( r / room :op1 ( t1 / into ) :mod next ) :mode imperative ) === give
ONTO THE NEXT ONE === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / onto ) :mod mod ) :mode imperative ) === ONTO THE NEXT ONE === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / onto ) :mod modifier ) :mode imperative ) === ONTO THE NEXT ONE === ( t / event :arg0 ( y / you ) :destination ( r / one :op1 ( t1 / onto ) :mod next ) :mode imperative ) === give
NOW INTO THE SHADE ROOM === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / into ) :mod mod ) :mode imperative ) === NOW INTO THE SHADE ROOM === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / into ) :mod modifier ) :mode imperative ) === NOW INTO THE SHADE ROOM === ( t / event :time ( m / now ) :arg0 ( y / you ) :destination ( r / shade-room :op1 ( t1 / into ) :mod next ) :mode imperative ) === give
CLICK THE GREEN BUTTON === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === CLICK THE GREEN BUTTON === ( t / event :arg0 ( y / person ) :arg1 ( i / obj :mod modifier ) :mode imperative ) === CLICK THE GREEN BUTTON === ( t / click :arg0 ( y / you ) :arg1 ( i / button :mod green ) :mode imperative ) === give
K NMOW GO INTO THE ORIGINAL ROOM === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / into ) :mod mod ) :mode imperative ) === K NMOW GO INTO THE ORIGINAL ROOM === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / into ) :mod modifier ) :mode imperative ) === K NMOW GO INTO THE ORIGINAL ROOM === ( t / go :time ( m / now ) :arg0 ( y / you ) :destination ( r / room :op1 ( t1 / into ) :mod original ) :mode imperative ) === give
GO STRAIGHT === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) ) === GO STRAIGHT === ( e / event :arg0 ( y / person ) :direction ( r / spatial ) ) === GO STRAIGHT === ( e / go :arg0 ( y / you ) :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
THE RED BUTTON CLOEST TO THE CHAITR === ( m /  mod :domain ( m /  mod ) :mod mod :location ( m /  mod :direction ( m /  mod :op1 ( VAR / ( ) ) ) ) === THE RED BUTTON CLOEST TO THE CHAITR === ( q / obj :domain ( t / obj ) :mod modifier :location ( l / obj :direction ( c / property :op1 ( t / to ) ) ) ) === THE RED BUTTON CLOEST TO THE CHAITR === ( q / button :domain ( t / entity ) :mod red :location ( l / chair :direction ( c / closest :op1 ( t / to ) ) ) ) === give
NOWIN TO THE SHADE ROOM === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / into ) :mod mod ) :mode imperative ) === NOWIN TO THE SHADE ROOM === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / into ) :mod modifier ) :mode imperative ) === NOWIN TO THE SHADE ROOM === ( t / event :time ( m / now ) :arg0 ( y / you ) :destination ( r / shade-room :op1 ( t1 / into ) :mod next ) :mode imperative ) === give
CLCK === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === CLCK === ( t / event :arg0 ( y / person ) :mode imperative ) === CLCK === ( t / click :arg0 ( y / you ) :mode imperative ) === give
GO THRO$mod320$GH THE mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( ( / through ) ) :mode imperative ) === GO THROobjGH THE obj === ( t / event :arg0 ( y / person ) :path ( r / obj :op1 ( t1 / through ) ) :mode imperative ) === GO THROUGH THE U === ( t / go :arg0 ( y / you ) :path ( r / U :op1 ( t1 / through ) ) :mode imperative ) === give
GO BACK === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) ) === GO BACK === ( e / event :arg0 ( y / person ) :direction ( r / spatial ) ) === GO BACK === ( e / go :arg0 ( y / you ) :direction ( r / back ) ) === give
STRAIGHT === ( e /  event :direction ( m /  mod ) ) === STRAIGHT === ( e / event :direction ( r / spatial ) ) === STRAIGHT === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
CLICK THE GREEN BUTTON === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === CLICK THE GREEN BUTTON === ( t / event :arg0 ( y / person ) :arg1 ( i / obj :mod modifier ) :mode imperative ) === CLICK THE GREEN BUTTON === ( t / click :arg0 ( y / you ) :arg1 ( i / button :mod green ) :mode imperative ) === give
GO TOWARDS THE PICK === ( e /  event :arg0 ( VAR / person ) :destination ( e /  event :op1 ( ( / towards ) ) :mode imperative ) === GO TOWARDS THE PICK === ( t / event :arg0 ( y / person ) :destination ( r / event :op1 ( t1 / towards ) ) :mode imperative ) === GO TOWARDS THE PICK === ( t / go :arg0 ( y / you ) :destination ( r / pick :op1 ( t1 / towards ) ) :mode imperative ) === give
NOW THERE S A BLUE BUTTON IN === ( m /  mod :time ( VAR / temporal ) :polarity + :mod mod :mode imperative ) === NOW THERE S A BLUE BUTTON IN === ( t / obj :time ( m / temporal ) :polarity + :mod modifier :mode imperative ) === NOW THERE S A BLUE BUTTON IN === ( t / button :time ( m / now ) :polarity + :mod blue :mode imperative ) === give
CLICK PLEASE SENIOR === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === CLICK PLEASE SENIOR === ( t / event :arg0 ( y / person ) :mode imperative ) === CLICK PLEASE SENIOR === ( t / click :arg0 ( y / you ) :mode imperative ) === give
beinh person there should be a mod === ( m /  mod :domain ( m /  mod ) :location ( VAR / person :op1 ( VAR / ( :direction ( ( / mod ) ) ) :mode imperative ) === beinh person there should be a obj === ( t / obj :domain ( n / obj ) :location ( l / person :op1 ( s / to :direction ( b / spatial ) ) ) :mode imperative ) === beinh you there should be a painting === ( t / painting :domain ( n / entity ) :location ( l / you :op1 ( s / to :direction ( b / behind ) ) ) :mode imperative ) === give
mod event === ( e /  event :arg0 ( VAR / person ) :arg1 ( e /  event :mod mod ) ) === modifier event === ( t / event :arg0 ( y / person ) :arg1 ( l / event :mod modifier ) ) === left turn === ( t / event :arg0 ( y / you ) :arg1 ( l / turn :mod left ) ) === give
mod of the mod === ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) === spatial of the obj === ( l / obj :op1 ( s / to :direction ( b / spatial ) ) ) === left of the chair === ( l / chair :op1 ( s / to :direction ( b / left ) ) ) === give
Ok, temporal go mod to the mod that person evented from === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( ( / mod :op1 ( ( / ( ) :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) :mode imperative ) === Ok, temporal go spatial to the obj that person evented from === ( e / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :destination ( r1 / obj :op1 ( t1 / to ) :arg1-of ( s1 / event :arg0 ( y / person ) ) ) :mode imperative ) === Ok, now go back to the room that you started from === ( e / event :time ( m / now ) :arg0 ( y / you ) :direction ( a / back ) :destination ( r1 / room :op1 ( t1 / to ) :arg1-of ( s1 / start :arg0 ( y / you ) ) ) :mode imperative ) === give
temporal, mod to the mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( ( / mod :op1 ( ( / ( ) ) :mode imperative ) === temporal, spatial to the obj === ( e / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :destination ( r1 / obj :op1 ( t1 / to ) ) :mode imperative ) === now, back to the intersection === ( e / event :time ( m / now ) :arg0 ( y / you ) :direction ( a / back ) :destination ( r1 / intersection :op1 ( t1 / to ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) ) === event spatial === ( e / event :arg0 ( y / person ) :direction ( r / spatial ) ) === keep straight === ( e / keep :arg0 ( y / you ) :direction ( r / straight ) ) === give
dorway in mod if person, mod mod === ( VAR / list :op1 ( m /  mod :domain ( m /  mod ) :location ( VAR / person :op1 ( VAR / VAR :direction ( ( / mod ) ) ) ) :op2 ( e /  event :direction ( m /  mod :mod mod ) ) ) === dorway in spatial if person, modifier spatial === ( s / list :op1 ( t / obj :domain ( n / obj ) :location ( l / person :op1 ( s / in :direction ( b / spatial ) ) ) ) :op2 ( e / event :direction ( r / spatial :mod modifier ) ) ) === dorway in front if you, straight ahead === ( s / list :op1 ( t / doorway :domain ( n / entity ) :location ( l / you :op1 ( s / in :direction ( b / front ) ) ) ) :op2 ( e / event :direction ( r / ahead :mod straight ) ) ) === give
temporal 90* mod and temporal mod === ( VAR / and :op1 ( ( / event :time ( VAR / temporal ) :direction ( ( / mod ) :extent ( m /  mod :quant 90 ) ) :op2 ( e /  event :time ( ( / temporal ) :direction ( ( / mod ) ) ) === temporal 90* spatial and temporal spatial === ( s / and :op1 ( e1 / event :time ( m1 / temporal ) :direction ( r1 / spatial ) :extent ( d / obj :quant 90 ) ) :op2 ( e2 / event :time ( m2 / temporal ) :direction ( r2 / spatial ) ) ) === now 90* right and then forward === ( s / and :op1 ( e1 / event :time ( m1 / now ) :direction ( r1 / right ) :extent ( d / degrees :quant 90 ) ) :op2 ( e2 / event :time ( m2 / then ) :direction ( r2 / forward ) ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod to mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( ( / mod :op1 ( ( / ( ) ) :mode imperative ) === spatial to obj === ( e / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( r1 / obj :op1 ( t1 / to ) ) :mode imperative ) === back to intersection === ( e / event :arg0 ( y / you ) :direction ( a / back ) :destination ( r1 / intersection :op1 ( t1 / to ) ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
Right. === ( e /  event :direction ( m /  mod ) ) === Right. === ( e / event :direction ( r / spatial ) ) === Right. === ( e / event :direction ( r / right ) ) === give
And temporal. === ( VAR / temporal ) === And temporal. === ( e / temporal ) === And again. === ( e / again ) === give
Yellow. === ( m /  mod :domain ( m /  mod ) ) === Yellow. === ( e / property :domain ( n / obj ) ) === Yellow. === ( e / yellow :domain ( n / entity ) ) === give
Right. === ( e /  event :direction ( m /  mod ) ) === Right. === ( e / event :direction ( r / spatial ) ) === Right. === ( e / event :direction ( r / right ) ) === give
Now go mod the mod person event. === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :path ( ( / mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) :mode imperative ) === Now go spatial the obj person event. === ( e / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :path ( r1 / obj :arg1-of ( s1 / event :arg0 ( y / person ) ) ) :mode imperative ) === Now go back the way you came. === ( e / event :time ( m / now ) :arg0 ( y / you ) :direction ( a / back ) :path ( r1 / way :arg1-of ( s1 / came :arg0 ( y / you ) ) ) :mode imperative ) === give
To the mod with the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( ( / mod :op1 ( ( / ( ) :prep-with ( ( / mod ) ) :mode imperative ) === To the obj with the obj. === ( e / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( r1 / obj :op1 ( t1 / to ) :prep-with ( pl / obj ) ) :mode imperative ) === To the room with the plant. === ( e / event :arg0 ( y / you ) :direction ( a / back ) :destination ( r1 / room :op1 ( t1 / to ) :prep-with ( pl / plant ) ) :mode imperative ) === give
Other way. === ( e /  event :direction ( m /  mod ) ) === Other way. === ( e / event :direction ( r / obj ) ) === Other way. === ( e / event :direction ( r / other-way ) ) === give
Back to the sofa room. === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( ( / mod :op1 ( ( / ( ) ) :mode imperative ) === Back to the sofa room. === ( e / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :destination ( r1 / obj :op1 ( t1 / to ) ) :mode imperative ) === Back to the sofa room. === ( e / event :time ( m / now ) :arg0 ( y / you ) :direction ( a / back ) :destination ( r1 / sofa-room :op1 ( t1 / to ) ) :mode imperative ) === give
Straight. === ( e /  event :direction ( m /  mod ) ) === Straight. === ( e / event :direction ( r / spatial ) ) === Straight. === ( e / event :direction ( r / straight ) ) === give
Left. === ( e /  event :direction ( m /  mod ) ) === Left. === ( e / event :direction ( r / spatial ) ) === Left. === ( e / event :direction ( r / left ) ) === give
In mod === ( e /  event :destination ( m /  mod :op1 ( VAR / VAR ) ) ) === In spatial. === ( e / event :destination ( r / spatial :op1 ( i / in ) ) ) === In there. === ( e / event :destination ( r / there :op1 ( i / in ) ) ) === give
Now mod mod to mod person evented. === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod :mod mod ) :destination ( ( / mod :op1 ( ( / ( ) :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) :mode imperative ) === Now modifier spatial to spatial person evented. === ( e / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial :mod modifier ) :destination ( r1 / spatial :op1 ( t1 / to ) :arg1-of ( s1 / event :arg0 ( y / person ) ) ) :mode imperative ) === Now back out to where you started. === ( e / event :time ( m / now ) :arg0 ( y / you ) :direction ( a / out :mod back ) :destination ( r1 / where :op1 ( t1 / to ) :arg1-of ( s1 / start :arg0 ( y / you ) ) ) :mode imperative ) === give
Go mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) ) === Go spatial. === ( e / event :arg0 ( y / person ) :direction ( r / spatial ) ) === Go straight. === ( e / go :arg0 ( y / you ) :direction ( r / straight ) ) === give
Left. === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) ) === Left. === ( e / event :arg0 ( y / person ) :direction ( r / spatial ) ) === Left. === ( e / event :arg0 ( y / you ) :direction ( r / left ) ) === give
Your mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :poss person :mod mod ) ) === Your modifier spatial. === ( t / event :arg0 ( y / person ) :arg1 ( l / spatial :poss person :mod modifier ) ) === Your other left. === ( t / event :arg0 ( y / you ) :arg1 ( l / left :poss you :mod other ) ) === give
THen mod === ( e /  event :time ( VAR / temporal ) :direction ( m /  mod ) ) === THen spatial. === ( e / event :time ( m / temporal ) :direction ( r / spatial ) ) === THen right. === ( e / event :time ( m / then ) :direction ( r / right ) ) === give
Straight mod === ( e /  event :direction ( m /  mod :mod mod ) ) === Straight spatial. === ( e / event :direction ( r / spatial :mod modifier ) ) === Straight ahead. === ( e / event :direction ( r / ahead :mod straight ) ) === give
Hit mod mod temporal. === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :time ( VAR / temporal ) :mode imperative ) === Hit modifier obj temporal. === ( p / event :arg0 ( y / person ) :arg1 ( q / obj :mod modifier ) :time ( a / temporal ) :mode imperative ) === Hit that one again. === ( p / hit :arg0 ( y / you ) :arg1 ( q / one :mod that ) :time ( a / again ) :mode imperative ) === give
Keep going mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === Keep going spatial. === ( e / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === Keep going straight. === ( e / keep-going :arg0 ( y / you ) :direction ( r / straight ) :mode imperative ) === give
Turn mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === Turn spatial. === ( e / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === Turn right. === ( e / turn :arg0 ( y / you ) :direction ( r / right ) :mode imperative ) === give
Back mod === ( e /  event :direction ( m /  mod ) :destination ( m /  mod ) ) === Back spatial. === ( e / event :direction ( r / spatial ) :destination ( d / spatial ) ) === Back out. === ( e / event :direction ( r / back ) :destination ( d / out ) ) === give
The mod of the number === ( m /  mod :domain ( m /  mod ) :prep-of ( VAR / number ) ) === The spatial of the number === ( e / spatial :domain ( n / obj ) :prep-of ( t / number ) ) === The right of the two === ( e / right :domain ( n / entity ) :prep-of ( t / two ) ) === give
Keep going. === ( e /  event :arg0 ( VAR / person ) :direction :mode imperative ) === Keep going. === ( e / event :arg0 ( y / person ) :direction :mode imperative ) === Keep going. === ( e / keep-going :arg0 ( y / you ) :direction :mode imperative ) === give
Now event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === Now event spatial. === ( e / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === Now turn right. === ( e / turn :time ( m / now ) :arg0 ( y / you ) :direction ( r / right ) :mode imperative ) === give
And event personr prize. === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :poss person ) :mode imperative ) === And event personr prize. === ( e / event :arg0 ( y / person ) :arg1 ( p / obj :poss person ) :mode imperative ) === And claim your prize. === ( e / claim :arg0 ( y / you ) :arg1 ( p / price :poss you ) :mode imperative ) === give
no event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === no event spatial === ( e / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === no go back === ( e / go :time ( m / now ) :arg0 ( y / you ) :direction ( r / back ) :mode imperative ) === give
into the mod rorom === ( e /  event :arg0 ( VAR / person ) :destination ( ( / mod :op1 ( ( / into ) :mod mod ) :mode imperative ) === into the modifier rorom === ( e / event :arg0 ( y / person ) :destination ( r1 / obj :op1 ( t1 / into ) :mod modifier ) :mode imperative ) === into the other rorom === ( e / event :arg0 ( y / you ) :destination ( r1 / room :op1 ( t1 / into ) :mod other ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( e / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === go right === ( e / go :arg0 ( y / you ) :direction ( r / right ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( e / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === turn right === ( e / turn :arg0 ( y / you ) :direction ( r / right ) :mode imperative ) === give
and event the otehr mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :poss other ) :mode imperative ) === and event the otehr obj === ( e / event :arg0 ( y / person ) :arg1 ( p / obj :poss other ) :mode imperative ) === and enter the otehr room === ( e / enter :arg0 ( y / you ) :arg1 ( p / room :poss other ) :mode imperative ) === give
event staight === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event staight === ( e / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === go staight === ( e / go :arg0 ( y / you ) :direction ( r / straight ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( e / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === turn back === ( e / turn :arg0 ( y / you ) :direction ( r / back ) :mode imperative ) === give
teh$mod456$ === ( m /  mod :domain ( m /  mod ) ) === tehproperty === ( p / property :domain ( n / obj ) ) === tehother === ( p / other :domain ( n / entity ) ) === give
event mod temporal === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :time ( VAR / temporal ) :mode imperative ) === event obj temporal === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ) :time ( a / temporal ) :mode imperative ) === click it again === ( p / click :arg0 ( y / you ) :arg1 ( q / it ) :time ( a / again ) :mode imperative ) === give
staright === ( e /  event :direction ( m /  mod ) ) === staright === ( e / event :direction ( r / spatial ) ) === staright === ( e / event :direction ( r / straight ) ) === give
staight === ( e /  event :direction ( m /  mod ) ) === staight === ( e / event :direction ( r / spatial ) ) === staight === ( e / event :direction ( r / straight ) ) === give
event through === ( e /  event :arg0 ( VAR / person ) :direction ( VAR / through ) :mode imperative ) === event through === ( e / event :arg0 ( y / person ) :direction ( r / through ) :mode imperative ) === go through === ( e / go :arg0 ( y / you ) :direction ( r / through ) :mode imperative ) === give
staright === ( e /  event :direction ( m /  mod ) ) === staright === ( e / event :direction ( r / spatial ) ) === staright === ( e / event :direction ( r / straight ) ) === give
and then mod === ( e /  event :time ( VAR / temporal ) :direction ( m /  mod ) ) === and then spatial === ( e / event :time ( m / temporal ) :direction ( r / spatial ) ) === and then right === ( e / event :time ( m / now ) :direction ( r / right ) ) === give
event staright === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event staright === ( e / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === go staright === ( e / go :arg0 ( y / you ) :direction ( r / straight ) :mode imperative ) === give
into mod end room === ( e /  event :arg0 ( VAR / person ) :destination ( ( / mod :op1 ( ( / into ) :mod mod ) :mode imperative ) === into modifier end room === ( e / event :arg0 ( y / person ) :destination ( r1 / obj :op1 ( t1 / into ) :mod modifier ) :mode imperative ) === into that end room === ( e / event :arg0 ( y / you ) :destination ( r1 / end-room :op1 ( t1 / into ) :mod that ) :mode imperative ) === give
event into the mod mod === ( e /  event :arg0 ( VAR / person ) :destination ( ( / mod :op1 ( ( / into ) :mod mod ) :mode imperative ) === event into the modifier obj === ( e / event :arg0 ( y / person ) :destination ( r1 / obj :op1 ( t1 / into ) :mod modifier ) :mode imperative ) === go into the other room === ( e / go :arg0 ( y / you ) :destination ( r1 / room :op1 ( t1 / into ) :mod other ) :mode imperative ) === give
through the mod openign === ( e /  event :arg0 ( VAR / person ) :path ( ( / mod :op1 ( ( / through ) :mod mod ) :mode imperative ) === through the modifier openign === ( e / event :arg0 ( y / person ) :path ( r1 / obj :op1 ( t1 / through ) :mod modifier ) :mode imperative ) === through the right openign === ( e / event :arg0 ( y / you ) :path ( r1 / opening :op1 ( t1 / through ) :mod right ) :mode imperative ) === give
event through === ( e /  event :arg0 ( VAR / person ) :path ( VAR / through ) :mode imperative ) === event through === ( e / event :arg0 ( y / person ) :path ( r / through ) :mode imperative ) === go through === ( e / go :arg0 ( y / you ) :path ( r / through ) :mode imperative ) === give
and then mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :path ( m /  mod ) :mode imperative ) === and then spatial === ( e / event :time ( m / temporal ) :arg0 ( y / person ) :path ( r / spatial ) :mode imperative ) === and then straight === ( e / event :time ( m / now ) :arg0 ( y / you ) :path ( r / straight ) :mode imperative ) === give
keep on === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === keep on === ( e / event :arg0 ( y / person ) :mode imperative ) === keep on === ( e / keep-on :arg0 ( y / you ) :mode imperative ) === give
and personll event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === and personll event obj === ( e / event :arg0 ( y / person ) :arg1 ( i / obj ) ) === and youll see it === ( e / see :arg0 ( y / you ) :arg1 ( i / it ) ) === give
click on mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === click on obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ) :mode imperative ) === click on it === ( p / click-on :arg0 ( y / you ) :arg1 ( q / it ) :mode imperative ) === give
now event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === now event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === now turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event mod it === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial it === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go down it === ( t / go :arg0 ( y / you ) :direction ( a / down ) :mode imperative ) === give
event mod a little and temporal event mod === ( VAR / and :op1 ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :extent ( m /  mod ) :mode imperative ) :op2 ( ( / event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) ) === event spatial a little and temporal event spatial === ( s / and :op1 ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :extent ( l / property ) :mode imperative ) :op2 ( t1 / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a1 / spatial ) :mode imperative ) ) === go forward a little and then turn left === ( s / and :op1 ( t / go :arg0 ( y / you ) :direction ( a / forward ) :extent ( l / a-little ) :mode imperative ) :op2 ( t1 / turn :time ( m / then ) :arg0 ( y / you ) :direction ( a1 / left ) :mode imperative ) ) === give
event the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event the obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ) :mode imperative ) === follow the path === ( p / follow :arg0 ( y / you ) :arg1 ( q / path ) :mode imperative ) === give
k event mod from mod u came from === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :path ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) :mode imperative ) === k event spatial from spatial u came from === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :path ( w / spatial :arg1-of ( c / event :arg0 ( y / person ) ) ) :mode imperative ) === k go back from where u came from === ( t / go :arg0 ( y / you ) :direction ( a / back ) :path ( w / where :arg1-of ( c / come :arg0 ( y / you ) ) ) :mode imperative ) === give
mod the mod === ( e /  event :arg0 ( VAR / person ) :path ( ( / mod :op1 ( ( / mod ) ) :mode imperative ) === spatial the obj === ( e / event :arg0 ( y / person ) :path ( r1 / obj :op1 ( t1 / spatial ) ) :mode imperative ) === down the passage === ( e / event :arg0 ( y / you ) :path ( r1 / passage :op1 ( t1 / down ) ) :mode imperative ) === give
event ur mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) ) === event ur modifier spatial === ( t / event :arg0 ( y / person ) :arg1 ( l / spatial :mod modifier ) ) === take ur first right === ( t / take :arg0 ( y / you ) :arg1 ( l / right :mod first ) ) === give
ok event mod from wher eu came from temporal === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :path ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) :time ( VAR / temporal ) :mode imperative ) === ok event spatial from wher eu came from temporal === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :path ( w / spatial :arg1-of ( c / event :arg0 ( y / person ) ) ) :time ( m / temporal ) :mode imperative ) === ok go back from wher eu came from again === ( t / go :arg0 ( y / you ) :direction ( a / back ) :path ( w / where :arg1-of ( c / come :arg0 ( y / you ) ) ) :time ( m / again ) :mode imperative ) === give
this time event mod === ( e /  event :time ( m /  mod ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === this time event spatial === ( t / event :time ( m / property ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === this time go straight === ( t / go :time ( m / this-time ) :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
event mod to the mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( ( / ( ) ) :mode imperative ) === event spatial to the obj === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / obj :op1 ( t1 / to ) ) :mode imperative ) === go back to the room === ( t / go :arg0 ( y / you ) :direction ( b / back ) :destination ( r / room :op1 ( t1 / to ) ) :mode imperative ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( t / event :arg0 ( y / person ) :mode imperative ) === turn === ( t / turn :arg0 ( y / you ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go back === ( t / go :arg0 ( y / you ) :direction ( a / back ) :mode imperative ) === give
now the mod mod === ( m /  mod :domain ( m /  mod ) :mod mod ) === now the modifier obj === ( q / obj :domain ( t / obj ) :mod modifier ) === now the right one === ( q / one :domain ( t / entity ) :mod right ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
yeah event the rout mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :path ( ( / mod ) :mode imperative ) === yeah event the rout spatial === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ) :path ( b / spatial ) :mode imperative ) === yeah follow the rout back === ( p / follow :arg0 ( y / you ) :arg1 ( q / route ) :path ( b / back ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === back === ( e / event :direction ( r / back ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn back === ( t / turn :arg0 ( y / you ) :direction ( a / back ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
temporal event mod in the the very first mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( ( / VAR ) :mod mod ) :mode imperative ) === temporal event spatial in the the very first obj === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / obj :op1 ( t1 / in ) :mod modifier ) :mode imperative ) === now go back in the the very first room === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( b / back ) :destination ( r / room :op1 ( t1 / in ) :mod very-first ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
event mod temporal === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :time ( VAR / temporal ) :mode imperative ) === event spatial temporal === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :time ( m / temporal ) :mode imperative ) === go back again === ( t / go :arg0 ( y / you ) :direction ( a / back ) :time ( m / again ) :mode imperative ) === give
this time mod === ( e /  event :time ( m /  mod ) :direction ( m /  mod ) ) === this time spatial === ( e / event :time ( m / property ) :direction ( r / spatial ) ) === this time straight === ( e / event :time ( m / this-time ) :direction ( r / straight ) ) === give
temporal event mod into the mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( ( / into ) ) :mode imperative ) === temporal event spatial into the obj === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / obj :op1 ( t1 / into ) ) :mode imperative ) === now go back into the room === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( b / back ) :destination ( r / room :op1 ( t1 / into ) ) :mode imperative ) === give
ok temporal event mod to the very mod temporal === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( ( / ( ) ) :time ( VAR / temporal ) :mode imperative ) === ok temporal event spatial to the very obj temporal === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / obj :op1 ( t1 / to ) ) :time ( m1 / temporal ) :mode imperative ) === ok now go back to the very beginning again === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( b / back ) :destination ( r / beginning :op1 ( t1 / to ) ) :time ( m1 / again ) :mode imperative ) === give
event personr mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) ) === event personr modifier spatial === ( t / event :arg0 ( y / person ) :arg1 ( l / spatial :mod modifier ) ) === take your first right === ( t / take :arg0 ( y / you ) :arg1 ( l / right :mod first ) ) === give
like event a mod temporal === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :time ( VAR / temporal ) ) === like event a modifier temporal === ( t / event :arg0 ( y / person ) :arg1 ( l / spatial :mod modifier ) :time ( m / temporal ) ) === like take a left now === ( t / take :arg0 ( y / you ) :arg1 ( l / right :mod left ) :time ( m / now ) ) === give
event to the mod mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / ( ) :mod mod ) :mode imperative ) === event to the modifier obj === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / to ) :mod modifier ) :mode imperative ) === go to the next room === ( t / go :arg0 ( y / you ) :destination ( r / room :op1 ( t1 / to ) :mod next ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
mod into mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( ( / into ) :mod mod ) :mode imperative ) === spatial into modifier obj === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / obj :op1 ( t1 / into ) :mod modifier ) :mode imperative ) === back into other room === ( t / event :arg0 ( y / you ) :direction ( b / back ) :destination ( r / room :op1 ( t1 / into ) :mod other ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
keep going straigh === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === keep going straigh === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === keep going straigh === ( t / keep-going :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
mod to$mod456$ === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( ( / ( ) ) :mode imperative ) === spatial toproperty === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / property :op1 ( t1 / to ) ) :mode imperative ) === back topink === ( t / event :arg0 ( y / you ) :direction ( b / back ) :destination ( r / pink :op1 ( t1 / to ) ) :mode imperative ) === give
mod === ( m /  mod :domain ( m /  mod ) ) === obj === ( r / obj :domain ( n / obj ) ) === room === ( r / room :domain ( n / entity ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
go event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === go event obj! === ( t / event :arg0 ( y / person ) :arg1 ( a / obj ) :mode imperative ) === go get trophy! === ( t / get :arg0 ( y / you ) :arg1 ( a / trophy ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
on mod === ( e /  event :direction ( m /  mod ) ) === on spatial === ( e / event :direction ( r / spatial ) ) === on right === ( e / event :direction ( r / right ) ) === give
ok event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === ok event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === ok go back === ( t / go :arg0 ( y / you ) :direction ( a / back ) :mode imperative ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( t / event :arg0 ( y / person ) :mode imperative ) === turn === ( t / turn :arg0 ( y / you ) :mode imperative ) === give
event mod mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( m /  mod ) ) :mode imperative ) === event spatial obj === ( t / event :arg0 ( y / person ) :path ( l / obj :op1 ( s / spatial ) ) :mode imperative ) === go around corner === ( t / go :arg0 ( y / you ) :path ( l / corner :op1 ( s / around ) ) :mode imperative ) === give
ok event mod to mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( ( / ( ) :mod mod ) :mode imperative ) === ok event spatial to modifier obj === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / obj :op1 ( t1 / to ) :mod modifier ) :mode imperative ) === ok go back to pink room === ( t / go :arg0 ( y / you ) :direction ( b / back ) :destination ( r / room :op1 ( t1 / to ) :mod pink ) :mode imperative ) === give
and event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === and event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === and go left === ( t / go :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
event mod to mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( ( / ( ) :mod mod ) :mode imperative ) === event spatial to modifier obj === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / obj :op1 ( t1 / to ) :mod modifier ) :mode imperative ) === go back to other room === ( t / go :arg0 ( y / you ) :direction ( b / back ) :destination ( r / room :op1 ( t1 / to ) :mod other ) :mode imperative ) === give
mod mod === ( e /  event :location ( m /  mod :op1 ( m /  mod ) ) ) === spatial obj === ( e / event :location ( r / obj :op1 ( n / spatial ) ) ) === near plant === ( e / event :location ( r / plant :op1 ( n / near ) ) ) === give
not mod mod === ( e /  event :polarity - :location ( m /  mod :op1 ( m /  mod ) ) ) === not spatial obj === ( e / event :polarity - :location ( r / obj :op1 ( n / spatial ) ) ) === not near plant === ( e / event :polarity - :location ( r / plant :op1 ( n / near ) ) ) === give
ok mod into mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( ( / into ) :mod mod ) :mode imperative ) === ok spatial into modifier obj === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / obj :op1 ( t1 / into ) :mod modifier ) :mode imperative ) === ok back into other room === ( t / event :arg0 ( y / you ) :direction ( b / back ) :destination ( r / room :op1 ( t1 / into ) :mod other ) :mode imperative ) === give
throught mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( ( / through ) ) :mode imperative ) === throught obj === ( t / event :arg0 ( y / person ) :path ( r / obj :op1 ( t1 / through ) ) :mode imperative ) === throught room === ( t / event :arg0 ( y / you ) :path ( r / room :op1 ( t1 / through ) ) :mode imperative ) === give
mod through === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :path ( VAR / through ) :mode imperative ) === spatial through === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :path ( r / through ) :mode imperative ) === straight through === ( t / event :arg0 ( y / you ) :direction ( b / straight ) :path ( r / through ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( m /  mod ) === obj!!! === ( e / obj ) === treasure!!! === ( e / treasure ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event property === ( t / event :arg0 ( y / person ) :direction ( a / property ) :mode imperative ) === turn forwards === ( t / turn :arg0 ( y / you ) :direction ( a / forwards ) :mode imperative ) === give
event to the mod on the mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / ( ) :location ( ( / mod ) ) :mode imperative ) === event to the obj on the spatial === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / to ) :location ( r1 / spatial ) ) :mode imperative ) === go to the room on the right === ( t / go :arg0 ( y / you ) :destination ( r / room :op1 ( t1 / to ) :location ( r1 / right ) ) :mode imperative ) === give
event mod to the mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( ( / ( ) :mod mod ) :mode imperative ) === event spatial to the modifier obj === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / obj :op1 ( t1 / to ) :mod modifier ) :mode imperative ) === go back to the other room === ( t / go :arg0 ( y / you ) :direction ( b / back ) :destination ( r / room :op1 ( t1 / to ) :mod other ) :mode imperative ) === give
event to the mod on the mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / ( ) :location ( m /  mod ) ) :mode imperative ) === event to the obj on the spatial === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / to ) :location ( l1 / spatial ) ) :mode imperative ) === go to the room on the left === ( t / go :arg0 ( y / you ) :destination ( r / room :op1 ( t1 / to ) :location ( l1 / left ) ) :mode imperative ) === give
keep going === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === keep going === ( t / event :arg0 ( y / person ) :mode imperative ) === keep going === ( t / keep-going :arg0 ( y / you ) :mode imperative ) === give
event mod towards the mod with the mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( ( / ( ) :prep-with ( ( / mod ) ) :mode imperative ) === event spatial towards the obj with the obj === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / obj :op1 ( t1 / to ) :prep-with ( pa / obj ) ) :mode imperative ) === go back towards the room with the painting === ( t / go :arg0 ( y / you ) :direction ( b / back ) :destination ( r / room :op1 ( t1 / to ) :prep-with ( pa / painting ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event property === ( t / event :arg0 ( y / person ) :direction ( r / property ) :mode imperative ) === go forwards === ( t / go :arg0 ( y / you ) :direction ( r / forwards ) :mode imperative ) === give
event mod bro === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event obj bro === ( t / event :arg0 ( y / person ) :arg1 ( i1 / obj ) :mode imperative ) === do it bro === ( t / do :arg0 ( y / you ) :arg1 ( i1 / it ) :mode imperative ) === give
sweet deal k temporal event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === sweet deal k temporal event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === sweet deal k now go straight === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
get off the mod and event mod of the mod === ( VAR / and :op1 ( ( / event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) :op2 ( ( / event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod ) :mode imperative ) ) === get off the obj and event spatial of the obj === ( s / and :op1 ( t1 / event :arg0 ( y / person ) :arg1 ( r / obj ) :mode imperative ) :op2 ( t2 / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / obj ) :mode imperative ) ) === get off the couch and go out of the room === ( s / and :op1 ( t1 / get-off :arg0 ( y / you ) :arg1 ( r / couch ) :mode imperative ) :op2 ( t2 / go :arg0 ( y / you ) :direction ( b / out ) :destination ( r / room ) :mode imperative ) ) === give
mod to the mod with the mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( ( / ( ) :prep-with ( ( / mod ) ) :mode imperative ) === spatial to the obj with the obj === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / obj :op1 ( t1 / to ) :prep-with ( pa / obj ) ) :mode imperative ) === back to the room with the chair === ( t / event :arg0 ( y / you ) :direction ( b / back ) :destination ( r / room :op1 ( t1 / to ) :prep-with ( pa / chair ) ) :mode imperative ) === give
wait go mod one mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :extent ( m /  mod :quant 1 ) :mode imperative ) === wait go spatial one obj === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :extent ( r / obj :quant 1 ) :mode imperative ) === wait go back one room === ( t / event :arg0 ( y / you ) :direction ( b / back ) :extent ( r / room :quant 1 ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( e / event :arg0 ( q / person ) :direction ( r / spatial ) :mode imperative ) === look left === ( e / look :arg0 ( q / you ) :direction ( r / left ) :mode imperative ) === give
event to the main room === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / ( ) ) :mode imperative ) === event to the main room === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / to ) ) :mode imperative ) === go to the main room === ( t / go :arg0 ( y / you ) :destination ( r / main-room :op1 ( t1 / to ) ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
event to the mod on the mod mod person === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :location ( m /  mod :op1 ( VAR / on :direction ( ( / mod ) ) ) ) :mode imperative ) === event to the obj on the spatial spatial person === ( p / event :arg0 ( y / person ) :destination ( d1 / obj :location ( l / spatial :op1 ( s / on :direction ( b / spatial ) ) ) ) :mode imperative ) === go to the room on the left behind you === ( p / go :arg0 ( y / you ) :destination ( d1 / room :location ( l / left :op1 ( s / on :direction ( b / behind ) ) ) ) :mode imperative ) === give
couch room === ( m /  mod ) === couch room === ( e / obj ) === couch room === ( e / couch-room ) === give
throphy room === ( m /  mod ) === throphy room === ( e / obj ) === throphy room === ( e / trophy-room ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod on the mod === ( m /  mod :location ( m /  mod :op1 ( VAR / on ) ) ) === obj on the spatial === ( e / obj :location ( l / spatial :op1 ( o / on ) ) ) === room on the left === ( e / room :location ( l / left :op1 ( o / on ) ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event obj === ( t / event :arg0 ( y / person ) :arg1 ( i1 / obj ) :mode imperative ) === press it === ( t / press :arg0 ( y / you ) :arg1 ( i1 / it ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( e / event :arg0 ( q / person ) :direction ( r / spatial ) :mode imperative ) === look around === ( e / look :arg0 ( q / you ) :direction ( r / around ) :mode imperative ) === give
event the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event the obj? === ( t / event :arg0 ( y / person ) :arg1 ( i1 / obj ) :mode imperative ) === click the safe? === ( t / click :arg0 ( y / you ) :arg1 ( i1 / safe ) :mode imperative ) === give
k that worked couch room temporal === ( m /  mod :time ( VAR / temporal ) ) === k that worked couch room temporal === ( e / obj :time ( m / temporal ) ) === k that worked couch room now === ( e / couch-room :time ( m / now ) ) === give
GET THE TREASURE!!!1!!!one!! === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === GET THE TREASURE!!!1!!!one!! === ( t / event :arg0 ( y / person ) :arg1 ( i1 / obj ) :mode imperative ) === GET THE TREASURE!!!1!!!one!! === ( t / get :arg0 ( y / you ) :arg1 ( i1 / treasure ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
event mod to the starting room === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( ( / ( ) ) :mode imperative ) === event spatial to the starting room === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / obj :op1 ( t1 / to ) ) :mode imperative ) === go back to the starting room === ( t / go :arg0 ( y / you ) :direction ( b / back ) :destination ( r / starting-room :op1 ( t1 / to ) ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( m /  mod ) === obj === ( e / obj ) === intersection === ( e / intersection ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
all the way on the mod === ( e /  event :direction ( m /  mod ) :extent ( m /  mod ) ) === all the way on the spatial === ( e / event :direction ( r / spatial ) :extent ( a / property ) ) === all the way on the right === ( e / event :direction ( r / right ) :extent ( a / all-the-way ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
on the way === ( e /  event :direction ( m /  mod ) ) === on the way === ( e / event :direction ( r / property ) ) === on the way === ( e / event :direction ( r / on-the-way ) ) === give
mod mod === ( m /  mod :mod mod ) === modifier obj === ( e / obj :mod modifier ) === other wall === ( e / wall :mod other ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( t / event :arg0 ( y / person ) :mode imperative ) === click === ( t / click :arg0 ( y / you ) :mode imperative ) === give
event to the mod mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / ( ) :mod mod ) :mode imperative ) === event to the modifier obj === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / to ) :mod modifier ) :mode imperative ) === go to the next room === ( t / go :arg0 ( y / you ) :destination ( r / room :op1 ( t1 / to ) :mod next ) :mode imperative ) === give
keep going === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === keep going === ( t / event :arg0 ( y / person ) :mode imperative ) === keep going === ( t / keep-going :arg0 ( y / you ) :mode imperative ) === give
event mod to mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( ( / ( ) :mod mod ) :mode imperative ) === event spatial to modifier obj === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / obj :op1 ( t1 / to ) :mod modifier ) :mode imperative ) === go back to next room === ( t / go :arg0 ( y / you ) :direction ( b / back ) :destination ( r / room :op1 ( t1 / to ) :mod next ) :mode imperative ) === give
event to the mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / ( ) ) :mode imperative ) === event to the obj === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / to ) ) :mode imperative ) === go to the painting === ( t / go :arg0 ( y / you ) :destination ( r / painting :op1 ( t1 / to ) ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod mod === ( m /  mod :mod mod ) === modifier obj === ( e / obj :mod modifier ) === that one === ( e / one :mod that ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event mod thjere === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod ) :mode imperative ) === event spatial thjere === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / spatial ) :mode imperative ) === go down thjere === ( t / go :arg0 ( y / you ) :direction ( b / down ) :destination ( r / there ) :mode imperative ) === give
event intop the mod mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / into ) :mod mod ) :mode imperative ) === event intop the modifier obj === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / into ) :mod modifier ) :mode imperative ) === go intop the next room === ( t / go :arg0 ( y / you ) :destination ( r / room :op1 ( t1 / into ) :mod next ) :mode imperative ) === give
the mod mod in mod of you === ( m /  mod :mod mod :location ( m /  mod :op1 ( VAR / on ) ) ) === the obj modifier in spatial of you === ( e / obj :mod modifier :location ( l / spatial :op1 ( s / on ) ) ) === the one right in front of you === ( e / one :mod right :location ( l / front :op1 ( s / on ) ) ) === give
event mod oyut === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod ) :mode imperative ) === event spatial oyut === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / spatial ) :mode imperative ) === go back oyut === ( t / go :arg0 ( y / you ) :direction ( b / back ) :destination ( r / out ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
keep going === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === keep going === ( t / event :arg0 ( y / person ) :mode imperative ) === keep going === ( t / keep-going :arg0 ( y / you ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
event mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod ) :mode imperative ) === event spatial spatial === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / spatial ) :mode imperative ) === go back out === ( t / go :arg0 ( y / you ) :direction ( b / back ) :destination ( r / out ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod temporal === ( e /  event :time ( VAR / temporal ) :direction ( m /  mod ) ) === spatial temporal === ( e / event :time ( m / temporal ) :direction ( r / spatial ) ) === straight now === ( e / event :time ( m / now ) :direction ( r / straight ) ) === give
event mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod ) :mode imperative ) === event spatial spatial === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / spatial ) :mode imperative ) === go back out === ( t / go :arg0 ( y / you ) :direction ( b / back ) :destination ( r / out ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
no your mod mod === ( e /  event :direction ( m /  mod :mod mod ) ) === no your modifier spatial === ( e / event :direction ( r / spatial :mod modifier ) ) === no your other left === ( e / event :direction ( r / left :mod other ) ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( t / event :arg0 ( y / person ) :mode imperative ) === go === ( t / go :arg0 ( y / you ) :mode imperative ) === give
straaaight === ( e /  event :direction ( m /  mod ) ) === straaaight === ( e / event :direction ( r / spatial ) ) === straaaight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
into that mod mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / into ) :mod mod ) :mode imperative ) === into that modifier obj === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t1 / into ) :mod modifier ) :mode imperative ) === into that other room === ( t / event :arg0 ( y / you ) :destination ( r / room :op1 ( t1 / into ) :mod other ) :mode imperative ) === give
get mod of mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod ) :mode imperative ) === get spatial of spatial === ( t / event :arg0 ( y / person ) :direction ( ou / spatial ) :destination ( r / spatial ) :mode imperative ) === get out of there === ( t / go :arg0 ( y / you ) :direction ( ou / out ) :destination ( r / there ) :mode imperative ) === give
mod mod === ( m /  mod :mod mod ) === modifier obj === ( e / obj :mod modifier ) === other one === ( e / one :mod other ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( t / event :arg0 ( y / person ) :mode imperative ) === turn === ( t / turn :arg0 ( y / you ) :mode imperative ) === give
event to the mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / ( ) ) :mode imperative ) === event to the spatial === ( t / event :arg0 ( y / person ) :destination ( r / spatial :op1 ( t / to ) ) :mode imperative ) === go to the back === ( t / go :arg0 ( y / you ) :destination ( r / back :op1 ( t / to ) ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
event mod to the mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( VAR / ( ) :mod mod ) :mode imperative ) === event spatial to the modifier obj === ( t / event :arg0 ( y / person ) :direction ( ou / spatial ) :destination ( r / obj :op1 ( t / to ) :mod modifier ) :mode imperative ) === go out to the first room === ( t / go :arg0 ( y / you ) :direction ( ou / out ) :destination ( r / room :op1 ( t / to ) :mod first ) :mode imperative ) === give
straighht === ( e /  event :direction ( m /  mod ) ) === straighht === ( e / event :direction ( r / spatial ) ) === straighht === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
righht === ( e /  event :direction ( m /  mod ) ) === righht === ( e / event :direction ( r / spatial ) ) === righht === ( e / event :direction ( r / right ) ) === give
mod temporal === ( e /  event :time ( VAR / temporal ) :direction ( m /  mod ) ) === spatial temporal === ( e / event :time ( m / temporal ) :direction ( r / spatial ) ) === right again === ( e / event :time ( m / again ) :direction ( r / right ) ) === give
mod into mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( VAR / ( ) :mod mod ) :mode imperative ) === spatial into modifier obj === ( t / event :arg0 ( y / person ) :direction ( ou / spatial ) :destination ( r / obj :op1 ( t / to ) :mod modifier ) :mode imperative ) === straight into far room === ( t / event :arg0 ( y / you ) :direction ( ou / straight ) :destination ( r / room :op1 ( t / to ) :mod far ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === go back === ( t / go :arg0 ( y / you ) :direction ( r / back ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( r / left ) :mode imperative ) === give
staight === ( e /  event :direction ( m /  mod ) ) === staight === ( e / event :direction ( r / spatial ) ) === staight === ( e / event :direction ( r / straight ) ) === give
event mod to mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( VAR / ( ) :mod mod ) :mode imperative ) === event spatial to modifier obj === ( t / event :arg0 ( y / person ) :direction ( ou / spatial ) :destination ( r / obj :op1 ( t / to ) :mod modifier ) :mode imperative ) === go back to original room === ( t / go :arg0 ( y / you ) :direction ( ou / back ) :destination ( r / room :op1 ( t / to ) :mod original ) :mode imperative ) === give
staight === ( e /  event :direction ( m /  mod ) ) === staight === ( e / event :direction ( r / spatial ) ) === staight === ( e / event :direction ( r / straight ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( r / right ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === back === ( e / event :direction ( r / back ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === go down === ( t / go :arg0 ( y / you ) :direction ( r / down ) :mode imperative ) === give
throgh mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === throgh obj === ( t / event :arg0 ( y / person ) :path ( r / obj :op1 ( t / through ) ) :mode imperative ) === throgh room === ( t / event :arg0 ( y / you ) :path ( r / room :op1 ( t / through ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event obj === ( t / event :arg0 ( y / person ) :arg1 ( r / obj ) :mode imperative ) === hit it === ( t / hit :arg0 ( y / you ) :arg1 ( r / it ) :mode imperative ) === give
event up === ( e /  event :arg0 ( VAR / person ) :direction ( VAR / up ) :mode imperative ) === event up === ( t / event :arg0 ( y / person ) :direction ( r / up ) :mode imperative ) === go up === ( t / go :arg0 ( y / you ) :direction ( r / up ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === down === ( e / event :direction ( r / down ) ) === give
staight === ( e /  event :direction ( m /  mod ) ) === staight === ( e / event :direction ( r / spatial ) ) === staight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod to mod on mod side of mod === ( m /  mod :domain ( m /  mod ) :location ( m /  mod :direction ( m /  mod :op1 ( VAR / ( ) ) ) :location ( m /  mod :mod mod :op1 ( VAR / on :direction ( ( / mod ) ) ) ) === property to obj on spatial side of obj === ( q / obj :domain ( t / obj ) :location ( l / obj :direction ( c / property :op1 ( t / to ) ) ) :location ( l / obj :mod modifier :op1 ( s / on :direction ( b / spatial ) ) ) ) === nearest to chair on left side of room === ( q / obj :domain ( t / entity ) :location ( l / chair :direction ( c / nearest :op1 ( t / to ) ) ) :location ( l / room :mod red :op1 ( s / on :direction ( b / left ) ) ) ) === give
mod to mod with mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( VAR / ( ) :prep-with ( ( / mod ) ) :mode imperative ) === spatial to obj with obj === ( t / event :arg0 ( y / person ) :direction ( ou / spatial ) :destination ( r / obj :op1 ( t / to ) :prep-with ( pi / obj ) ) :mode imperative ) === back to room with picture === ( t / event :arg0 ( y / you ) :direction ( ou / back ) :destination ( r / room :op1 ( t / to ) :prep-with ( pi / picture ) ) :mode imperative ) === give
sstaight === ( e /  event :direction ( m /  mod ) ) === sstaight === ( e / event :direction ( r / spatial ) ) === sstaight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
nope mod === ( e /  event :direction ( m /  mod ) ) === nope spatial === ( e / event :direction ( r / spatial ) ) === nope down === ( e / event :direction ( r / down ) ) === give
behind person to event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === behind person to event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === behind you to get out === ( t / get :arg0 ( y / you ) :direction ( r / out ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod mod === ( e /  event :direction ( m /  mod :mod mod ) ) === modifier spatial === ( e / event :direction ( r / spatial :mod modifier ) ) === other left === ( e / event :direction ( r / left :mod other ) ) === give
damn event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === damn event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === damn go back === ( t / go :arg0 ( y / you ) :direction ( r / back ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( r / right ) :mode imperative ) === give
mod the mod person came in === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :path ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) :mode imperative ) === spatial the obj person came in === ( e / event :arg0 ( y / person ) :direction ( a / spatial ) :path ( w / obj :arg1-of ( c / event :arg0 ( y / person ) ) ) :mode imperative ) === out the way you came in === ( e / event :arg0 ( y / you ) :direction ( a / out ) :path ( w / way :arg1-of ( c / come :arg0 ( y / you ) ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( r / left ) :mode imperative ) === give
event into mod mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / into ) :mod mod ) :mode imperative ) === event into modifier obj === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t / into ) :mod modifier ) :mode imperative ) === go into next room === ( t / go :arg0 ( y / you ) :destination ( r / room :op1 ( t / into ) :mod next ) :mode imperative ) === give
mod mod in front of person === ( m /  mod :location ( VAR / person :direction ( ( / mod ) ) :mod mod ) === modifier obj in front of person === ( l / obj :location ( s / person :direction ( b / spatial ) ) :mod modifier ) === next room in front of you === ( l / room :location ( s / you :direction ( b / behind ) ) :mod next ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( r / left ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === go back === ( t / go :arg0 ( y / you ) :direction ( r / back ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( r / right ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( r / right ) :mode imperative ) === give
and temporal === ( VAR / temporal ) === and temporal === ( m / temporal ) === and again === ( m / again ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === run right === ( t / run :arg0 ( y / you ) :direction ( r / right ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === go back === ( t / go :arg0 ( y / you ) :direction ( r / back ) :mode imperative ) === give
event to the mod mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / ( ) :mod mod ) :mode imperative ) === event to the modifier obj === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t / to ) :mod modifier ) :mode imperative ) === go to the other room === ( t / go :arg0 ( y / you ) :destination ( r / room :op1 ( t / to ) :mod other ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === event spatial === ( t / event :arg0 ( y / person ) :arg1 ( l / spatial ) ) === take right === ( t / take :arg0 ( y / you ) :arg1 ( l / right ) ) === give
and temporal mod === ( e /  event :time ( VAR / temporal ) :direction ( m /  mod ) ) === and temporal spatial === ( e / event :time ( m / temporal ) :direction ( r / spatial ) ) === and then left === ( e / event :time ( m / then ) :direction ( r / left ) ) === give
and event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === and event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === and turn right === ( t / turn :arg0 ( y / you ) :direction ( r / right ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === event spatial === ( t / event :arg0 ( y / person ) :arg1 ( l / spatial ) ) === take right === ( t / take :arg0 ( y / you ) :arg1 ( l / right ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === event spatial === ( t / event :arg0 ( y / person ) :arg1 ( l / spatial ) ) === take right === ( t / take :arg0 ( y / you ) :arg1 ( l / right ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( r / straight ) :mode imperative ) === give
event mod and event the tropyh === ( VAR / and :op1 ( ( / event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) :op2 ( ( / event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) ) === event spatial and event the tropyh === ( s / and :op1 ( t1 / event :arg0 ( y / person ) :arg1 ( l / spatial ) ) :op2 ( t2 / event :arg0 ( y / person ) :arg1 ( tr / obj ) ) ) === take right and get the tropyh === ( s / and :op1 ( t1 / take :arg0 ( y / you ) :arg1 ( l / right ) ) :op2 ( t2 / get :arg0 ( y / you ) :arg1 ( tr / trophy ) ) ) === give
the mod === ( ( / mod ) === the obj === ( pi / obj ) === the picture === ( pi / picture ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === go back === ( t / go :arg0 ( y / you ) :direction ( r / back ) :mode imperative ) === give
event to mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / ( ) ) :mode imperative ) === event to obj === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t / to ) ) :mode imperative ) === go to picture === ( t / go :arg0 ( y / you ) :destination ( r / picture :op1 ( t / to ) ) :mode imperative ) === give
event pack === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event pack === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === go pack === ( t / go :arg0 ( y / you ) :direction ( r / back ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === event spatial === ( t / event :arg0 ( y / person ) :arg1 ( l / spatial ) ) === take left === ( t / take :arg0 ( y / you ) :arg1 ( l / left ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === go back === ( t / go :arg0 ( y / you ) :direction ( r / back ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === event spatial === ( t / event :arg0 ( y / person ) :arg1 ( l / spatial ) ) === take left === ( t / take :arg0 ( y / you ) :arg1 ( l / left ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === go right === ( t / go :arg0 ( y / you ) :direction ( r / right ) :mode imperative ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( t / event :arg0 ( y / person ) :mode imperative ) === go === ( t / go :arg0 ( y / you ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
keep on going through doo0r === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === keep on going through doo0r === ( t / event :arg0 ( y / person ) :path ( r / obj :op1 ( t / through ) ) :mode imperative ) === keep on going through doo0r === ( t / keep-going :arg0 ( y / you ) :path ( r / door :op1 ( t / through ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event mod mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :mod mod ) ) === event modifier spatial === ( t / event :arg0 ( y / person ) :path ( l / spatial :mod modifier ) ) === continue second right === ( t / continue :arg0 ( y / you ) :path ( l / right :mod second ) ) === give
event to mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / ( ) ) :mode imperative ) === event to obj === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( t / to ) ) :mode imperative ) === go to trophy === ( t / go :arg0 ( y / you ) :destination ( r / trophy :op1 ( t / to ) ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === closer === ( e / event :direction ( r / closer ) ) === give
stright === ( e /  event :direction ( m /  mod ) ) === stright === ( e / event :direction ( r / spatial ) ) === stright === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( e / event :arg0 ( y / person ) :mode imperative ) === go === ( e / go :arg0 ( y / you ) :mode imperative ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( e / event :arg0 ( y / person ) :mode imperative ) === go === ( e / go :arg0 ( y / you ) :mode imperative ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( e / event :arg0 ( y / person ) :mode imperative ) === go === ( e / go :arg0 ( y / you ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === obj === ( e / event :direction ( r / obj ) ) === middle === ( e / event :direction ( r / middle ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === closer === ( e / event :direction ( r / closer ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod to safe room === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( VAR / ( ) ) :mode imperative ) === spatial to safe room === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / obj :op1 ( t / to ) ) :mode imperative ) === back to safe room === ( t / event :arg0 ( y / you ) :direction ( b / back ) :destination ( r / safe-room :op1 ( t / to ) ) :mode imperative ) === give
mod to mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( VAR / ( ) ) :mode imperative ) === spatial to obj === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / obj :op1 ( t / to ) ) :mode imperative ) === back to middle === ( t / event :arg0 ( y / you ) :direction ( b / back ) :destination ( r / middle :op1 ( t / to ) ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
RUN === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === RUN === ( e / event :arg0 ( y / person ) :mode imperative ) === RUN === ( e / run :arg0 ( y / you ) :mode imperative ) === give
mod === ( e /  event :destination ( m /  mod ) ) === spatial === ( e / event :destination ( r / spatial ) ) === out === ( e / event :destination ( r / out ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :destination ( m /  mod ) ) === spatial === ( e / event :destination ( r / spatial ) ) === out === ( e / event :destination ( r / out ) ) === give
mod === ( e /  event :destination ( m /  mod ) ) === spatial === ( e / event :destination ( r / spatial ) ) === out === ( e / event :destination ( r / out ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
event mod to event === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( e /  event :op1 ( VAR / ( ) ) :mode imperative ) === event spatial to event === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / event :op1 ( t / to ) ) :mode imperative ) === go back to start === ( t / go :arg0 ( y / you ) :direction ( b / back ) :destination ( r / start :op1 ( t / to ) ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === back === ( e / event :direction ( r / back ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === back === ( e / event :direction ( r / back ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
temporal RUN === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :mode imperative ) === temporal RUN === ( e / event :time ( m / temporal ) :arg0 ( y / person ) :mode imperative ) === now RUN === ( e / run :time ( m / now ) :arg0 ( y / you ) :mode imperative ) === give
stights === ( e /  event :direction ( m /  mod ) ) === stights === ( e / event :direction ( r / spatial ) ) === stights === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :mode imperative ) === go back === ( t / go :arg0 ( y / you ) :direction ( b / back ) :mode imperative ) === give
temporal GO GO GO === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :mode imperative ) === temporal GO GO GO === ( e / event :time ( m / temporal ) :arg0 ( y / person ) :mode imperative ) === now GO GO GO === ( e / go :time ( m / now ) :arg0 ( y / you ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( b / left ) :mode imperative ) === give
mod mod === ( e /  event :direction ( m /  mod :mod mod ) ) === modifier spatial === ( e / event :direction ( r / spatial :mod modifier ) ) === more left === ( e / event :direction ( r / left :mod more ) ) === give
mod mod === ( e /  event :direction ( m /  mod :mod mod ) ) === modifier spatial... === ( e / event :direction ( r / spatial :mod modifier ) ) === more left... === ( e / event :direction ( r / left :mod more ) ) === give
turn mod === ( e /  event :direction ( m /  mod ) ) === turn spatial === ( e / event :direction ( r / spatial ) ) === turn left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) === property === ( t / event :arg0 ( y / person ) :direction ( b / property ) :mode imperative ) === forwards === ( t / event :arg0 ( y / you ) :direction ( b / forwards ) :mode imperative ) === give
and event mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) === and event spatial === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :mode imperative ) === and go right === ( t / go :arg0 ( y / you ) :direction ( b / right ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( ( / mod ) :mode imperative ) === event obj === ( t / event :arg0 ( y / person ) :arg1 ( b / obj ) :mode imperative ) === press it === ( t / press :arg0 ( y / you ) :arg1 ( b / it ) :mode imperative ) === give
temporal event mod mod of this room the same mod person caem in === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod ) :path ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) :mode imperative ) === temporal event spatial spatial of this room the same obj person caem in === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :destination ( u / spatial ) :path ( w / obj :arg1-of ( c / event :arg0 ( y / person ) ) ) :mode imperative ) === now go back out of this room the same way you caem in === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / back ) :destination ( u / out ) :path ( w / way :arg1-of ( c / come :arg0 ( y / you ) ) ) :mode imperative ) === give
and event mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) === and event spatial === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :mode imperative ) === and go left === ( t / go :arg0 ( y / you ) :direction ( b / left ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod mod === ( ( / mod :mod mod ) === modifier obj === ( b / obj :mod modifier ) === that one === ( b / one :mod that ) === give
mod personr eventing at === ( ( / mod :arg1-of ( ( / event :arg0 ( VAR / person ) ) ) === obj personr eventing at === ( b / obj :arg1-of ( lo / event :arg0 ( y / person ) ) ) === that your looking at === ( b / that :arg1-of ( lo / look :arg0 ( y / you ) ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( b / left ) :mode imperative ) === give
temporal event into the mod on personr mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / into ) :location ( ( / mod :op1 ( VAR / on ) ) ) :mode imperative ) === temporal event into the obj on personr spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :destination ( r / obj :op1 ( t / into ) :location ( r1 / spatial :op1 ( o1 / on ) ) ) :mode imperative ) === now go into the room on your right === ( t / go :time ( m / now ) :arg0 ( y / you ) :destination ( r / room :op1 ( t / into ) :location ( r1 / right :op1 ( o1 / on ) ) ) :mode imperative ) === give
again event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === again event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === again turn around === ( t / turn :time ( m / now ) :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( b / left ) :mode imperative ) === give
event mod of the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod ) :mode imperative ) === event spatial of the obj === ( t / event :arg0 ( y / person ) :direction ( u / spatial ) :destination ( r / obj ) :mode imperative ) === go out of the room === ( t / go :arg0 ( y / you ) :direction ( u / out ) :destination ( r / room ) :mode imperative ) === give
mod mod as temporal === ( ( / mod :mod mod :prep-as ( VAR / temporal ) ) === modifier obj as temporal === ( b / obj :mod modifier :prep-as ( be / temporal ) ) === same one as before === ( b / one :mod same :prep-as ( be / before ) ) === give
event mod and mod === ( VAR / and :op1 ( ( / event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) :op2 ( ( / event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) ) === event property and spatial === ( s / and :op1 ( t1 / event :arg0 ( y / person ) :direction ( b1 / property ) :mode imperative ) :op2 ( t2 / event :arg0 ( y / person ) :direction ( b2 / spatial ) :mode imperative ) ) === go forwards and right === ( s / and :op1 ( t1 / go :arg0 ( y / you ) :direction ( b1 / forwards ) :mode imperative ) :op2 ( t2 / event :arg0 ( y / you ) :direction ( b2 / right ) :mode imperative ) ) === give
into the same mod as temporal === ( m /  mod :op1 ( VAR / into ) :prep-as ( VAR / temporal ) ) === into the same obj as temporal === ( q / obj :op1 ( i / into ) :prep-as ( be / temporal ) ) === into the same room as before === ( q / room :op1 ( i / into ) :prep-as ( be / before ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
and event mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) === and event spatial === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :mode imperative ) === and go right === ( t / go :arg0 ( y / you ) :direction ( b / right ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :mode imperative ) === go back === ( t / go :arg0 ( y / you ) :direction ( b / back ) :mode imperative ) === give
mod and mod === ( VAR / and :op1 ( ( / event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) :op2 ( ( / event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) ) === property and spatial === ( s / and :op1 ( t1 / event :arg0 ( y / person ) :direction ( b1 / property ) :mode imperative ) :op2 ( t2 / event :arg0 ( y / person ) :direction ( b2 / spatial ) :mode imperative ) ) === forwards and left === ( s / and :op1 ( t1 / go :arg0 ( y / you ) :direction ( b1 / forwards ) :mode imperative ) :op2 ( t2 / event :arg0 ( y / you ) :direction ( b2 / left ) :mode imperative ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === property === ( e / event :direction ( r / property ) ) === backwards === ( e / event :direction ( r / backwards ) ) === give
yea and temporal mod === ( e /  event :time ( VAR / temporal ) :direction ( m /  mod ) ) === yea and temporal spatial === ( e / event :time ( m / temporal ) :direction ( r / spatial ) ) === yea and now left === ( e / event :time ( m / now ) :direction ( r / left ) ) === give
mod of the room === ( m /  mod :poss room ) === obj of the room === ( e / obj :poss room ) === end of the room === ( e / end :poss room ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :mode imperative ) === go left === ( t / go :arg0 ( y / you ) :direction ( b / left ) :mode imperative ) === give
temporal mod === ( e /  event :time ( VAR / temporal ) :direction ( m /  mod ) ) === temporal spatial === ( e / event :time ( m / temporal ) :direction ( r / spatial ) ) === now back === ( e / event :time ( m / now ) :direction ( r / back ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
keep going === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === keep going === ( t / event :arg0 ( y / person ) :mode imperative ) === keep going === ( t / keep-going :arg0 ( y / you ) :mode imperative ) === give
and mod temporal === ( e /  event :time ( VAR / temporal ) :direction ( m /  mod ) ) === and spatial temporal === ( e / event :time ( m / temporal ) :direction ( r / spatial ) ) === and right again === ( e / event :time ( m / again ) :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
to the mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) === to the spatial === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :mode imperative ) === to the right === ( t / event :arg0 ( y / you ) :direction ( b / right ) :mode imperative ) === give
mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod ) :mode imperative ) === spatial spatial === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( u / spatial ) :mode imperative ) === back out === ( t / event :arg0 ( y / you ) :direction ( b / back ) :destination ( u / out ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
event back mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod :mod mod ) :mode imperative ) === event back spatial === ( t / event :arg0 ( y / person ) :direction ( b / spatial :mod spatial ) :mode imperative ) === go back around === ( t / go :arg0 ( y / you ) :direction ( b / around :mod around ) :mode imperative ) === give
that way === ( e /  event :direction ( m /  mod ) ) === that way === ( e / event :direction ( r / property ) ) === that way === ( e / event :direction ( r / that-way ) ) === give
mod of the mod === ( ( / event :arg0 ( VAR / person ) :destination ( ( / mod :op1 ( m /  mod ) ) :mode imperative ) === spatial of the obj === ( t2 / event :arg0 ( y / person ) :destination ( b2 / obj :op1 ( u / spatial ) ) :mode imperative ) === out of the room === ( t2 / event :arg0 ( y / you ) :destination ( b2 / room :op1 ( u / out ) ) :mode imperative ) === give
riught === ( e /  event :direction ( m /  mod ) ) === riught === ( e / event :direction ( r / spatial ) ) === riught === ( e / event :direction ( r / right ) ) === give
event through the mod mod === ( ( / event :arg0 ( VAR / person ) :path ( ( / mod :op1 ( VAR / through ) :mod mod ) :mode imperative ) === event through the modifier obj === ( t2 / event :arg0 ( y / person ) :path ( b2 / obj :op1 ( u / through ) :mod modifier ) :mode imperative ) === go through the open one === ( t2 / go :arg0 ( y / you ) :path ( b2 / one :op1 ( u / through ) :mod open ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod mod === ( e /  event :direction ( m /  mod :mod mod ) ) === modifier spatial === ( e / event :direction ( r / spatial :mod modifier ) ) === hard right === ( e / event :direction ( r / right :mod hard ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
and event where the mod was === ( ( / event :arg0 ( VAR / person ) :arg1 ( ( / mod ) :mode imperative ) === and event where the obj was === ( t2 / event :arg0 ( y / person ) :arg1 ( pa / obj ) :mode imperative ) === and look where the painting was === ( t2 / look :arg0 ( y / you ) :arg1 ( pa / painting ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === property === ( e / event :direction ( r / property ) ) === forwards === ( e / event :direction ( r / forwards ) ) === give
mod === ( m /  mod ) === obj === ( tr / obj ) === trophy === ( tr / trophy ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event obj? === ( e / event :arg0 ( y / person ) :arg1 ( i / obj ) :mode imperative ) === click it? === ( e / click :arg0 ( y / you ) :arg1 ( i / it ) :mode imperative ) === give
to the right of the mod === ( m /  mod :poss mod ) === to the right of the obj === ( l / obj :poss obj ) === to the right of the picture === ( l / picture :poss picture ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event obj === ( e / event :arg0 ( y / person ) :arg1 ( i / obj ) :mode imperative ) === click it === ( e / click :arg0 ( y / you ) :arg1 ( i / it ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go left === ( t / go :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
event mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod ) :mode imperative ) === event spatial spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( u / spatial ) :mode imperative ) === go back out === ( t / go :arg0 ( y / you ) :direction ( a / back ) :destination ( u / out ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
event mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod ) :mode imperative ) === event spatial spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( u / spatial ) :mode imperative ) === go back out === ( t / go :arg0 ( y / you ) :direction ( a / back ) :destination ( u / out ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
that is mod === ( m /  mod :domain ( m /  mod ) ) === that is property === ( c / property :domain ( n / obj ) ) === that is closest === ( c / closest :domain ( n / entity ) ) === give
to your mod === ( e /  event :direction ( m /  mod ) ) === to your spatial === ( e / event :direction ( r / spatial ) ) === to your right === ( e / event :direction ( r / right ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go back === ( t / go :arg0 ( y / you ) :direction ( a / back ) :mode imperative ) === give
event to personr mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event to personr spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go to your right === ( t / go :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
mod of the mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( m /  mod ) ) :mode imperative ) === spatial of the obj === ( t / event :arg0 ( y / person ) :destination ( u / obj :op1 ( ou / spatial ) ) :mode imperative ) === out of the room === ( t / go :arg0 ( y / you ) :destination ( u / room :op1 ( ou / out ) ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
event mod mod of the mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( m /  mod ) ) :mode imperative ) === event spatial spatial of the obj === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( u / obj :op1 ( ou / spatial ) ) :mode imperative ) === go back out of the room === ( t / go :arg0 ( y / you ) :direction ( b / back ) :destination ( u / room :op1 ( ou / out ) ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
event to the mod mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / ( ) :mod mod ) :mode imperative ) === event to the modifier obj === ( t / event :arg0 ( y / person ) :destination ( u / obj :op1 ( ou / to ) :mod modifier ) :mode imperative ) === go to the next room === ( t / go :arg0 ( y / you ) :destination ( u / room :op1 ( ou / to ) :mod next ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
mod to mod === ( m /  mod :domain ( m /  mod ) ) === property to obj === ( c / property :domain ( n / obj ) ) === closest to tree === ( c / closest :domain ( n / tree ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event obj === ( t / event :arg0 ( y / person ) :arg1 ( i1 / obj ) :mode imperative ) === click it === ( t / click :arg0 ( y / you ) :arg1 ( i1 / it ) :mode imperative ) === give
event mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod ) :mode imperative ) === event spatial spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( u / spatial ) :mode imperative ) === go back out === ( t / go :arg0 ( y / you ) :direction ( a / back ) :destination ( u / out ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event obj === ( t / event :arg0 ( y / person ) :arg1 ( i1 / obj ) :mode imperative ) === press it === ( t / press :arg0 ( y / you ) :arg1 ( i1 / it ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event through to mod mod === ( e /  event :arg0 ( VAR / person ) :path ( ( / through ) :destination ( m /  mod :op1 ( VAR / ( ) :mod mod ) :mode imperative ) === event through to modifier obj === ( t / event :arg0 ( y / person ) :path ( b / through ) :destination ( u / obj :op1 ( ou / to ) :mod modifier ) :mode imperative ) === go through to next room === ( t / go :arg0 ( y / you ) :path ( b / through ) :destination ( u / room :op1 ( ou / to ) :mod next ) :mode imperative ) === give
event towards mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / towards ) ) :mode imperative ) === event towards obj === ( t / event :arg0 ( y / person ) :destination ( u / obj :op1 ( ou / towards ) ) :mode imperative ) === go towards picture === ( t / go :arg0 ( y / you ) :destination ( u / picture :op1 ( ou / towards ) ) :mode imperative ) === give
temporal event towards mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / towards ) ) :mode imperative ) === temporal event towards obj === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :destination ( u / obj :op1 ( ou / towards ) ) :mode imperative ) === now go towards picture === ( t / go :time ( m / now ) :arg0 ( y / you ) :destination ( u / picture :op1 ( ou / towards ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go back === ( t / go :arg0 ( y / you ) :direction ( a / back ) :mode imperative ) === give
other way === ( e /  event :direction ( m /  mod ) ) === other way === ( e / event :direction ( r / obj ) ) === other way === ( e / event :direction ( r / other-way ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( m /  mod ) === obj === ( e / obj ) === empty === ( e / empty ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event obj === ( t / event :arg0 ( y / person ) :arg1 ( a / obj ) :mode imperative ) === leave room === ( t / leave :arg0 ( y / you ) :arg1 ( a / room ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go right === ( t / go :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
trun mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === trun spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === trun left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event obj === ( t / event :arg0 ( y / person ) :arg1 ( a / obj ) :mode imperative ) === leave room === ( t / leave :arg0 ( y / you ) :arg1 ( a / room ) :mode imperative ) === give
event stright === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event stright === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go stright === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
event mod to mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( VAR / ( ) :mod mod ) :mode imperative ) === event spatial to modifier obj === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( u / obj :op1 ( ou / to ) :mod modifier ) :mode imperative ) === go back to other room === ( t / go :arg0 ( y / you ) :direction ( b / back ) :destination ( u / room :op1 ( ou / to ) :mod other ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :destination ( u / spatial ) :mode imperative ) === go out === ( t / go :arg0 ( y / you ) :destination ( u / out ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :destination ( u / spatial ) :mode imperative ) === go out === ( t / go :arg0 ( y / you ) :destination ( u / out ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :destination ( u / spatial ) :mode imperative ) === go out === ( t / go :arg0 ( y / you ) :destination ( u / out ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
person were right before === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === person were right before === ( t / event :arg0 ( y / person ) :direction ( u / spatial ) :mode imperative ) === you were right before === ( t / go :arg0 ( y / you ) :direction ( u / back ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :destination ( u / spatial ) :mode imperative ) === go out === ( t / go :arg0 ( y / you ) :destination ( u / out ) :mode imperative ) === give
event mod to mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :destination ( m /  mod :op1 ( ( / ( ) ) :mode imperative ) === event obj to spatial === ( t / event :arg0 ( y / person ) :arg1 ( a / obj ) :destination ( r / spatial :op1 ( r1 / to ) ) :mode imperative ) === leave room to right === ( t / leave :arg0 ( y / you ) :arg1 ( a / room ) :destination ( r / right :op1 ( r1 / to ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event obj === ( t / event :arg0 ( y / person ) :arg1 ( a / obj ) :mode imperative ) === leave room === ( t / leave :arg0 ( y / you ) :arg1 ( a / room ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( u / spatial ) :mode imperative ) === go back === ( t / go :arg0 ( y / you ) :direction ( u / back ) :mode imperative ) === give
gettrphy === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === gettrphy === ( t / event :arg0 ( y / person ) :arg1 ( a / obj ) :mode imperative ) === gettrphy === ( t / egt :arg0 ( y / you ) :arg1 ( a / trophy ) :mode imperative ) === give
turn mod and mod the mod temporal === ( VAR / and :op1 ( ( / event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) :op2 ( ( / mod :time ( VAR / temporal ) :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) ) === turn spatial and obj the obj temporal === ( s / and :op1 ( t1 / event :arg0 ( y / person ) :direction ( u / spatial ) :mode imperative ) :op2 ( t2 / obj :time ( m / temporal ) :arg0 ( y / person ) :arg1 ( a / obj ) :mode imperative ) ) === turn around and exit the room again === ( s / and :op1 ( t1 / go :arg0 ( y / you ) :direction ( u / around ) :mode imperative ) :op2 ( t2 / exit :time ( m / again ) :arg0 ( y / you ) :arg1 ( a / room ) :mode imperative ) ) === give
event mod a mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :extent ( m /  mod ) :mode imperative ) === event spatial a property === ( t / event :arg0 ( y / person ) :direction ( u / spatial ) :extent ( l / property ) :mode imperative ) === turn left a little === ( t / turn :arg0 ( y / you ) :direction ( u / left ) :extent ( l / little ) :mode imperative ) === give
event through mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === event through spatial === ( t / event :arg0 ( y / person ) :path ( u / spatial :op1 ( ou / through ) ) :mode imperative ) === go through there === ( t / go :arg0 ( y / you ) :path ( u / there :op1 ( ou / through ) ) :mode imperative ) === give
event to the mod mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / ( ) :mod mod ) :mode imperative ) === event to the modifier obj === ( t / event :arg0 ( y / person ) :destination ( u / obj :op1 ( ou / to ) :mod modifier ) :mode imperative ) === go to the left opening === ( t / go :arg0 ( y / you ) :destination ( u / opening :op1 ( ou / to ) :mod left ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
event up to the piciture === ( e /  event :arg0 ( VAR / person ) :direction ( VAR / up ) :destination ( m /  mod :op1 ( VAR / ( ) ) :mode imperative ) === event up to the piciture === ( t / event :arg0 ( y / person ) :direction ( q / up ) :destination ( u / obj :op1 ( ou / to ) ) :mode imperative ) === go up to the piciture === ( t / go :arg0 ( y / you ) :direction ( q / up ) :destination ( u / picture :op1 ( ou / to ) ) :mode imperative ) === give
maybe event? === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === maybe event? === ( t / event :arg0 ( y / person ) :mode imperative ) === maybe click? === ( t / click :arg0 ( y / you ) :mode imperative ) === give
nvm mod up === ( e /  event :direction ( m /  mod ) :destination ( VAR / up ) ) === nvm spatial up === ( e / event :direction ( r / spatial ) :destination ( u / up ) ) === nvm back up === ( e / event :direction ( r / back ) :destination ( u / up ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod through === ( e /  event :direction ( m /  mod ) :path ( VAR / through ) ) === spatial through === ( e / event :direction ( r / spatial ) :path ( u / through ) ) === straight through === ( e / event :direction ( r / straight ) :path ( u / through ) ) === give
mod mod is mod === ( m /  mod :domain ( m /  mod :mod mod ) ) === modifier obj is property === ( d / property :domain ( a / obj :mod modifier ) ) === right alarm is deactivated === ( d / deactivated :domain ( a / alarm :mod right ) ) === give
mod and to your mod === ( e /  event :direction ( m /  mod ) :destination ( m /  mod :op1 ( VAR / ( ) ) ) === spatial and to your spatial === ( e / event :direction ( r / spatial ) :destination ( u / spatial :op1 ( t / to ) ) ) === back and to your left === ( e / event :direction ( r / back ) :destination ( u / left :op1 ( t / to ) ) ) === give
through === ( VAR / through ) === through === ( t / through ) === through === ( t / through ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event obj === ( t / event :arg0 ( y / person ) :arg1 ( i1 / obj ) :mode imperative ) === click it === ( t / click :arg0 ( y / you ) :arg1 ( i1 / it ) :mode imperative ) === give
go event mod temporal === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === go event obj temporal === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :arg1 ( i1 / obj ) :mode imperative ) === go click it again === ( t / click :time ( m / again ) :arg0 ( y / you ) :arg1 ( i1 / it ) :mode imperative ) === give
event through the mod mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( ( / through :mod mod ) ) :mode imperative ) === event through the modifier obj === ( t / event :arg0 ( y / person ) :path ( u / obj :op1 ( t1 / through :mod modifier ) ) :mode imperative ) === go through the right opening === ( t / go :arg0 ( y / you ) :path ( u / opening :op1 ( t1 / through :mod right ) ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatialy === ( e / event :direction ( r / spatial ) ) === lefty === ( e / event :direction ( r / left ) ) === give
mod mod === ( m /  mod :mod mod ) === modifier obj === ( o / obj :mod modifier ) === right opening === ( o / opening :mod right ) === give
mod on R === ( m /  mod :mod mod ) === obj on R === ( e / obj :mod modifier ) === opening on R === ( e / opening :mod right ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
the mod mod on === ( m /  mod :location ( m /  mod :op1 ( VAR / on ) ) ) === the property spatial on === ( e / property :location ( r / spatial :op1 ( o / on ) ) ) === the farthest left on === ( e / farthest :location ( r / left :op1 ( o / on ) ) ) === give
R === ( e /  event :direction ( m /  mod ) ) === R === ( e / event :direction ( r / spatial ) ) === R === ( e / event :direction ( r / right ) ) === give
R === ( e /  event :direction ( m /  mod ) ) === R === ( e / event :direction ( r / spatial ) ) === R === ( e / event :direction ( r / right ) ) === give
S === ( e /  event :direction ( m /  mod ) ) === S === ( e / event :direction ( r / spatial ) ) === S === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === back === ( e / event :direction ( r / back ) ) === give
R === ( e /  event :direction ( m /  mod ) ) === R === ( e / event :direction ( r / spatial ) ) === R === ( e / event :direction ( r / right ) ) === give
R === ( e /  event :direction ( m /  mod ) ) === R === ( e / event :direction ( r / spatial ) ) === R === ( e / event :direction ( r / right ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( u / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( u / straight ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod in mod === ( e /  event :direction ( m /  mod ) :destination ( m /  mod :op1 ( VAR / VAR ) ) ) === spatial in spatial === ( e / event :direction ( r / spatial ) :destination ( u / spatial :op1 ( t / in ) ) ) === back in there === ( e / event :direction ( r / back ) :destination ( u / there :op1 ( t / in ) ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
one more time === ( VAR / temporal ) === one more time === ( o / temporal ) === one more time === ( o / again ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
l === ( e /  event :direction ( m /  mod ) ) === l === ( e / event :direction ( r / spatial ) ) === l === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
L === ( e /  event :direction ( m /  mod ) ) === L === ( e / event :direction ( r / spatial ) ) === L === ( e / event :direction ( r / left ) ) === give
R === ( e /  event :direction ( m /  mod ) ) === R === ( e / event :direction ( r / spatial ) ) === R === ( e / event :direction ( r / right ) ) === give
on the mod === ( e /  event :direction ( m /  mod ) ) === on the spatial === ( e / event :direction ( r / spatial ) ) === on the left === ( e / event :direction ( r / left ) ) === give
mod mod === ( m /  mod :mod mod ) === modifier obj === ( e / obj :mod modifier ) === right one === ( e / one :mod right ) === give
L === ( e /  event :direction ( m /  mod ) ) === L === ( e / event :direction ( r / spatial ) ) === L === ( e / event :direction ( r / left ) ) === give
R === ( e /  event :direction ( m /  mod ) ) === R === ( e / event :direction ( r / spatial ) ) === R === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
through mod === ( e /  event :path ( m /  mod :op1 ( VAR / through ) ) ) === through spatial === ( e / event :path ( r / spatial :op1 ( th / through ) ) ) === through there === ( e / event :path ( r / there :op1 ( th / through ) ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === back === ( e / event :direction ( r / back ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
r === ( e /  event :direction ( m /  mod ) ) === r === ( e / event :direction ( r / spatial ) ) === r === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
r === ( e /  event :direction ( m /  mod ) ) === r === ( e / event :direction ( r / spatial ) ) === r === ( e / event :direction ( r / right ) ) === give
mod mod === ( m /  mod :mod mod ) === modifier obj === ( e / obj :mod modifier ) === left one === ( e / one :mod left ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( e / event :arg0 ( y / person ) :mode imperative ) === go === ( e / go :arg0 ( y / you ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod through === ( e /  event :direction ( m /  mod ) :path ( VAR / through ) ) === spatial through === ( e / event :direction ( r / spatial ) :path ( th / through ) ) === straight through === ( e / event :direction ( r / straight ) :path ( th / through ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === back === ( e / event :direction ( r / back ) ) === give
r === ( e /  event :direction ( m /  mod ) ) === r === ( e / event :direction ( r / spatial ) ) === r === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === back === ( e / event :direction ( r / back ) ) === give
l === ( e /  event :direction ( m /  mod ) ) === l === ( e / event :direction ( r / spatial ) ) === l === ( e / event :direction ( r / left ) ) === give
r === ( e /  event :direction ( m /  mod ) ) === r === ( e / event :direction ( r / spatial ) ) === r === ( e / event :direction ( r / right ) ) === give
mod mod === ( m /  mod :domain ( m /  mod ) ) === objs property === ( e / property :domain ( r / obj ) ) === trophys open === ( e / open :domain ( r / trophy ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === back === ( e / event :direction ( r / back ) ) === give
l === ( e /  event :direction ( m /  mod ) ) === l === ( e / event :direction ( r / spatial ) ) === l === ( e / event :direction ( r / left ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( e / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === go back === ( e / go :arg0 ( y / you ) :direction ( r / back ) :mode imperative ) === give
ok temporal === ( VAR / temporal ) === ok temporal === ( m / temporal ) === ok now === ( m / now ) === give
l === ( e /  event :direction ( m /  mod ) ) === l === ( e / event :direction ( r / spatial ) ) === l === ( e / event :direction ( r / left ) ) === give
r === ( e /  event :direction ( m /  mod ) ) === r === ( e / event :direction ( r / spatial ) ) === r === ( e / event :direction ( r / right ) ) === give
r === ( e /  event :direction ( m /  mod ) ) === r === ( e / event :direction ( r / spatial ) ) === r === ( e / event :direction ( r / right ) ) === give
l === ( e /  event :direction ( m /  mod ) ) === l === ( e / event :direction ( r / spatial ) ) === l === ( e / event :direction ( r / left ) ) === give
l === ( e /  event :direction ( m /  mod ) ) === l === ( e / event :direction ( r / spatial ) ) === l === ( e / event :direction ( r / left ) ) === give
r === ( e /  event :direction ( m /  mod ) ) === r === ( e / event :direction ( r / spatial ) ) === r === ( e / event :direction ( r / right ) ) === give
r === ( e /  event :direction ( m /  mod ) ) === r === ( e / event :direction ( r / spatial ) ) === r === ( e / event :direction ( r / right ) ) === give
r === ( e /  event :direction ( m /  mod ) ) === r === ( e / event :direction ( r / spatial ) ) === r === ( e / event :direction ( r / right ) ) === give
mod person === ( m /  mod :domain ( VAR / person ) ) === spatial person === ( e / spatial :domain ( y / person ) ) === behind you === ( e / behind :domain ( y / you ) ) === give
r === ( e /  event :direction ( m /  mod ) ) === r === ( e / event :direction ( r / spatial ) ) === r === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
l === ( e /  event :direction ( m /  mod ) ) === l === ( e / event :direction ( r / spatial ) ) === l === ( e / event :direction ( r / left ) ) === give
l === ( e /  event :direction ( m /  mod ) ) === l === ( e / event :direction ( r / spatial ) ) === l === ( e / event :direction ( r / left ) ) === give
r === ( e /  event :direction ( m /  mod ) ) === r === ( e / event :direction ( r / spatial ) ) === r === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === back === ( e / event :direction ( r / back ) ) === give
r === ( e /  event :direction ( m /  mod ) ) === r === ( e / event :direction ( r / spatial ) ) === r === ( e / event :direction ( r / right ) ) === give
r === ( e /  event :direction ( m /  mod ) ) === r === ( e / event :direction ( r / spatial ) ) === r === ( e / event :direction ( r / right ) ) === give
r === ( e /  event :direction ( m /  mod ) ) === r === ( e / event :direction ( r / spatial ) ) === r === ( e / event :direction ( r / right ) ) === give
r === ( e /  event :direction ( m /  mod ) ) === r === ( e / event :direction ( r / spatial ) ) === r === ( e / event :direction ( r / right ) ) === give
l === ( e /  event :direction ( m /  mod ) ) === l === ( e / event :direction ( r / spatial ) ) === l === ( e / event :direction ( r / left ) ) === give
mod greem === ( ( / mod :domain ( m /  mod ) :mod mod ) === modifier greem === ( b / property :domain ( n / obj ) :mod modifier ) === right greem === ( b / green :domain ( n / entity ) :mod right ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
l === ( e /  event :direction ( m /  mod ) ) === l === ( e / event :direction ( r / spatial ) ) === l === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === back === ( e / event :direction ( r / back ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
l === ( e /  event :direction ( m /  mod ) ) === l === ( e / event :direction ( r / spatial ) ) === l === ( e / event :direction ( r / left ) ) === give
l === ( e /  event :direction ( m /  mod ) ) === l === ( e / event :direction ( r / spatial ) ) === l === ( e / event :direction ( r / left ) ) === give
r === ( e /  event :direction ( m /  mod ) ) === r === ( e / event :direction ( r / spatial ) ) === r === ( e / event :direction ( r / right ) ) === give
l === ( e /  event :direction ( m /  mod ) ) === l === ( e / event :direction ( r / spatial ) ) === l === ( e / event :direction ( r / left ) ) === give
r === ( e /  event :direction ( m /  mod ) ) === r === ( e / event :direction ( r / spatial ) ) === r === ( e / event :direction ( r / right ) ) === give
r === ( e /  event :direction ( m /  mod ) ) === r === ( e / event :direction ( r / spatial ) ) === r === ( e / event :direction ( r / right ) ) === give
l === ( e /  event :direction ( m /  mod ) ) === l === ( e / event :direction ( r / spatial ) ) === l === ( e / event :direction ( r / left ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( u / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( u / right ) :mode imperative ) === give
now event mod a few steps and event mod temporal === ( VAR / and :op1 ( ( / event :arg0 ( VAR / person ) :direction ( m /  mod ) :extent ( m /  mod ) :mode imperative ) :op2 ( ( / event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) ) === now event spatial a few steps and event spatial temporal === ( s / and :op1 ( t1 / event :arg0 ( y / person ) :direction ( u1 / spatial ) :extent ( st / obj ) :mode imperative ) :op2 ( t2 / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( u2 / spatial ) :mode imperative ) ) === now go forward a few steps and turn right again === ( s / and :op1 ( t1 / go :arg0 ( y / you ) :direction ( u1 / forward ) :extent ( st / a-few-steps ) :mode imperative ) :op2 ( t2 / turn :time ( m / again ) :arg0 ( y / you ) :direction ( u2 / right ) :mode imperative ) ) === give
now event mod the mod person came === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative :path ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) ) === now event spatial the obj person came === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative :path ( w / obj :arg1-of ( c / event :arg0 ( y / person ) ) ) ) === now go back the way you came === ( t / go :arg0 ( y / you ) :direction ( a / back ) :mode imperative :path ( w / way :arg1-of ( c / come :arg0 ( y / you ) ) ) ) === give
okay event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === okay event spatial === ( t / event :arg0 ( y / person ) :direction ( u / spatial ) :mode imperative ) === okay turn left === ( t / turn :arg0 ( y / you ) :direction ( u / left ) :mode imperative ) === give
no the mod mod === ( e /  event :arg0 ( m /  mod ) :mod mod :mode imperative ) === no the obj modifier === ( t / event :arg0 ( y / obj ) :mod modifier :mode imperative ) === no the box first === ( t / event :arg0 ( y / box ) :mod first :mode imperative ) === give
to the mod === ( e /  event :direction ( m /  mod ) ) === to the spatial === ( e / event :direction ( r / spatial ) ) === to the right === ( e / event :direction ( r / right ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( u / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( u / left ) :mode imperative ) === give
the mod by itself === ( m /  mod :mod mod :domain ( m /  mod ) ) === the obj by itself === ( o / obj :mod modifier :domain ( n / obj ) ) === the one by itself === ( o / one :mod by-itself :domain ( n / entity ) ) === give
ok event mod into the mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( VAR / into ) :mod mod ) :mode imperative ) === ok event spatial into the modifier obj === ( t / event :arg0 ( y / person ) :direction ( u / spatial ) :destination ( r / obj :op1 ( i1 / into ) :mod modifier ) :mode imperative ) === ok go back into the other room === ( t / go :arg0 ( y / you ) :direction ( u / back ) :destination ( r / room :op1 ( i1 / into ) :mod other ) :mode imperative ) === give
ok temporal event the mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === ok temporal event the obj === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :arg1 ( r / obj ) :mode imperative ) === ok now leave the room === ( t / leave :time ( m / now ) :arg0 ( y / you ) :arg1 ( r / room ) :mode imperative ) === give
and event by the mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( ( / VAR ) ) :mode imperative ) === and event by the obj === ( t / event :arg0 ( y / person ) :path ( r / obj :op1 ( b / by ) ) :mode imperative ) === and go by the picture === ( t / go :arg0 ( y / you ) :path ( r / picture :op1 ( b / by ) ) :mode imperative ) === give
and event a mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === and event a spatial === ( t / event :arg0 ( y / person ) :arg1 ( r / spatial ) :mode imperative ) === and take a left === ( t / take :arg0 ( y / you ) :arg1 ( r / left ) :mode imperative ) === give
and temporal event to the mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === and temporal event to the spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( u / spatial ) :mode imperative ) === and now go to the right === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( u / right ) :mode imperative ) === give
to the mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / ( ) ) :mode imperative ) === to the obj === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( i1 / to ) ) :mode imperative ) === to the opening === ( t / event :arg0 ( y / you ) :destination ( r / opening :op1 ( i1 / to ) ) :mode imperative ) === give
personll event a mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === personll event a obj === ( t / event :arg0 ( y / person ) :arg1 ( r / obj ) ) === youll see a couch === ( t / see :arg0 ( y / you ) :arg1 ( r / couch ) ) === give
ok event mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod ) :mode imperative ) === ok event spatial spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( o / spatial ) :mode imperative ) === ok go back out === ( t / go :arg0 ( y / you ) :direction ( a / back ) :destination ( o / out ) :mode imperative ) === give
and event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === and event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === and go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
ok temporal event mod to the mod mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( ( / ( ) :mod mod ) :mode imperative ) === ok temporal event spatial to the modifier obj === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :destination ( o / obj :op1 ( t1 / to ) :mod modifier ) :mode imperative ) === ok now go back to the other room === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / back ) :destination ( o / room :op1 ( t1 / to ) :mod other ) :mode imperative ) === give
the on on the mod mod === ( m /  mod :domain ( m /  mod ) :location ( m /  mod :op1 ( VAR / on ) :mod mod ) ) === the on on the modifier obj === ( o / obj :domain ( n / obj ) :location ( w / obj :op1 ( o1 / on ) :mod modifier ) ) === the on on the short wall === ( o / one :domain ( n / entity ) :location ( w / wall :op1 ( o1 / on ) :mod short ) ) === give
ok temporal event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === ok temporal event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === ok now turn around === ( t / turn :time ( m / now ) :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event mod and mod the mod to personr mod === ( VAR / and :op1 ( ( / event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) :op2 ( ( / event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( ( / ( ) :location ( m /  mod ) ) :mode imperative ) ) === event spatial and spatial the obj to personr spatial === ( s / and :op1 ( t1 / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a1 / spatial ) :mode imperative ) :op2 ( t2 / event :arg0 ( y / person ) :direction ( a2 / spatial ) :destination ( o / obj :op1 ( t1 / to ) :location ( r / spatial ) ) :mode imperative ) ) === go straight and out the room to your right === ( s / and :op1 ( t1 / go :time ( m / now ) :arg0 ( y / you ) :direction ( a1 / straight ) :mode imperative ) :op2 ( t2 / event :arg0 ( y / you ) :direction ( a2 / out ) :destination ( o / room :op1 ( t1 / to ) :location ( r / right ) ) :mode imperative ) ) === give
keep going through the mod mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) :mod mod ) :mode imperative ) === keep going through the modifier obj === ( t / event :arg0 ( y / person ) :path ( r / obj :op1 ( i1 / through ) :mod modifier ) :mode imperative ) === keep going through the next room === ( t / keep-going :arg0 ( y / you ) :path ( r / room :op1 ( i1 / through ) :mod next ) :mode imperative ) === give
ok temporal event a mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === ok temporal event a spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :arg1 ( r / spatial ) :mode imperative ) === ok now take a right === ( t / take :time ( m / now ) :arg0 ( y / you ) :arg1 ( r / right ) :mode imperative ) === give
event to the mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / ( ) ) :mode imperative ) === event to the obj === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( i1 / to ) ) :mode imperative ) === go to the picture === ( t / go :arg0 ( y / you ) :destination ( r / picture :op1 ( i1 / to ) ) :mode imperative ) === give
ok event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === ok event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === ok turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event to mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / ( ) ) :mode imperative ) === event to obj === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( i1 / to ) ) :mode imperative ) === go to that === ( t / go :arg0 ( y / you ) :destination ( r / that :op1 ( i1 / to ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( r / right ) :mode imperative ) === give
event the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event the obj === ( t / event :arg0 ( y / person ) :arg1 ( r / obj ) :mode imperative ) === see the picture === ( t / see :arg0 ( y / you ) :arg1 ( r / picture ) :mode imperative ) === give
event to mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / ( ) ) :mode imperative ) === event to obj === ( t / event :arg0 ( y / person ) :destination ( r / obj :op1 ( i1 / to ) ) :mode imperative ) === go to it === ( t / go :arg0 ( y / you ) :destination ( r / it :op1 ( i1 / to ) ) :mode imperative ) === give
ok event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === ok event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === ok turn right === ( t / turn :arg0 ( y / you ) :direction ( r / right ) :mode imperative ) === give
event mod and event the mod === ( VAR / and :op1 ( ( / event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) :op2 ( ( / event :arg0 ( VAR / person ) :arg1 ( ( / mod ) :mode imperative ) ) === event spatial and event the obj === ( s / and :op1 ( t1 / event :arg0 ( y / person ) :direction ( r1 / spatial ) :mode imperative ) :op2 ( t2 / event :arg0 ( y / person ) :arg1 ( r2 / obj ) :mode imperative ) ) === turn left and see the trophy === ( s / and :op1 ( t1 / turn :arg0 ( y / you ) :direction ( r1 / left ) :mode imperative ) :op2 ( t2 / see :arg0 ( y / you ) :arg1 ( r2 / trophy ) :mode imperative ) ) === give
event to personr mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event to personr spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === turn to your left === ( t / turn :arg0 ( y / you ) :direction ( r / left ) :mode imperative ) === give
event through mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === event through obj === ( t / event :arg0 ( y / person ) :path ( r / obj :op1 ( i1 / through ) ) :mode imperative ) === go through that === ( t / go :arg0 ( y / you ) :path ( r / that :op1 ( i1 / through ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( r / straight ) :mode imperative ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( t / event :arg0 ( y / person ) :mode imperative ) === turn === ( t / turn :arg0 ( y / you ) :mode imperative ) === give
okay now event mod to mod u evented === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) :mode imperative ) === okay now event spatial to spatial u evented === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( w / spatial :arg1-of ( c / event :arg0 ( y / person ) ) ) :mode imperative ) === okay now go back to where u started === ( t / go :arg0 ( y / you ) :direction ( a / back ) :destination ( w / where :arg1-of ( c / start :arg0 ( y / you ) ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === go back === ( t / go :arg0 ( y / you ) :direction ( r / back ) :mode imperative ) === give
temporal event mod into that mod mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( VAR / into ) :mod mod ) :mode imperative ) === temporal event spatial into that modifier obj === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :destination ( w / obj :op1 ( i1 / into ) :mod modifier ) :mode imperative ) === now go back into that other room === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / back ) :destination ( w / room :op1 ( i1 / into ) :mod other ) :mode imperative ) === give
and event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === and event spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :mode imperative ) === and go back === ( t / go :arg0 ( y / you ) :direction ( r / back ) :mode imperative ) === give
event through mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === event through obj === ( t / event :arg0 ( y / person ) :path ( w / obj :op1 ( th / through ) ) :mode imperative ) === go through that === ( t / go :arg0 ( y / you ) :path ( w / that :op1 ( th / through ) ) :mode imperative ) === give
and personll event a mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === and personll event a obj === ( t / event :arg0 ( y / person ) :arg1 ( w / obj ) ) === and youll see a plant === ( t / see :arg0 ( y / you ) :arg1 ( w / plant ) ) === give
event a mod to the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :extent ( m /  mod ) :mode imperative ) === event a property to the spatial === ( t / event :arg0 ( y / person ) :direction ( r / spatial ) :extent ( l / property ) :mode imperative ) === turn a little to the left === ( t / turn :arg0 ( y / you ) :direction ( r / left ) :extent ( l / little ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
event throught mod and personll event a mod === ( VAR / and :op1 ( ( / event :arg0 ( VAR / person ) :path ( ( / mod :op1 ( VAR / through ) ) :mode imperative ) :op2 ( ( / event :arg0 ( VAR / person ) :arg1 ( ( / mod ) ) ) === event throught obj and personll event a obj === ( s / and :op1 ( t1 / event :arg0 ( y / person ) :path ( w1 / obj :op1 ( th / through ) ) :mode imperative ) :op2 ( t2 / event :arg0 ( y / person ) :arg1 ( w2 / obj ) ) ) === go throught that and youll see a couch === ( s / and :op1 ( t1 / go :arg0 ( y / you ) :path ( w1 / that :op1 ( th / through ) ) :mode imperative ) :op2 ( t2 / see :arg0 ( y / you ) :arg1 ( w2 / couch ) ) ) === give
event that mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event that obj === ( t / event :arg0 ( y / person ) :arg1 ( w / obj ) :mode imperative ) === press that button === ( t / press :arg0 ( y / you ) :arg1 ( w / button ) :mode imperative ) === give
temporal mod that mod and event mod to the mod with the mod === ( VAR / and :op1 ( m /  mod :time ( VAR / temporal ) :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) :op2 ( ( / event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( VAR / ( ) :prep-with ( m /  mod ) ) :mode imperative ) ) === temporal obj that obj and event spatial to the obj with the obj === ( s / and :op1 ( t / obj :time ( m / temporal ) :arg0 ( y / person ) :arg1 ( r / obj ) ) :op2 ( t1 / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( w / obj :op1 ( i1 / to ) :prep-with ( c / obj ) ) :mode imperative ) ) === now exit that room and go back to the room with the chair === ( s / and :op1 ( t / exit :time ( m / now ) :arg0 ( y / you ) :arg1 ( r / room ) ) :op2 ( t1 / go :arg0 ( y / you ) :direction ( a / back ) :destination ( w / room :op1 ( i1 / to ) :prep-with ( c / chair ) ) :mode imperative ) ) === give
okay temporal event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === okay temporal event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( w / spatial ) :mode imperative ) === okay now turn right === ( t / turn :time ( m / now ) :arg0 ( y / you ) :direction ( w / right ) :mode imperative ) === give
event that mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === event that spatial === ( t / event :arg0 ( y / person ) :arg1 ( l / spatial ) ) === take that back === ( t / take :arg0 ( y / you ) :arg1 ( l / back ) ) === give
with the mod in mod === ( m /  mod :location ( m /  mod :op1 ( VAR / VAR ) ) ) === with the obj in spatial === ( t / obj :location ( i / spatial :op1 ( o / in ) ) ) === with the chair in there === ( t / chair :location ( i / there :op1 ( o / in ) ) ) === give
keep going === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === keep going === ( t / event :arg0 ( y / person ) :mode imperative ) === keep going === ( t / keep-going :arg0 ( y / you ) :mode imperative ) === give
that mod === ( m /  mod ) === that obj === ( p / obj ) === that picture === ( p / picture ) === give
event up to mod === ( e /  event :arg0 ( VAR / person ) :direction ( VAR / up ) :destination ( m /  mod :op1 ( VAR / ( ) ) :mode imperative ) === event up to obj === ( t / event :arg0 ( y / person ) :direction ( u / up ) :destination ( r / obj :op1 ( i1 / to ) ) :mode imperative ) === go up to that === ( t / go :arg0 ( y / you ) :direction ( u / up ) :destination ( r / that :op1 ( i1 / to ) ) :mode imperative ) === give
event mod to the couch room === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( VAR / ( ) ) :mode imperative ) === event spatial to the couch room === ( t / event :arg0 ( y / person ) :direction ( u / spatial ) :destination ( r / obj :op1 ( i1 / to ) ) :mode imperative ) === go back to the couch room === ( t / go :arg0 ( y / you ) :direction ( u / back ) :destination ( r / couch-room :op1 ( i1 / to ) ) :mode imperative ) === give
then to the chair room === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / ( ) ) :mode imperative ) === then to the chair room === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :destination ( r / obj :op1 ( i1 / to ) ) :mode imperative ) === then to the chair room === ( t / event :time ( m / now ) :arg0 ( y / you ) :destination ( r / chair-room :op1 ( i1 / to ) ) :mode imperative ) === give
okay temporal event mod to that couch room === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( VAR / ( ) ) :mode imperative ) === okay temporal event spatial to that couch room === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / obj :op1 ( i1 / to ) ) :mode imperative ) === okay now go back to that couch room === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( b / back ) :destination ( r / couch-room :op1 ( i1 / to ) ) :mode imperative ) === give
event mod through === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :path ( VAR / through ) :mode imperative ) === event spatial through === ( t / event :arg0 ( y / person ) :direction ( w / spatial ) :path ( th / through ) :mode imperative ) === go straight through === ( t / go :arg0 ( y / you ) :direction ( w / straight ) :path ( th / through ) :mode imperative ) === give
mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :location ( m /  mod ) :mode imperative ) === spatial spatial === ( t / event :arg0 ( y / person ) :direction ( w / spatial ) :location ( th / spatial ) :mode imperative ) === right there === ( t / event :arg0 ( y / you ) :direction ( w / right ) :location ( th / there ) :mode imperative ) === give
in the mod with person === ( e /  event :arg0 ( VAR / person ) :location ( m /  mod :op1 ( VAR / VAR ) :prep-with ( VAR / person ) ) ) === in the obj with person === ( t / event :arg0 ( y / person ) :location ( w / obj :op1 ( i / in ) :prep-with ( y / person ) ) ) === in the room with you === ( t / event :arg0 ( y / you ) :location ( w / room :op1 ( i / in ) :prep-with ( y / you ) ) ) === give
yes mod mod === ( m /  mod :mod mod ) === yes modifier obj === ( t / obj :mod modifier ) === yes that one === ( t / one :mod that ) === give
on the mod event mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ( m /  mod ) :mod mod ) :location ( m /  mod :op1 ( VAR / on ) ) :mode imperative ) === on the spatial event modifier obj === ( p / event :arg0 ( y / person ) :arg1 ( q / obj ( t / obj ) :mod modifier ) :location ( r / spatial :op1 ( f / on ) ) :mode imperative ) === on the right press that one === ( p / press :arg0 ( y / you ) :arg1 ( q / one ( t / entity ) :mod that ) :location ( r / right :op1 ( f / on ) ) :mode imperative ) === give
event 180 === ( e /  event :arg0 ( VAR / person ) :extent ( m /  mod :quant 180 ) :mode imperative ) === event 180 === ( t / event :arg0 ( y / person ) :extent ( d / obj :quant 180 ) :mode imperative ) === turn 180 === ( t / turn :arg0 ( y / you ) :extent ( d / degrees :quant 180 ) :mode imperative ) === give
okay when u event through this mod event to person mod === ( VAR / list :op1 ( ( / event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) ) :op2 ( ( / event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) ) === okay when u event through this obj event to person spatial === ( s / list :op1 ( t1 / event :arg0 ( y / person ) :path ( r / obj :op1 ( i1 / through ) ) ) :op2 ( t2 / event :arg0 ( y / person ) :direction ( d / spatial ) :mode imperative ) ) === okay when u go through this intersection go to you left === ( s / list :op1 ( t1 / go :arg0 ( y / you ) :path ( r / intersection :op1 ( i1 / through ) ) ) :op2 ( t2 / go :arg0 ( y / you ) :direction ( d / left ) :mode imperative ) ) === give
event the mod directly mod of the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( ( / mod :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) ) :mode imperative ) === event the obj directly spatial of the obj === ( t / event :arg0 ( y / person ) :arg1 ( b / obj :location ( l / obj :op1 ( s / to :direction ( b / spatial ) ) ) ) :mode imperative ) === press the one directly left of the chair === ( t / press :arg0 ( y / you ) :arg1 ( b / one :location ( l / chair :op1 ( s / to :direction ( b / left ) ) ) ) :mode imperative ) === give
the closet mod === ( m /  mod :domain ( m /  mod ) :mod mod ) === the closet obj === ( c / obj :domain ( n / obj ) :mod modifier ) === the closet one === ( c / one :domain ( n / entity ) :mod closest ) === give
okay temporal event mod to the mod mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( VAR / ( ) :mod mod ) :mode imperative ) === okay temporal event spatial to the modifier obj === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / obj :op1 ( i1 / to ) :mod modifier ) :mode imperative ) === okay now go back to the original room === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( b / back ) :destination ( r / room :op1 ( i1 / to ) :mod original ) :mode imperative ) === give
okay temporal event mod to the mod pt === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( VAR / ( ) ) :mode imperative ) === okay temporal event spatial to the obj pt === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( b / spatial ) :destination ( r / obj :op1 ( i1 / to ) ) :mode imperative ) === okay now go back to the intersection pt === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( b / back ) :destination ( r / intersection :op1 ( i1 / to ) ) :mode imperative ) === give
and then instead of eventing mod event mod === ( VAR / and :op1 ( ( / event :polarity - :arg0 ( VAR / person ) :direction ( ( / mod ) ) :op2 ( ( / event :arg0 ( VAR / person ) :direction ( ( / mod ) ) ) === and then instead of eventing spatial, event spatial === ( s / and :op1 ( t1 / event :polarity - :arg0 ( y / person ) :direction ( w1 / spatial ) ) :op2 ( t2 / event :arg0 ( y / person ) :direction ( w2 / spatial ) ) ) === and then instead of turning left, go straight === ( s / and :op1 ( t1 / turn :polarity - :arg0 ( y / you ) :direction ( w1 / left ) ) :op2 ( t2 / go :arg0 ( y / you ) :direction ( w2 / straight ) ) ) === give
okiay personll event a mod and mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( VAR / and :op1 ( m /  mod ) :op2 ( m /  mod ) ) ) === okiay personll event a obj and obj === ( t / event :arg0 ( y / person ) :arg1 ( w / and :op1 ( c / obj ) :op2 ( p / obj ) ) ) === okiay youll see a couch and plant === ( t / see :arg0 ( y / you ) :arg1 ( w / and :op1 ( c / couch ) :op2 ( p / plant ) ) ) === give
event through mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( ( / through ) ) :mode imperative ) === event through spatial === ( t / event :arg0 ( y / person ) :path ( th / spatial :op1 ( t1 / through ) ) :mode imperative ) === go through there === ( t / go :arg0 ( y / you ) :path ( th / there :op1 ( t1 / through ) ) :mode imperative ) === give
event mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event modifier obj === ( t / event :arg0 ( y / person ) :arg1 ( w / obj :mod modifier ) :mode imperative ) === press that guy === ( t / press :arg0 ( y / you ) :arg1 ( w / guy :mod that ) :mode imperative ) === give
event to mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / ( ) ) :mode imperative ) === event to obj === ( t / event :arg0 ( y / person ) :destination ( th / obj :op1 ( i1 / to ) ) :mode imperative ) === go to it === ( t / go :arg0 ( y / you ) :destination ( th / it :op1 ( i1 / to ) ) :mode imperative ) === give
event mod to the couch room === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( ( / ( ) ) :mode imperative ) === event spatial to the couch room === ( t / event :arg0 ( y / person ) :direction ( w / spatial ) :destination ( th / obj :op1 ( t1 / to ) ) :mode imperative ) === go back to the couch room === ( t / go :arg0 ( y / you ) :direction ( w / back ) :destination ( th / couch-room :op1 ( t1 / to ) ) :mode imperative ) === give
okay event at the mod === ( e /  event :arg0 ( VAR / person ) :location ( m /  mod :op1 ( VAR / at ) ) :mode imperative ) === okay event at the obj === ( t / event :arg0 ( y / person ) :location ( w / obj :op1 ( a / at ) ) :mode imperative ) === okay stop at the intersection === ( t / stop :arg0 ( y / you ) :location ( w / intersection :op1 ( a / at ) ) :mode imperative ) === give
event to person$mod541$ === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event to personspatial === ( t / event :arg0 ( y / person ) :direction ( w / spatial ) :mode imperative ) === go to youleft === ( t / go :arg0 ( y / you ) :direction ( w / left ) :mode imperative ) === give
mod i ment === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === spatial i ment === ( t / event :arg0 ( y / person ) :direction ( w / spatial ) :mode imperative ) === right i ment === ( t / go :arg0 ( y / you ) :direction ( w / right ) :mode imperative ) === give
temporal u event the chair room === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === temporal u event the chair room === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :arg1 ( c / obj ) ) === now u see the chair room === ( t / see :time ( m / now ) :arg0 ( y / you ) :arg1 ( c / chair-room ) ) === give
temporal event mod mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod ) :mode imperative ) === temporal event spatial spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( w / spatial ) :destination ( oq / spatial ) :mode imperative ) === now go back out === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( w / back ) :destination ( oq / out ) :mode imperative ) === give
personre in the mod === ( m /  mod :domain ( VAR / person ) :op1 ( VAR / VAR ) ) === personre in the obj === ( t / obj :domain ( y / person ) :op1 ( i1 / in ) ) === youre in the intersection === ( t / intersection :domain ( y / you ) :op1 ( i1 / in ) ) === give
event in the center of the intersection === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / VAR ) ) :mode imperative ) === event in the center of the intersection === ( t / event :arg0 ( y / person ) :destination ( w / obj :op1 ( a / in ) ) :mode imperative ) === go in the center of the intersection === ( t / go :arg0 ( y / you ) :destination ( w / centre-of-intersection :op1 ( a / in ) ) :mode imperative ) === give
okay temporal event to personr mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) event ( the plant === okay temporal event to personr spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( w / spatial ) :mode imperative ) event to the plant === okay now go to your left === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( w / left ) :mode imperative ) go to the plant === give
event to personr mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event to personr spatial === ( t / event :arg0 ( y / person ) :direction ( w / spatial ) :mode imperative ) === turn to your left === ( t / turn :arg0 ( y / you ) :direction ( w / left ) :mode imperative ) === give
now event a little bit === ( e /  event :arg0 ( VAR / person ) :extent ( m /  mod ) :mode imperative ) === now event a little bit === ( t / event :arg0 ( y / person ) :extent ( w / property ) :mode imperative ) === now walk a little bit === ( t / walk :arg0 ( y / you ) :extent ( w / a-little ) :mode imperative ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( t / event :arg0 ( y / person ) :mode imperative ) === turn === ( t / turn :arg0 ( y / you ) :mode imperative ) === give
u event th e$mod320$ === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === u event th eobj === ( t / event :arg0 ( y / person ) :arg1 ( w / obj ) ) === u see th epicture === ( t / see :arg0 ( y / you ) :arg1 ( w / picture ) ) === give
event towards mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / towards ) ) :mode imperative ) === event towards obj === ( t / event :arg0 ( y / person ) :destination ( w / obj :op1 ( to / towards ) ) :mode imperative ) === go towards that === ( t / go :arg0 ( y / you ) :destination ( w / that :op1 ( to / towards ) ) :mode imperative ) === give
event person === ( e /  event :arg0 ( VAR / person ) :arg1 ( VAR / person ) :mode imperative ) === event person === ( t / event :arg0 ( y / person ) :arg1 ( w / person ) :mode imperative ) === press him === ( t / press :arg0 ( y / you ) :arg1 ( w / him ) :mode imperative ) === give
good temporal event === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :mode imperative ) === good temporal event === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :mode imperative ) === good now look === ( t / look :time ( m / now ) :arg0 ( y / you ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event in mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / VAR ) ) :mode imperative ) === event in spatial === ( t / event :arg0 ( y / person ) :destination ( w / spatial :op1 ( i1 / in ) ) :mode imperative ) === go in there === ( t / go :arg0 ( y / you ) :destination ( w / there :op1 ( i1 / in ) ) :mode imperative ) === give
event mod to the mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( ( / ( ) :mod mod ) :mode imperative ) === event spatial to the modifier obj === ( t / event :arg0 ( y / person ) :direction ( w / spatial ) :destination ( th / obj :op1 ( t1 / to ) :mod modifier ) :mode imperative ) === go back to the first room === ( t / go :arg0 ( y / you ) :direction ( w / back ) :destination ( th / room :op1 ( t1 / to ) :mod first ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event iin === ( e /  event :arg0 ( VAR / person ) :direction ( VAR / VAR ) :mode imperative ) === event iin === ( t / event :arg0 ( y / person ) :direction ( w / in ) :mode imperative ) === go iin === ( t / go :arg0 ( y / you ) :direction ( w / in ) :mode imperative ) === give
tuen mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === tuen spatial === ( t / event :arg0 ( y / person ) :direction ( w / spatial ) :mode imperative ) === tuen left === ( t / turn :arg0 ( y / you ) :direction ( w / left ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event through mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( ( / through ) ) :mode imperative ) === event through spatial === ( t / event :arg0 ( y / person ) :path ( th / spatial :op1 ( t1 / through ) ) :mode imperative ) === go through there === ( t / go :arg0 ( y / you ) :path ( th / there :op1 ( t1 / through ) ) :mode imperative ) === give
event$mod541$ === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === eventspatial === ( t / event :arg0 ( y / person ) :direction ( th / spatial ) :mode imperative ) === goleft === ( t / go :arg0 ( y / you ) :direction ( th / left ) :mode imperative ) === give
event through mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( ( / through ) ) :mode imperative ) === event through spatial === ( t / event :arg0 ( y / person ) :path ( th / spatial :op1 ( t1 / through ) ) :mode imperative ) === go through there === ( t / go :arg0 ( y / you ) :path ( th / there :op1 ( t1 / through ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event mod to mod person were === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) :mode imperative ) === event spatial to spatial person were === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( w / spatial :arg1-of ( c / event :arg0 ( y / person ) ) ) :mode imperative ) === go back to where you were === ( t / go :arg0 ( y / you ) :direction ( a / back ) :destination ( w / where :arg1-of ( c / be :arg0 ( y / you ) ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( th / spatial ) :mode imperative ) === go right === ( t / go :arg0 ( y / you ) :direction ( th / right ) :mode imperative ) === give
event through that mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( ( / through ) ) :mode imperative ) === event through that obj === ( t / event :arg0 ( y / person ) :path ( th / obj :op1 ( t1 / through ) ) :mode imperative ) === go through that space === ( t / go :arg0 ( y / you ) :path ( th / space :op1 ( t1 / through ) ) :mode imperative ) === give
all the way === ( e /  event :direction ( m /  mod ) ) === all the way === ( e / event :direction ( r / property ) ) === all the way === ( e / event :direction ( r / all-the-way ) ) === give
event yellwo === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event yellwo === ( t / event :arg0 ( y / person ) :arg1 ( th / property ) :mode imperative ) === press yellwo === ( t / press :arg0 ( y / you ) :arg1 ( th / yellow ) :mode imperative ) === give
in thew mod mod === ( m /  mod :domain ( m /  mod ) :op1 ( VAR / VAR ) :mod mod ) === in thew modifier obj === ( t / obj :domain ( n / obj ) :op1 ( i1 / in ) :mod modifier ) === in thew pink room === ( t / room :domain ( n / entity ) :op1 ( i1 / in ) :mod pink ) === give
event bavk to mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( ( / ( ) :mod mod ) :mode imperative ) === event bavk to modifier obj === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( th / obj :op1 ( t1 / to ) :mod modifier ) :mode imperative ) === go bavk to pic room === ( t / go :arg0 ( y / you ) :direction ( b / back ) :destination ( th / room :op1 ( t1 / to ) :mod pic ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( th / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( th / straight ) :mode imperative ) === give
event straight till mod === ( e /  event :arg0 ( VAR / person ) :extent ( m /  mod ) :mode imperative ) === event straight till obj === ( t / event :arg0 ( y / person ) :extent ( th / obj ) :mode imperative ) === go straight till end === ( t / go :arg0 ( y / you ) :extent ( th / end ) :mode imperative ) === give
event through mod mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( ( / through ) :mod mod ) :mode imperative ) === event through modifier obj === ( t / event :arg0 ( y / person ) :path ( th / obj :op1 ( t1 / through ) :mod modifier ) :mode imperative ) === go through open space === ( t / go :arg0 ( y / you ) :path ( th / space :op1 ( t1 / through ) :mod open ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( th / spatial ) :mode imperative ) === get out === ( t / get :arg0 ( y / you ) :direction ( th / out ) :mode imperative ) === give
event in mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / VAR ) ) :mode imperative ) === event in spatial === ( t / event :arg0 ( y / person ) :destination ( th / spatial :op1 ( i / in ) ) :mode imperative ) === go in there === ( t / go :arg0 ( y / you ) :destination ( th / there :op1 ( i / in ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( th / spatial ) :mode imperative ) === get out === ( t / get :arg0 ( y / you ) :direction ( th / out ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
go mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod ) :mode imperative ) === go spatial spatial === ( t / event :arg0 ( y / person ) :direction ( th / spatial ) :destination ( d / spatial ) :mode imperative ) === go straight down === ( t / get :arg0 ( y / you ) :direction ( th / straight ) :destination ( d / down ) :mode imperative ) === give
in mod mod === ( m /  mod :domain ( m /  mod ) :op1 ( VAR / VAR ) :mod mod ) === in modifier obj === ( t / obj :domain ( n / obj ) :op1 ( i1 / in ) :mod modifier ) === in that room === ( t / room :domain ( n / entity ) :op1 ( i1 / in ) :mod that ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
temporal event striagt === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === temporal event striagt === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === now go striagt === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
temporal event stright === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === temporal event stright === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === now go stright === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
ok keep going stright === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === ok keep going stright === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === ok keep going stright === ( t / keep-going :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
event mod and event stright === ( VAR / and :op1 ( ( / event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) :op2 ( ( / event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) ) === event spatial and event stright === ( s / and :op1 ( t1 / event :arg0 ( y / person ) :direction ( a1 / spatial ) :mode imperative ) :op2 ( t2 / event :arg0 ( y / person ) :direction ( a2 / spatial ) :mode imperative ) ) === turn left and go stright === ( s / and :op1 ( t1 / turn :arg0 ( y / you ) :direction ( a1 / left ) :mode imperative ) :op2 ( t2 / go :arg0 ( y / you ) :direction ( a2 / straight ) :mode imperative ) ) === give
temporal event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === temporal event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === now turn left === ( t / turn :time ( m / now ) :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
temporal event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === temporal event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === now turn around === ( t / turn :time ( m / now ) :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
temporal event stright mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod ) :mode imperative ) === temporal event stright spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :destination ( o / spatial ) :mode imperative ) === now go stright out === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / straight ) :destination ( o / out ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
keep going === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === keep going === ( t / event :arg0 ( y / person ) :mode imperative ) === keep going === ( t / keep-going :arg0 ( y / you ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event through mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === event through obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :mode imperative ) === go through space === ( t / go :arg0 ( y / you ) :path ( a / space :op1 ( th / through ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
sorry mod === ( e /  event :direction ( m /  mod ) ) === sorry spatial === ( e / event :direction ( r / spatial ) ) === sorry left === ( e / event :direction ( r / left ) ) === give
temporal got through mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === temporal got through obj === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :mode imperative ) === now got through space === ( t / event :time ( m / now ) :arg0 ( y / you ) :path ( a / space :op1 ( th / through ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event thruogh mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === event thruogh obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :mode imperative ) === go thruogh space === ( t / go :arg0 ( y / you ) :path ( a / space :op1 ( th / through ) ) :mode imperative ) === give
event staight === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event staight === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go staight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
temporal event stright === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === temporal event stright === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === now go stright === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
and event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === and event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === and turn left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
now event the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === now event the obj === ( t / event :arg0 ( y / person ) :arg1 ( a / obj ) :mode imperative ) === now leave the room === ( t / leave :arg0 ( y / you ) :arg1 ( a / room ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event through mod mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) :mod mod ) :mode imperative ) === event through modifier obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) :mod modifier ) :mode imperative ) === go through other space === ( t / go :arg0 ( y / you ) :path ( a / space :op1 ( th / through ) :mod other ) :mode imperative ) === give
event stright === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event stright === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go stright === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
tunr mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === tunr spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === tunr around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
and event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === and event === ( t / event :arg0 ( y / person ) :mode imperative ) === and leave === ( t / leave :arg0 ( y / you ) :mode imperative ) === give
event stright === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event stright === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go stright === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
event striaght and event mod === ( VAR / and :op1 ( ( / event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) :op2 ( ( / event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) ) === event striaght and event spatial === ( s / and :op1 ( t1 / event :arg0 ( y / person ) :direction ( a1 / spatial ) :mode imperative ) :op2 ( t2 / event :arg0 ( y / person ) :direction ( a2 / spatial ) :mode imperative ) ) === go striaght and turn left === ( s / and :op1 ( t1 / go :arg0 ( y / you ) :direction ( a1 / straight ) :mode imperative ) :op2 ( t2 / turn :arg0 ( y / you ) :direction ( a2 / left ) :mode imperative ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event stright mod the mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( m /  mod ) ) :mode imperative ) === event stright spatial the obj === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( s / obj :op1 ( ou / spatial ) ) :mode imperative ) === go stright out the space === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :destination ( s / space :op1 ( ou / out ) ) :mode imperative ) === give
temporal event stright === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === temporal event stright === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === now go stright === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
keep going === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === keep going === ( t / event :arg0 ( y / person ) :mode imperative ) === keep going === ( t / keep-going :arg0 ( y / you ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
and through mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === and through obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :mode imperative ) === and through space === ( t / event :arg0 ( y / you ) :path ( a / space :op1 ( th / through ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
and through mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === and through obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :mode imperative ) === and through space === ( t / event :arg0 ( y / you ) :path ( a / space :op1 ( th / through ) ) :mode imperative ) === give
event through mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === event through obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :mode imperative ) === go through space === ( t / go :arg0 ( y / you ) :path ( a / space :op1 ( th / through ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event through mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === event through obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :mode imperative ) === go through space === ( t / go :arg0 ( y / you ) :path ( a / space :op1 ( th / through ) ) :mode imperative ) === give
tunr mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === tunr spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === tunr left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( t / event :arg0 ( y / person ) :mode imperative ) === go === ( t / go :arg0 ( y / you ) :mode imperative ) === give
stright === ( e /  event :direction ( m /  mod ) ) === stright === ( e / event :direction ( r / spatial ) ) === stright === ( e / event :direction ( r / straight ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
event mod and event === ( VAR / and :op1 ( ( / event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) :op2 ( ( / event :arg0 ( VAR / person ) :mode imperative ) ) === event spatial and event === ( s / and :op1 ( t1 / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) :op2 ( t2 / event :arg0 ( y / person ) :mode imperative ) ) === turn around and go === ( s / and :op1 ( t1 / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) :op2 ( t2 / go :arg0 ( y / you ) :mode imperative ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
keep going stright === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === keep going stright === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === keep going stright === ( t / keep-going :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
now event throug mod mod to mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :location ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) :mode imperative ) === now event throug obj property to obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :location ( l / obj :op1 ( s / to :direction ( b / property ) ) ) :mode imperative ) === now go throug space next to plant === ( t / go :arg0 ( y / you ) :path ( a / space :op1 ( th / through ) ) :location ( l / plant :op1 ( s / to :direction ( b / next ) ) ) :mode imperative ) === give
event stright === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event stright === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go stright === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
event aroud === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event aroud === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn aroud === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
temporal event stright === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === temporal event stright === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === now go stright === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
event through mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === event through obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :mode imperative ) === go through space === ( t / go :arg0 ( y / you ) :path ( a / space :op1 ( th / through ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( t / event :arg0 ( y / person ) :mode imperative ) === go === ( t / go :arg0 ( y / you ) :mode imperative ) === give
event through mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === event through obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :mode imperative ) === go through space === ( t / go :arg0 ( y / you ) :path ( a / space :op1 ( th / through ) ) :mode imperative ) === give
keep going up === ( e /  event :arg0 ( VAR / person ) :direction ( VAR / up ) :mode imperative ) === keep going up === ( t / event :arg0 ( y / person ) :direction ( a / up ) :mode imperative ) === keep going up === ( t / keep-going :arg0 ( y / you ) :direction ( a / up ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event === ( e /  event :arg0 ( VAR / person ) :mode imperative ) === event === ( t / event :arg0 ( y / person ) :mode imperative ) === go === ( t / go :arg0 ( y / you ) :mode imperative ) === give
event through spacwe === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === event through spacwe === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :mode imperative ) === go through spacwe === ( t / go :arg0 ( y / you ) :path ( a / space :op1 ( th / through ) ) :mode imperative ) === give
event through mod === ( e /  event :arg0 ( VAR / person ) :path ( m /  mod :op1 ( VAR / through ) ) :mode imperative ) === event through obj === ( t / event :arg0 ( y / person ) :path ( a / obj :op1 ( th / through ) ) :mode imperative ) === go through space === ( t / go :arg0 ( y / you ) :path ( a / space :op1 ( th / through ) ) :mode imperative ) === give
tunr mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === tunr spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === tunr left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
event event === ( VAR / list :op1 ( ( / event :arg0 ( VAR / person ) :mode imperative ) :op2 ( ( / event :arg0 ( VAR / person ) :mode imperative ) ) === event event === ( s / list :op1 ( t1 / event :arg0 ( y / person ) :mode imperative ) :op2 ( t2 / event :arg0 ( y / person ) :mode imperative ) ) === go stop === ( s / list :op1 ( t1 / go :arg0 ( y / you ) :mode imperative ) :op2 ( t2 / stop :arg0 ( y / you ) :mode imperative ) ) === give
tunr mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === tunr spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === tunr around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event obj === ( t / event :arg0 ( y / person ) :arg1 ( a / obj ) :mode imperative ) === get trophy === ( t / get :arg0 ( y / you ) :arg1 ( a / trophy ) :mode imperative ) === give
othe way === ( e /  event :direction ( m /  mod ) ) === othe way === ( e / event :direction ( r / obj ) ) === othe way === ( e / event :direction ( r / other-way ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
and mod === ( e /  event :direction ( m /  mod ) ) === and spatial === ( e / event :direction ( r / spatial ) ) === and left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
no bevent mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === no bevent spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === no bgo back === ( t / go :arg0 ( y / you ) :direction ( a / back ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
then mod === ( e /  event :direction ( m /  mod ) ) === then spatial === ( e / event :direction ( r / spatial ) ) === then left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod temporal mod === ( VAR / list :op1 ( ( / event :direction ( m /  mod ) ) :op2 ( e /  event :time ( VAR / temporal ) :direction ( m /  mod ) ) ) === spatial temporal spatial === ( s / list :op1 ( e1 / event :direction ( r / spatial ) ) :op2 ( e2 / event :time ( m / temporal ) :direction ( l / spatial ) ) ) === right then left === ( s / list :op1 ( e1 / event :direction ( r / right ) ) :op2 ( e2 / event :time ( m / then ) :direction ( l / left ) ) ) === give
mod mod === ( ( / mod :mod mod ) === modifier obj === ( b / obj :mod modifier ) === other one === ( b / one :mod other ) === give
in the bno === ( VAR / VAR ) === in the bno === ( i1 / in ) === in the bno === ( i1 / in ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === back === ( e / event :direction ( r / back ) ) === give
now event mod and event the the mod on the mod === ( VAR / and :op1 ( ( / event :arg0 ( VAR / person ) :direction ( ( / mod ) :mode imperative ) :op2 ( ( / event :arg0 ( VAR / person ) :destination ( ( / mod :op1 ( ( / ( ) :location ( / mod ) ) :mode imperative ) ) === now event spatial and event the the obj on the spatial === ( s / and :op1 ( t1 / event :arg0 ( y / person ) :direction ( a1 / spatial ) :mode imperative ) :op2 ( t2 / event :arg0 ( y / person ) :destination ( a2 / obj :op1 ( t1 / to ) :location ( / spatial ) ) :mode imperative ) ) === now turn around and go the the room on the left === ( s / and :op1 ( t1 / turn :arg0 ( y / you ) :direction ( a1 / around ) :mode imperative ) :op2 ( t2 / go :arg0 ( y / you ) :destination ( a2 / room :op1 ( t1 / to ) :location ( / left ) ) :mode imperative ) ) === give
keep going mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === keep going spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === keep going straight === ( t / keep-going :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go back === ( t / go :arg0 ( y / you ) :direction ( a / back ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
temporal event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === temporal event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === now turn around === ( t / turn :time ( m / now ) :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
event in mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / VAR ) ) :mode imperative ) === event in spatial === ( t / event :arg0 ( y / person ) :destination ( a / spatial :op1 ( i1 / in ) ) :mode imperative ) === go in there === ( t / go :arg0 ( y / you ) :destination ( a / there :op1 ( i1 / in ) ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === back === ( e / event :direction ( r / back ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
then mod === ( e /  event :time ( VAR / temporal ) :direction ( m /  mod ) ) === then spatial === ( e / event :time ( m / temporal ) :direction ( r / spatial ) ) === then left === ( e / event :time ( m / now ) :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
ok event mod to mod person were === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :path ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) :mode imperative ) === ok event spatial to spatial person were === ( e / event :arg0 ( y / person ) :direction ( a / spatial ) :path ( w / spatial :arg1-of ( c / event :arg0 ( y / person ) ) ) :mode imperative ) === ok go back to where you were === ( e / go :arg0 ( y / you ) :direction ( a / back ) :path ( w / where :arg1-of ( c / be :arg0 ( y / you ) ) ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatiale === ( e / event :direction ( r / spatial ) ) === lefte === ( e / event :direction ( r / left ) ) === give
mod / mod === ( VAR / list :op1 ( ( / event :direction ( ( / mod ) ) :op2 ( e /  event :direction ( ( / mod ) ) ) === spatial / spatial === ( s / list :op1 ( e1 / event :direction ( r1 / spatial ) ) :op2 ( e2 / event :direction ( r2 / spatial ) ) ) === straight / right === ( s / list :op1 ( e1 / event :direction ( r1 / straight ) ) :op2 ( e2 / event :direction ( r2 / right ) ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === back === ( e / event :direction ( r / back ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
TREASURE!! === ( m /  mod ) === TREASURE!! === ( t / obj ) === TREASURE!! === ( t / treasure ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === back === ( e / event :direction ( r / back ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod and mod === ( VAR / and :op1 ( ( / event :direction ( ( / mod ) ) :op2 ( e /  event :direction ( ( / mod ) ) ) === spatial and spatial === ( s / and :op1 ( e1 / event :direction ( r1 / spatial ) ) :op2 ( e2 / event :direction ( r2 / spatial ) ) ) === back and straight === ( s / and :op1 ( e1 / event :direction ( r1 / back ) ) :op2 ( e2 / event :direction ( r2 / straight ) ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === back === ( e / event :direction ( r / back ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === back === ( e / event :direction ( r / back ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod mod === ( m /  mod :mod mod ) === modifier obj === ( r / obj :mod modifier ) === other room === ( r / room :mod other ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === back === ( e / event :direction ( r / back ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
ok event slight === ( e /  event :arg0 ( VAR / person ) :extent ( m /  mod ) :mode imperative ) === ok event slight === ( t / event :arg0 ( y / person ) :extent ( a / property ) :mode imperative ) === ok turn slight === ( t / turn :arg0 ( y / you ) :extent ( a / slightly ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
sitraght === ( e /  event :direction ( m /  mod ) ) === sitraght === ( e / event :direction ( r / spatial ) ) === sitraght === ( e / event :direction ( r / straight ) ) === give
alright event mod over temporal === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === alright event obj over temporal === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :arg1 ( a / obj ) :mode imperative ) === alright do it over again === ( t / do :time ( m / again ) :arg0 ( y / you ) :arg1 ( a / it ) :mode imperative ) === give
staight === ( e /  event :direction ( m /  mod ) ) === staight === ( e / event :direction ( r / spatial ) ) === staight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
person have to event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) ) === person have to event obj === ( t / event :arg0 ( y / person ) :arg1 ( a / obj ) ) === you have to click it === ( t / click :arg0 ( y / you ) :arg1 ( a / it ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go back === ( t / go :arg0 ( y / you ) :direction ( a / back ) :mode imperative ) === give
one more time === ( VAR / temporal ) === one more time === ( m / temporal ) === one more time === ( m / again ) === give
mod mod === ( m /  mod :mod mod ) === modifier obj === ( t / obj :mod modifier ) === one time === ( t / time :mod one ) === give
event the number === ( e /  event :arg0 ( VAR / person ) :arg1 ( VAR / number ) ) === event the number === ( t / event :arg0 ( y / person ) :arg1 ( a / number ) ) === try the second === ( t / try :arg0 ( y / you ) :arg1 ( a / second ) ) === give
o$mod0$ mod === ( m /  mod :mod mod ) === omodifier obj === ( t / obj :mod modifier ) === oone time === ( t / time :mod one ) === give
backward === ( e /  event :direction ( m /  mod ) ) === backward === ( e / event :direction ( r / property ) ) === backward === ( e / event :direction ( r / backwards ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
staight === ( e /  event :direction ( m /  mod ) ) === staight === ( e / event :direction ( r / spatial ) ) === staight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod mod === ( e /  event :direction ( m /  mod ) :location ( m /  mod ) ) === spatial spatial === ( e / event :direction ( r / spatial ) :location ( h / spatial ) ) === right here === ( e / event :direction ( r / right ) :location ( h / here ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
trasure === ( m /  mod ) === trasure === ( t / obj ) === trasure === ( t / treasure ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
no event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === no event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === no go back === ( t / go :arg0 ( y / you ) :direction ( a / back ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
ok event mod temporal === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === ok event spatial temporal === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === ok go straight now === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
event up === ( e /  event :arg0 ( VAR / person ) :direction ( VAR / up ) :mode imperative ) === event up === ( t / event :arg0 ( y / person ) :direction ( a / up ) :mode imperative ) === go up === ( t / go :arg0 ( y / you ) :direction ( a / up ) :mode imperative ) === give
can person event the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode interrogative ) === can person event the obj === ( t / event :arg0 ( y / person ) :arg1 ( a / obj ) :mode interrogative ) === can you click the button === ( t / click :arg0 ( y / you ) :arg1 ( a / button ) :mode interrogative ) === give
event mod a little === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :extent ( m /  mod ) :mode imperative ) === event spatial a little === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :extent ( l / property ) :mode imperative ) === go left a little === ( t / go :arg0 ( y / you ) :direction ( a / left ) :extent ( l / a-little ) :mode imperative ) === give
temporal event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === temporal event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === now go straight === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go left === ( t / go :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go right === ( t / go :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
ok event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === ok event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === ok go right === ( t / go :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
temporal event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === temporal event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === now go straight === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
temporal event strasight === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === temporal event strasight === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === now go strasight === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
ok temporaleventr mod a mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :extent ( m /  mod ) :mode imperative ) === ok temporaleventr spatial a property === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :extent ( l / property ) :mode imperative ) === ok nowgor left a little === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / left ) :extent ( l / little ) :mode imperative ) === give
temporal event riight === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === temporal event riight === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === now go riight === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go back === ( t / go :arg0 ( y / you ) :direction ( a / back ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
event mod mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod :mod mod ) :mode imperative ) === event modifier obj === ( t / event :arg0 ( y / person ) :arg1 ( a / obj :mod modifier ) :mode imperative ) === click that one === ( t / click :arg0 ( y / you ) :arg1 ( a / one :mod that ) :mode imperative ) === give
ok temporal event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === ok temporal event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === ok now go straight === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
ok person have to event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === ok person have to event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === ok you have to go back === ( t / go :arg0 ( y / you ) :direction ( a / back ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go back === ( t / go :arg0 ( y / you ) :direction ( a / back ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go back === ( t / go :arg0 ( y / you ) :direction ( a / back ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn right === ( t / turn :arg0 ( y / you ) :direction ( a / right ) :mode imperative ) === give
ok that way === ( e /  event :direction ( m /  mod ) ) === ok that way === ( e / event :direction ( r / property ) ) === ok that way === ( e / event :direction ( r / that-way ) ) === give
by mod === ( m /  mod :op1 ( VAR / VAR ) ) === by obj === ( e / obj :op1 ( r / by ) ) === by chair === ( e / chair :op1 ( r / by ) ) === give
temporal event mod through mod yu came === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :path ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) :mode imperative ) === temporal event spatial through spatial yu came === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :path ( w / spatial :arg1-of ( c / event :arg0 ( y / person ) ) ) :mode imperative ) === now go back through where yu came === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / back ) :path ( w / where :arg1-of ( c / come :arg0 ( y / you ) ) ) :mode imperative ) === give
gevent mod a little === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :extent ( m /  mod ) :mode imperative ) === gevent spatial a little === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :extent ( l / property ) :mode imperative ) === ggo straight a little === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :extent ( l / a-little ) :mode imperative ) === give
temporal event === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :mode imperative ) === temporal event === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :mode imperative ) === now turn === ( t / turn :time ( m / now ) :arg0 ( y / you ) :mode imperative ) === give
other way === ( e /  event :direction ( m /  mod ) ) === other way === ( e / event :direction ( r / obj ) ) === other way === ( e / event :direction ( r / other-way ) ) === give
other way === ( e /  event :direction ( m /  mod ) ) === other way === ( e / event :direction ( r / obj ) ) === other way === ( e / event :direction ( r / other-way ) ) === give
temporal mod === ( e /  event :time ( VAR / temporal ) :direction ( m /  mod ) ) === temporal spatial === ( e / event :time ( m / temporal ) :direction ( r / spatial ) ) === now straight === ( e / event :time ( m / now ) :direction ( r / straight ) ) === give
ok temporal event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === ok temporal event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === ok now go back === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / back ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
no sorry event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === no sorry event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === no sorry go back === ( t / go :arg0 ( y / you ) :direction ( a / back ) :mode imperative ) === give
hiybluwe on closet to u === ( m /  mod :domain ( m /  mod ) :location ( VAR / person :direction ( m /  mod :op1 ( VAR / ( ) ) ) ) === hiybluwe on closet to u === ( q / property :domain ( t / obj ) :location ( l / person :direction ( c / property :op1 ( t / to ) ) ) ) === hiybluwe on closet to u === ( q / blue :domain ( t / entity ) :location ( l / you :direction ( c / closest :op1 ( t / to ) ) ) ) === give
event in temporal striaght === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event in temporal striaght === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn in now striaght === ( t / turn :time ( m / now ) :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
ok now back to mod with mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( ( / ( ) :prep-with ( m /  mod ) ) :mode imperative ) === ok now back to obj with obj === ( t / event :arg0 ( y / person ) :destination ( a / obj :op1 ( t1 / to ) :prep-with ( c / obj ) ) :mode imperative ) === ok now back to room with couch === ( t / event :arg0 ( y / you ) :destination ( a / room :op1 ( t1 / to ) :prep-with ( c / couch ) ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
ok temporal mod === ( e /  event :time ( VAR / temporal ) :direction ( m /  mod ) ) === ok temporal spatial === ( e / event :time ( m / temporal ) :direction ( r / spatial ) ) === ok now left === ( e / event :time ( m / now ) :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go back === ( t / go :arg0 ( y / you ) :direction ( a / back ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn left === ( t / turn :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
mod mod === ( m /  mod :mod mod ) === modifier obj === ( c / obj :mod modifier ) === closest one === ( c / one :mod closest ) === give
ok temporal event mod through === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :path ( VAR / through ) :mode imperative ) === ok temporal event spatial through === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :path ( h / through ) :mode imperative ) === ok now go back through === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / back ) :path ( h / through ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go left === ( t / go :arg0 ( y / you ) :direction ( a / left ) :mode imperative ) === give
ok temporal event mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === ok temporal event spatial === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === ok now go straight === ( t / go :time ( m / now ) :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
temporal mod === ( e /  event :time ( VAR / temporal ) :direction ( m /  mod ) ) === temporal spatial === ( e / event :time ( m / temporal ) :direction ( r / spatial ) ) === now left === ( e / event :time ( m / now ) :direction ( r / left ) ) === give
no mod sorry === ( e /  event :time ( VAR / temporal ) :direction ( m /  mod ) ) === no spatial sorry === ( e / event :time ( m / temporal ) :direction ( r / spatial ) ) === no right sorry === ( e / event :time ( m / now ) :direction ( r / right ) ) === give
ok event the mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === ok event the obj === ( t / event :arg0 ( y / person ) :arg1 ( a / obj ) :mode imperative ) === ok touch the picture === ( t / touch :arg0 ( y / you ) :arg1 ( a / picture ) :mode imperative ) === give
temporal event to mod === ( e /  event :time ( VAR / temporal ) :arg0 ( VAR / person ) :destination ( m /  mod ) :mode imperative ) === temporal event to obj === ( t / event :time ( m / temporal ) :arg0 ( y / person ) :destination ( a / obj ) :mode imperative ) === now go to trophy === ( t / go :time ( m / now ) :arg0 ( y / you ) :destination ( a / trophy ) :mode imperative ) === give
event mod into mod of mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( VAR / ( :direction ( ( / mod ) ) ) :mode imperative ) === event spatial into obj of obj === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( l / obj :op1 ( s / to :direction ( b / obj ) ) ) :mode imperative ) === go straight into middle of room === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :destination ( l / room :op1 ( s / to :direction ( b / middle ) ) ) :mode imperative ) === give
event mod to mod mod === ( e /  event :arg0 ( VAR / person ) :direction ( ( / mod ) :destination ( m /  mod :op1 ( ( / ( ) :mod mod ) :mode imperative ) === event spatial to modifier obj === ( t / event :arg0 ( y / person ) :direction ( b / spatial ) :destination ( a / obj :op1 ( t1 / to ) :mod modifier ) :mode imperative ) === go back to previous room === ( t / go :arg0 ( y / you ) :direction ( b / back ) :destination ( a / room :op1 ( t1 / to ) :mod previous ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
event stragiht === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event stragiht === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go stragiht === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
in that mod === ( m /  mod :op1 ( VAR / VAR ) ) === in that obj === ( i / obj :op1 ( i1 / in ) ) === in that room === ( i / room :op1 ( i1 / in ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
to mod n to mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod ) :mode imperative ) === to spatial n to spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :destination ( r / spatial ) :mode imperative ) === to straight n to right === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :destination ( r / right ) :mode imperative ) === give
into that mod === ( e /  event :arg0 ( VAR / person ) :destination ( m /  mod :op1 ( VAR / into ) ) :mode imperative ) === into that obj === ( t / event :arg0 ( y / person ) :destination ( a / obj :op1 ( in / into ) ) :mode imperative ) === into that room === ( t / event :arg0 ( y / you ) :destination ( a / room :op1 ( in / into ) ) :mode imperative ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === go straight === ( t / go :arg0 ( y / you ) :direction ( a / straight ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === back === ( e / event :direction ( r / back ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod to prev mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :destination ( m /  mod :op1 ( VAR / into ) :mod mod ) :mode imperative ) === spatial to prev obj === ( t / event :arg0 ( y / person ) :direction ( d / spatial ) :destination ( a / obj :op1 ( in / into ) :mod modifier ) :mode imperative ) === back to prev room === ( t / event :arg0 ( y / you ) :direction ( d / back ) :destination ( a / room :op1 ( in / into ) :mod previous ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod where u came === ( m /  mod :arg1-of ( e /  event :arg0 ( VAR / person ) ) ) === spatial where u came === ( a / spatial :arg1-of ( c / event :arg0 ( y / person ) ) ) === back where u came === ( a / back :arg1-of ( c / come :arg0 ( y / you ) ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
strain === ( e /  event :direction ( m /  mod ) ) === strain === ( e / event :direction ( r / spatial ) ) === strain === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :arg1 ( m /  mod ) :mode imperative ) === event obj === ( t / event :arg0 ( y / person ) :arg1 ( a / obj ) :mode imperative ) === take trophy === ( t / take :arg0 ( y / you ) :arg1 ( a / trophy ) :mode imperative ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === closer === ( e / event :direction ( r / closer ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial5 === ( e / event :direction ( r / spatial ) ) === left5 === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === right === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === straight === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === left === ( e / event :direction ( r / left ) ) === give
r === ( e /  event :direction ( m /  mod ) ) === r === ( e / event :direction ( r / spatial ) ) === r === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === back === ( e / event :direction ( r / back ) ) === give
s === ( e /  event :direction ( m /  mod ) ) === s === ( e / event :direction ( r / spatial ) ) === s === ( e / event :direction ( r / straight ) ) === give
s === ( e /  event :direction ( m /  mod ) ) === s === ( e / event :direction ( r / spatial ) ) === s === ( e / event :direction ( r / straight ) ) === give
l === ( e /  event :direction ( m /  mod ) ) === l === ( e / event :direction ( r / spatial ) ) === l === ( e / event :direction ( r / left ) ) === give
r === ( e /  event :direction ( m /  mod ) ) === r === ( e / event :direction ( r / spatial ) ) === r === ( e / event :direction ( r / right ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === back === ( e / event :direction ( r / back ) ) === give
event mod === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event spatial === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn around === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
s === ( e /  event :direction ( m /  mod ) ) === s === ( e / event :direction ( r / spatial ) ) === s === ( e / event :direction ( r / straight ) ) === give
r === ( e /  event :direction ( m /  mod ) ) === r === ( e / event :direction ( r / spatial ) ) === r === ( e / event :direction ( r / right ) ) === give
mod r === ( e /  event :direction ( m /  mod :mod mod ) ) === modifier r === ( e / event :direction ( r / spatial :mod modifier ) ) === sharp r === ( e / event :direction ( r / right :mod sharp ) ) === give
s === ( e /  event :direction ( m /  mod ) ) === s === ( e / event :direction ( r / spatial ) ) === s === ( e / event :direction ( r / straight ) ) === give
l === ( e /  event :direction ( m /  mod ) ) === l === ( e / event :direction ( r / spatial ) ) === l === ( e / event :direction ( r / left ) ) === give
event round === ( e /  event :arg0 ( VAR / person ) :direction ( m /  mod ) :mode imperative ) === event round === ( t / event :arg0 ( y / person ) :direction ( a / spatial ) :mode imperative ) === turn round === ( t / turn :arg0 ( y / you ) :direction ( a / around ) :mode imperative ) === give
s === ( e /  event :direction ( m /  mod ) ) === s === ( e / event :direction ( r / spatial ) ) === s === ( e / event :direction ( r / straight ) ) === give
mod r === ( e /  event :direction ( m /  mod :mod mod ) ) === modifier r === ( e / event :direction ( r / spatial :mod modifier ) ) === sharp r === ( e / event :direction ( r / right :mod sharp ) ) === give
s === ( e /  event :direction ( m /  mod ) ) === s === ( e / event :direction ( r / spatial ) ) === s === ( e / event :direction ( r / straight ) ) === give
l === ( e /  event :direction ( m /  mod ) ) === l === ( e / event :direction ( r / spatial ) ) === l === ( e / event :direction ( r / left ) ) === give
l === ( e /  event :direction ( m /  mod ) ) === l === ( e / event :direction ( r / spatial ) ) === l === ( e / event :direction ( r / left ) ) === give
s === ( e /  event :direction ( m /  mod ) ) === s === ( e / event :direction ( r / spatial ) ) === s === ( e / event :direction ( r / straight ) ) === give
s === ( e /  event :direction ( m /  mod ) ) === s === ( e / event :direction ( r / spatial ) ) === s === ( e / event :direction ( r / straight ) ) === give
mod r === ( e /  event :direction ( m /  mod :mod mod ) ) === modifier r === ( e / event :direction ( r / spatial :mod modifier ) ) === sharp r === ( e / event :direction ( r / right :mod sharp ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === round === ( e / event :direction ( r / round ) ) === give
s === ( e /  event :direction ( m /  mod ) ) === s === ( e / event :direction ( r / spatial ) ) === s === ( e / event :direction ( r / straight ) ) === give
r === ( e /  event :direction ( m /  mod ) ) === r === ( e / event :direction ( r / spatial ) ) === r === ( e / event :direction ( r / right ) ) === give
s === ( e /  event :direction ( m /  mod ) ) === s === ( e / event :direction ( r / spatial ) ) === s === ( e / event :direction ( r / straight ) ) === give
mod === ( e /  event :direction ( m /  mod ) ) === spatial === ( e / event :direction ( r / spatial ) ) === round === ( e / event :direction ( r / round ) ) === give
s === ( e /  event :direction ( m /  mod ) ) === s === ( e / event :direction ( r / spatial ) ) === s === ( e / event :direction ( r / straight ) ) === give
l === ( e /  event :direction ( m /  mod ) ) === l === ( e / event :direction ( r / spatial ) ) === l === ( e / event :direction ( r / left ) ) === give
l on mod === ( e /  event :direction ( m /  mod ) :location ( m /  mod :op1 ( VAR / on ) ) ) === l on obj === ( e / event :direction ( r / spatial ) :location ( en / obj :op1 ( o1 / on ) ) ) === l on end === ( e / event :direction ( r / left ) :location ( en / end :op1 ( o1 / on ) ) ) === give
S === ( e /  event :direction ( m /  mod ) ) === S === ( e / event :direction ( r / spatial ) ) === S === ( e / event :direction ( r / straight ) ) === give
L === ( e /  event :direction ( m /  mod ) ) === L === ( e / event :direction ( r / spatial ) ) === L === ( e / event :direction ( r / left ) ) === give
L === ( e /  event :direction ( m /  mod ) ) === L === ( e / event :direction ( r / spatial ) ) === L === ( e / event :direction ( r / left ) ) === give
TROPHY === ( m /  mod :domain ( m /  mod ) ) === TROPHY === ( t / obj :domain ( n / obj ) ) === TROPHY === ( t / trophy :domain ( n / entity ) ) === give
